// üöÄ Direct Preview Service - Xem tr∆∞·ªõc d·ªØ li·ªáu tr·ª±c ti·∫øp t·ª´ DataTables
// Nhanh h∆°n v√† hi·ªáu qu·∫£ h∆°n so v·ªõi ImportedDataRecords

import api from './api.js'

class DirectPreviewService {
  constructor() {
    console.log('üéØ DirectPreviewService initialized')
  }

  /**
   * L·∫•y danh s√°ch data types v·ªõi s·ªë l∆∞·ª£ng records
   * @returns {Promise<Object>} Response v·ªõi danh s√°ch data types v√† counts
   */
  async getDataTypesWithCounts() {
    try {
      console.log('üìä Getting data types with counts...')
      const response = await api.get('/DataImport/direct-preview/data-types')

      console.log('‚úÖ Data types loaded:', response.data?.length || 0, 'types')
      return {
        success: true,
        data: response.data || [],
        message: 'L·∫•y danh s√°ch data types th√†nh c√¥ng',
      }
    } catch (error) {
      console.error('‚ùå Error getting data types:', error)
      return {
        success: false,
        data: [],
        error: error.message || 'L·ªói khi l·∫•y danh s√°ch data types',
        errorDetails: error.response?.data,
      }
    }
  }

  /**
   * Preview d·ªØ li·ªáu tr·ª±c ti·∫øp t·ª´ b·∫£ng theo data type
   * @param {string} dataType - Lo·∫°i d·ªØ li·ªáu (DP01, EI01, etc.)
   * @param {number} page - Trang hi·ªán t·∫°i (default: 1)
   * @param {number} pageSize - S·ªë records per page (default: 50)
   * @returns {Promise<Object>} Response v·ªõi data v√† pagination info
   */
  async previewDataType(dataType, page = 1, pageSize = 50) {
    try {
      if (!dataType) {
        throw new Error('Data type kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng')
      }

      console.log(`üîç Previewing ${dataType} - page ${page}, size ${pageSize}`)

      const response = await api.get(`/DataImport/direct-preview/${dataType}`, {
        params: { page, pageSize },
      })

      const result = response.data
      console.log(`‚úÖ Preview ${dataType}:`, result.TotalRecords, 'total,', result.Data?.length || 0, 'loaded')

      return {
        success: true,
        data: result.Data || [],
        totalRecords: result.TotalRecords || 0,
        page: result.Page || 1,
        pageSize: result.PageSize || pageSize,
        totalPages: result.TotalPages || 1,
        dataType: result.DataType || dataType,
        message: result.Message || `Xem tr∆∞·ªõc ${dataType} th√†nh c√¥ng`,
      }
    } catch (error) {
      console.error(`‚ùå Error previewing ${dataType}:`, error)
      return {
        success: false,
        data: [],
        totalRecords: 0,
        page: 1,
        pageSize: pageSize,
        totalPages: 0,
        dataType: dataType,
        error: error.message || `L·ªói khi xem tr∆∞·ªõc ${dataType}`,
        errorDetails: error.response?.data,
      }
    }
  }

  /**
   * L·∫•y th·ªëng k√™ t·ªïng quan v·ªÅ t·∫•t c·∫£ b·∫£ng data
   * @returns {Promise<Object>} Response v·ªõi statistics c·ªßa t·∫•t c·∫£ b·∫£ng
   */
  async getDataStatistics() {
    try {
      console.log('üìà Getting data statistics...')
      const response = await api.get('/DataImport/direct-preview/statistics')

      const result = response.data
      console.log('‚úÖ Statistics loaded:', result.Summary?.TotalRecords || 0, 'total records')

      return {
        success: true,
        tables: result.Tables || {},
        summary: result.Summary || {},
        message: 'L·∫•y th·ªëng k√™ th√†nh c√¥ng',
      }
    } catch (error) {
      console.error('‚ùå Error getting statistics:', error)
      return {
        success: false,
        tables: {},
        summary: {},
        error: error.message || 'L·ªói khi l·∫•y th·ªëng k√™',
        errorDetails: error.response?.data,
      }
    }
  }

  /**
   * Ki·ªÉm tra xem m·ªôt data type c√≥ d·ªØ li·ªáu hay kh√¥ng
   * @param {string} dataType - Lo·∫°i d·ªØ li·ªáu c·∫ßn ki·ªÉm tra
   * @returns {Promise<boolean>} True n·∫øu c√≥ d·ªØ li·ªáu
   */
  async hasData(dataType) {
    try {
      const result = await this.previewDataType(dataType, 1, 1)
      return result.success && result.totalRecords > 0
    } catch (error) {
      console.error(`‚ùå Error checking data for ${dataType}:`, error)
      return false
    }
  }

  /**
   * L·∫•y sample data ƒë·ªÉ hi·ªÉn th·ªã quick preview
   * @param {string} dataType - Lo·∫°i d·ªØ li·ªáu
   * @param {number} sampleSize - S·ªë l∆∞·ª£ng records m·∫´u (default: 5)
   * @returns {Promise<Object>} Response v·ªõi sample data
   */
  async getSampleData(dataType, sampleSize = 5) {
    try {
      console.log(`üé≤ Getting sample data for ${dataType}...`)
      const result = await this.previewDataType(dataType, 1, sampleSize)

      return {
        success: result.success,
        data: result.data,
        totalRecords: result.totalRecords,
        sampleSize: result.data?.length || 0,
        dataType: dataType,
        message: result.message,
      }
    } catch (error) {
      console.error(`‚ùå Error getting sample data for ${dataType}:`, error)
      return {
        success: false,
        data: [],
        totalRecords: 0,
        sampleSize: 0,
        dataType: dataType,
        error: error.message || `L·ªói khi l·∫•y sample data ${dataType}`,
      }
    }
  }

  /**
   * Format data cho display trong b·∫£ng
   * @param {Array} data - D·ªØ li·ªáu th√¥ t·ª´ API
   * @param {string} dataType - Lo·∫°i d·ªØ li·ªáu
   * @returns {Object} Formatted data v·ªõi columns v√† rows
   */
  formatDataForDisplay(data, dataType) {
    try {
      if (!data || !Array.isArray(data) || data.length === 0) {
        return {
          columns: [],
          rows: [],
          totalColumns: 0,
          totalRows: 0,
        }
      }

      // L·∫•y columns t·ª´ record ƒë·∫ßu ti√™n
      const firstRecord = data[0]
      const columns = Object.keys(firstRecord).map(key => ({
        key: key,
        label: key,
        type: this.detectColumnType(firstRecord[key]),
        sortable: true,
      }))

      // Format rows
      const rows = data.map((record, index) => ({
        id: record.Id || record.id || index,
        ...record,
      }))

      console.log(`üé® Formatted ${dataType}:`, columns.length, 'columns,', rows.length, 'rows')

      return {
        columns: columns,
        rows: rows,
        totalColumns: columns.length,
        totalRows: rows.length,
        dataType: dataType,
      }
    } catch (error) {
      console.error('‚ùå Error formatting data for display:', error)
      return {
        columns: [],
        rows: [],
        totalColumns: 0,
        totalRows: 0,
        error: error.message,
      }
    }
  }

  /**
   * Detect ki·ªÉu d·ªØ li·ªáu c·ªßa column
   * @param {any} value - Gi√° tr·ªã c·∫ßn detect type
   * @returns {string} Ki·ªÉu d·ªØ li·ªáu
   */
  detectColumnType(value) {
    if (value === null || value === undefined) return 'text'
    if (typeof value === 'number') return 'number'
    if (typeof value === 'boolean') return 'boolean'
    if (value instanceof Date) return 'date'
    if (typeof value === 'string') {
      // Check if it's a date string
      if (/^\d{4}-\d{2}-\d{2}/.test(value)) return 'date'
      // Check if it's a number string
      if (/^\d+(\.\d+)?$/.test(value)) return 'number'
    }
    return 'text'
  }

  /**
   * Ki·ªÉm tra xem c√≥ d·ªØ li·ªáu cho data type kh√¥ng
   */
  async hasData(dataType) {
    try {
      const result = await this.getDataTypesWithCounts()
      if (!result.success) return false

      const dataTypeInfo = result.data.find(dt => dt.DataType === dataType)
      return dataTypeInfo && dataTypeInfo.RecordCount > 0
    } catch (error) {
      console.error('Error checking data availability:', error)
      return false
    }
  }
}

// Export singleton instance
export default new DirectPreviewService()
