{
  "Vue Component Setup": {
    "prefix": "vue-setup",
    "body": [
      "<template>",
      "  <div class=\"${1:component-name}\">",
      "    $2",
      "  </div>",
      "</template>",
      "",
      "<script setup>",
      "import { ref, reactive, computed, onMounted } from 'vue'",
      "",
      "// Props",
      "const props = defineProps({",
      "  $3",
      "})",
      "",
      "// Emits",
      "const emit = defineEmits(['$4'])",
      "",
      "// Reactive data",
      "const ${5:data} = ref($6)",
      "",
      "// Lifecycle",
      "onMounted(() => {",
      "  $7",
      "})",
      "</script>",
      "",
      "<style scoped>",
      ".${1:component-name} {",
      "  $8",
      "}",
      "</style>"
    ],
    "description": "Vue 3 Composition API component template"
  },
  "Vue Store": {
    "prefix": "vue-store",
    "body": [
      "import { defineStore } from 'pinia'",
      "import { ref, computed } from 'vue'",
      "",
      "export const use${1:Store}Store = defineStore('${2:storeName}', () => {",
      "  // State",
      "  const ${3:state} = ref($4)",
      "",
      "  // Getters",
      "  const ${5:getter} = computed(() => {",
      "    return $6",
      "  })",
      "",
      "  // Actions",
      "  const ${7:action} = async () => {",
      "    $8",
      "  }",
      "",
      "  return {",
      "    ${3:state},",
      "    ${5:getter},",
      "    ${7:action}",
      "  }",
      "})"
    ],
    "description": "Pinia store with composition API"
  },
  "API Service": {
    "prefix": "api-service",
    "body": [
      "import axios from 'axios'",
      "",
      "const api = axios.create({",
      "  baseURL: '/api',",
      "  timeout: 10000",
      "})",
      "",
      "export const ${1:service}Api = {",
      "  async getAll() {",
      "    const response = await api.get('/${2:endpoint}')",
      "    return response.data",
      "  },",
      "",
      "  async getById(id) {",
      "    const response = await api.get(`/${2:endpoint}/\\${id}`)",
      "    return response.data",
      "  },",
      "",
      "  async create(data) {",
      "    const response = await api.post('/${2:endpoint}', data)",
      "    return response.data",
      "  },",
      "",
      "  async update(id, data) {",
      "    const response = await api.put(`/${2:endpoint}/\\${id}`, data)",
      "    return response.data",
      "  },",
      "",
      "  async delete(id) {",
      "    const response = await api.delete(`/${2:endpoint}/\\${id}`)",
      "    return response.data",
      "  }",
      "}"
    ],
    "description": "API service template"
  }
}
