// üïí temporalService.js - D·ªãch v·ª• x·ª≠ l√Ω SQL Server Temporal Tables thay th·∫ø SCD Type 2
import api from './api';

class TemporalService {
  constructor() {
    this.baseURL = '/temporal';
  }

  // üîç Query temporal data v·ªõi filters v√† pagination
  async queryTemporalData(queryRequest) {
    try {
      const response = await api.post(`${this.baseURL}/query`, queryRequest);
      return {
        success: true,
        data: response.data.data,
        message: response.data.message
      };
    } catch (error) {
      console.error('‚ùå L·ªói query temporal data:', error);
      return {
        success: false,
        error: error.response?.data?.message || 'L·ªói k·∫øt n·ªëi server'
      };
    }
  }

  // üìö L·∫•y l·ªãch s·ª≠ thay ƒë·ªïi c·ªßa m·ªôt entity
  async getEntityHistory(entityId, fromDate = null, toDate = null) {
    try {
      const params = {};
      if (fromDate) params.fromDate = fromDate;
      if (toDate) params.toDate = toDate;

      const response = await api.get(`${this.baseURL}/history/${entityId}`, { params });
      return {
        success: true,
        data: response.data.data,
        message: response.data.message
      };
    } catch (error) {
      console.error('‚ùå L·ªói l·∫•y l·ªãch s·ª≠ entity:', error);
      return {
        success: false,
        error: error.response?.data?.message || 'L·ªói k·∫øt n·ªëi server'
      };
    }
  }

  // ‚è∞ L·∫•y tr·∫°ng th√°i entity t·∫°i th·ªùi ƒëi·ªÉm c·ª• th·ªÉ
  async getAsOfDate(entityId, asOfDate) {
    try {
      const response = await api.get(`${this.baseURL}/as-of/${entityId}`, {
        params: { asOfDate }
      });
      return {
        success: true,
        data: response.data.data,
        message: response.data.message
      };
    } catch (error) {
      console.error('‚ùå L·ªói l·∫•y entity as-of-date:', error);
      return {
        success: false,
        error: error.response?.data?.message || 'L·ªói k·∫øt n·ªëi server'
      };
    }
  }

  // üõ†Ô∏è B·∫≠t temporal table cho m·ªôt b·∫£ng
  async enableTemporalTable(tableName) {
    try {
      const response = await api.post(`${this.baseURL}/enable/${tableName}`);
      return {
        success: true,
        message: response.data.message
      };
    } catch (error) {
      console.error('‚ùå L·ªói b·∫≠t temporal table:', error);
      return {
        success: false,
        error: error.response?.data?.message || 'L·ªói k·∫øt n·ªëi server'
      };
    }
  }

  // üìà T·∫°o columnstore index
  async createColumnstoreIndex(tableName, indexName, columns) {
    try {
      const response = await api.post(`${this.baseURL}/index/${tableName}`, {
        indexName,
        columns
      });
      return {
        success: true,
        message: response.data.message
      };
    } catch (error) {
      console.error('‚ùå L·ªói t·∫°o columnstore index:', error);
      return {
        success: false,
        error: error.response?.data?.message || 'L·ªói k·∫øt n·ªëi server'
      };
    }
  }

  // üìä L·∫•y th·ªëng k√™ temporal table
  async getTemporalStatistics(tableName) {
    try {
      const response = await api.get(`${this.baseURL}/statistics/${tableName}`);
      return {
        success: true,
        data: response.data.data,
        message: response.data.message
      };
    } catch (error) {
      console.error('‚ùå L·ªói l·∫•y th·ªëng k√™ temporal:', error);
      return {
        success: false,
        error: error.response?.data?.message || 'L·ªói k·∫øt n·ªëi server'
      };
    }
  }

  // üîç So s√°nh d·ªØ li·ªáu gi·ªØa hai th·ªùi ƒëi·ªÉm (thay th·∫ø SCD Type 2 comparison)
  async compareTemporalData(date1, date2, filter = null) {
    try {
      const response = await api.post(`${this.baseURL}/compare`, {
        date1,
        date2,
        filter
      });
      return {
        success: true,
        data: response.data.data,
        message: response.data.message
      };
    } catch (error) {
      console.error('‚ùå L·ªói so s√°nh temporal data:', error);
      return {
        success: false,
        error: error.response?.data?.message || 'L·ªói k·∫øt n·ªëi server'
      };
    }
  }

  // üìÖ L·∫•y d·ªØ li·ªáu trong kho·∫£ng th·ªùi gian
  async getDataBetweenDates(fromDate, toDate, options = {}) {
    const queryRequest = {
      fromDate,
      toDate,
      filter: options.filter || null,
      orderBy: options.orderBy || 'ImportDate DESC',
      page: options.page || 1,
      pageSize: options.pageSize || 50
    };

    return await this.queryTemporalData(queryRequest);
  }

  // üìä L·∫•y d·ªØ li·ªáu t·∫°i m·ªôt th·ªùi ƒëi·ªÉm c·ª• th·ªÉ
  async getDataAsOf(asOfDate, options = {}) {
    const queryRequest = {
      asOfDate,
      filter: options.filter || null,
      orderBy: options.orderBy || 'ImportDate DESC',
      page: options.page || 1,
      pageSize: options.pageSize || 50
    };

    return await this.queryTemporalData(queryRequest);
  }

  // üîÑ L·∫•y t·∫•t c·∫£ l·ªãch s·ª≠ thay ƒë·ªïi (thay th·∫ø SCD Type 2 history)
  async getAllHistory(options = {}) {
    const queryRequest = {
      // Kh√¥ng set asOfDate ho·∫∑c fromDate/toDate ƒë·ªÉ l·∫•y t·∫•t c·∫£ history
      filter: options.filter || null,
      orderBy: options.orderBy || 'ValidFrom DESC',
      page: options.page || 1,
      pageSize: options.pageSize || 100
    };

    return await this.queryTemporalData(queryRequest);
  }

  // üìã Utility methods cho frontend components
  
  // Format temporal query request t·ª´ UI filters
  formatQueryRequest(uiFilters) {
    const request = {};
    
    if (uiFilters.asOfDate) {
      request.asOfDate = uiFilters.asOfDate;
    } else if (uiFilters.fromDate || uiFilters.toDate) {
      if (uiFilters.fromDate) request.fromDate = uiFilters.fromDate;
      if (uiFilters.toDate) request.toDate = uiFilters.toDate;
    }

    if (uiFilters.branchCode) {
      request.filter = `BranchCode = '${uiFilters.branchCode}'`;
    }

    if (uiFilters.employeeCode) {
      const filterCondition = `EmployeeCode = '${uiFilters.employeeCode}'`;
      request.filter = request.filter ? 
        `${request.filter} AND ${filterCondition}` : 
        filterCondition;
    }

    if (uiFilters.kpiCode) {
      const filterCondition = `KpiCode = '${uiFilters.kpiCode}'`;
      request.filter = request.filter ? 
        `${request.filter} AND ${filterCondition}` : 
        filterCondition;
    }

    request.page = uiFilters.page || 1;
    request.pageSize = uiFilters.pageSize || 50;
    request.orderBy = uiFilters.sortBy || 'ImportDate DESC';

    return request;
  }

  // Validate temporal query request
  validateQueryRequest(request) {
    const errors = [];

    if (request.asOfDate && (request.fromDate || request.toDate)) {
      errors.push('Kh√¥ng th·ªÉ s·ª≠ d·ª•ng c·∫£ asOfDate v√† fromDate/toDate c√πng l√∫c');
    }

    if (request.page < 1) {
      errors.push('Page ph·∫£i l·ªõn h∆°n 0');
    }

    if (request.pageSize < 1 || request.pageSize > 1000) {
      errors.push('PageSize ph·∫£i trong kho·∫£ng 1-1000');
    }

    return {
      isValid: errors.length === 0,
      errors
    };
  }

  // Format temporal statistics cho UI display
  formatStatisticsForUI(stats) {
    return {
      tableName: stats.tableName,
      currentRecords: stats.currentRecords?.toLocaleString() || '0',
      historyRecords: stats.historyRecords?.toLocaleString() || '0',
      totalRecords: (stats.currentRecords + stats.historyRecords)?.toLocaleString() || '0',
      earliestChange: stats.earliestChange ? 
        new Date(stats.earliestChange).toLocaleDateString('vi-VN') : 
        'N/A',
      latestChange: stats.latestChange ? 
        new Date(stats.latestChange).toLocaleDateString('vi-VN') : 
        'N/A',
      uniqueEntities: stats.uniqueEntities?.toLocaleString() || '0',
      generatedAt: new Date(stats.generatedAt).toLocaleString('vi-VN')
    };
  }
}

export default new TemporalService();
