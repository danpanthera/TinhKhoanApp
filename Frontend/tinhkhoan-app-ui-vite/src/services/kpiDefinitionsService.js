import api from './api'

// Service ƒë·ªÉ l·∫•y danh s√°ch KPI cho dropdown v·ªõi encoding UTF-8 ƒë√∫ng
export const kpiDefinitionsService = {
  // üë• L·∫•y danh s√°ch KPI cho dropdown C√°n b·ªô
  async getKpiDropdownForCanBo() {
    try {
      const response = await api.get('/KPIDefinitions/dropdown/canbo')

      // ƒê·∫£m b·∫£o data ƒë∆∞·ª£c decode UTF-8 ƒë√∫ng c√°ch
      let kpis = []
      if (response.data && Array.isArray(response.data.$values)) {
        kpis = response.data.$values
      } else if (Array.isArray(response.data)) {
        kpis = response.data
      }

      // Format data cho dropdown hi·ªÉn th·ªã m√¥ t·∫£ ti·∫øng Vi·ªát
      return kpis.map(kpi => ({
        id: kpi.id,
        code: kpi.code,
        name: kpi.name, // Hi·ªÉn th·ªã m√¥ t·∫£ ti·∫øng Vi·ªát thay v√¨ code
        description: kpi.description,
        maxScore: kpi.maxScore,
        unitOfMeasure: kpi.unitOfMeasure,
        displayText: `${kpi.name}${kpi.unitOfMeasure ? ` (${kpi.unitOfMeasure})` : ''}`, // Text cho dropdown
      }))
    } catch (error) {
      console.error('L·ªói khi l·∫•y KPI cho c√°n b·ªô:', error)
      throw new Error('Kh√¥ng th·ªÉ t·∫£i danh s√°ch KPI cho c√°n b·ªô')
    }
  },

  // üè¢ L·∫•y danh s√°ch KPI cho dropdown Chi nh√°nh
  async getKpiDropdownForChiNhanh() {
    try {
      const response = await api.get('/KPIDefinitions/dropdown/chinhanh')

      // ƒê·∫£m b·∫£o data ƒë∆∞·ª£c decode UTF-8 ƒë√∫ng c√°ch
      let kpis = []
      if (response.data && Array.isArray(response.data.$values)) {
        kpis = response.data.$values
      } else if (Array.isArray(response.data)) {
        kpis = response.data
      }

      // Format data cho dropdown hi·ªÉn th·ªã m√¥ t·∫£ ti·∫øng Vi·ªát
      return kpis.map(kpi => ({
        id: kpi.id,
        code: kpi.code,
        name: kpi.name, // Hi·ªÉn th·ªã m√¥ t·∫£ ti·∫øng Vi·ªát thay v√¨ code
        description: kpi.description,
        maxScore: kpi.maxScore,
        unitOfMeasure: kpi.unitOfMeasure,
        displayText: `${kpi.name}${kpi.unitOfMeasure ? ` (${kpi.unitOfMeasure})` : ''}`, // Text cho dropdown
      }))
    } catch (error) {
      console.error('L·ªói khi l·∫•y KPI cho chi nh√°nh:', error)
      throw new Error('Kh√¥ng th·ªÉ t·∫£i danh s√°ch KPI cho chi nh√°nh')
    }
  },

  // üìä L·∫•y th·ªëng k√™ KPI
  async getKpiStats() {
    try {
      const response = await api.get('/KPIDefinitions/stats')
      return response.data
    } catch (error) {
      console.error('L·ªói khi l·∫•y th·ªëng k√™ KPI:', error)
      throw new Error('Kh√¥ng th·ªÉ t·∫£i th·ªëng k√™ KPI')
    }
  },

  // üìã L·∫•y t·∫•t c·∫£ KPI (legacy)
  async getAllKpi() {
    try {
      const response = await api.get('/KPIDefinitions')

      let kpis = []
      if (response.data && Array.isArray(response.data.$values)) {
        kpis = response.data.$values
      } else if (Array.isArray(response.data)) {
        kpis = response.data
      }

      return kpis
    } catch (error) {
      console.error('L·ªói khi l·∫•y t·∫•t c·∫£ KPI:', error)
      throw new Error('Kh√¥ng th·ªÉ t·∫£i danh s√°ch KPI')
    }
  },

  // üîç L·∫•y KPI theo ID
  async getKpiById(id) {
    try {
      const response = await api.get(`/KPIDefinitions/${id}`)
      return response.data
    } catch (error) {
      console.error(`L·ªói khi l·∫•y KPI ID ${id}:`, error)
      throw new Error(`Kh√¥ng th·ªÉ t·∫£i KPI ID ${id}`)
    }
  },

  // ‚ûï T·∫°o KPI m·ªõi
  async createKpi(kpiData) {
    try {
      const response = await api.post('/KPIDefinitions', kpiData)
      return response.data
    } catch (error) {
      console.error('L·ªói khi t·∫°o KPI:', error)
      throw new Error('Kh√¥ng th·ªÉ t·∫°o KPI m·ªõi')
    }
  },

  // ‚úèÔ∏è C·∫≠p nh·∫≠t KPI
  async updateKpi(id, kpiData) {
    try {
      const response = await api.put(`/KPIDefinitions/${id}`, kpiData)
      return response.data
    } catch (error) {
      console.error(`L·ªói khi c·∫≠p nh·∫≠t KPI ID ${id}:`, error)
      throw new Error(`Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t KPI ID ${id}`)
    }
  },

  // üóëÔ∏è X√≥a KPI
  async deleteKpi(id) {
    try {
      await api.delete(`/KPIDefinitions/${id}`)
      return { success: true }
    } catch (error) {
      console.error(`L·ªói khi x√≥a KPI ID ${id}:`, error)
      throw new Error(`Kh√¥ng th·ªÉ x√≥a KPI ID ${id}`)
    }
  },
}

export default kpiDefinitionsService
