import api from './api';

export const kpiAssignmentService = {
  // Get all KPI assignment tables
  async getTables() {
    console.log('üîÑ kpiAssignmentService.getTables() started');
    console.log('üì° Calling API: /KpiAssignmentTables');
    console.log('üì° Base URL:', import.meta.env.VITE_API_BASE_URL);

    const response = await api.get('/KpiAssignmentTables'); // Use raw SQL endpoint
    console.log('üì® KPI Tables API Response received:', response.status, response.data);

    let tablesData = [];
    if (response.data && Array.isArray(response.data.$values)) {
      console.log('‚úÖ Found $values array with length:', response.data.$values.length);
      tablesData = response.data.$values;
    } else if (Array.isArray(response.data)) {
      console.log('‚úÖ Found direct array with length:', response.data.length);
      tablesData = response.data;
    } else {
      console.error('‚ùå Invalid response format:', response.data);
    }

    console.log('üìä Final tablesData length:', tablesData.length);


    console.log('üìä Final tablesData length:', tablesData.length);

    // Enhanced categorization logic for better table classification
    const processedTables = tablesData.map(table => {
      // Use the category from backend if available, otherwise apply our logic
      if (table.Category || table.category) {
        // Backend provides 'CANBO' or 'CHINHANH' - keep these values unchanged
        table.category = table.Category || table.category;
      } else {
        // Fallback logic if category is not provided by backend
        // Safely check tableType - ensure it's a string
        const tableType = table.tableType || '';
        const tableTypeLC = typeof tableType === 'string' ? tableType.toLowerCase() : '';

        // Employee tables - using a more comprehensive list of keywords
        if (
          tableTypeLC.includes('role') ||
          tableTypeLC.includes('employee') ||
          tableTypeLC.includes('canbo') ||
          tableTypeLC.includes('c√°n b·ªô') ||
          tableTypeLC.includes('nh√¢n vi√™n') ||
          tableTypeLC.includes('nh√¢n s·ª±') ||
          tableTypeLC.includes('tr∆∞·ªüng ph√≤ng') ||
          tableTypeLC.includes('gi√°m ƒë·ªëc') ||
          tableTypeLC.includes('director') ||
          tableTypeLC.includes('staff') ||
          tableTypeLC.includes('manager') ||
          tableTypeLC.startsWith('tp_') || // Tr∆∞·ªüng ph√≤ng
          tableTypeLC.startsWith('nv_') || // Nh√¢n vi√™n
          tableTypeLC.startsWith('cb_') ||   // C√°n b·ªô
          // Add numeric checks for employee tables (0-22 are employee tables based on requirement)
          (typeof table.tableType === 'number' && table.tableType >= 0 && table.tableType <= 22) ||
          (typeof table.tableType === 'string' && /^\d+$/.test(table.tableType) && parseInt(table.tableType) >= 0 && parseInt(table.tableType) <= 22)
        ) {
          table.category = 'CANBO';
        }
        // Branch tables - using a more comprehensive list of keywords
        else if (
          tableTypeLC.includes('cn') ||
          tableTypeLC.includes('branch') ||
          tableTypeLC.includes('chinhanh') ||
          tableTypeLC.includes('chi nh√°nh') ||
          tableTypeLC.includes('ph√≤ng giao d·ªãch') ||
          tableTypeLC.includes('pgd') ||
          tableTypeLC.includes('h·ªôi s·ªü') ||
          tableTypeLC.includes('hoiso') ||
          tableTypeLC.includes('vƒÉn ph√≤ng') ||
          tableTypeLC.includes('vpdd') ||
          tableTypeLC.includes('office') ||
          tableTypeLC.startsWith('hs_') || // H·ªôi s·ªü
          tableTypeLC.startsWith('cn_')    // Chi nh√°nh
        ) {
          table.category = 'CHINHANH';
        }
        // Fallback for other cases
        else {
          // Check for known patterns in table names
          const tableName = table.tableName || '';
          const tableNameLC = typeof tableName === 'string' ? tableName.toLowerCase() : '';

          if (
            tableNameLC.includes('chi nh√°nh') ||
            tableNameLC.includes('ph√≤ng giao d·ªãch') ||
            tableNameLC.includes('h·ªôi s·ªü')
          ) {
            table.category = 'CHINHANH';
          }
          else if (
            tableNameLC.includes('c√°n b·ªô') ||
            tableNameLC.includes('nh√¢n vi√™n') ||
            tableNameLC.includes('tr∆∞·ªüng ph√≤ng') ||
            tableNameLC.includes('gi√°m ƒë·ªëc')
          ) {
            table.category = 'CANBO';
          }
          else {
            // Default category if we can't determine
            table.category = 'Kh√°c';
          }
        }
      }

      // Format the table code for better display in the UI
      if (table.tableType) {
        table.displayCode = String(table.tableType).toUpperCase();
      }

      return table;
    }).sort((a, b) => {
      // Custom sorting for branch names in the specified order (c·∫≠p nh·∫≠t t√™n m·ªõi)
      const branchOrder = [
        'CnLaiChau', 'CnBinhLu', 'CnPhongTho', 'CnSinHo', 'CnBumTo',
        'CnThanUyen', 'CnDoanKet', 'CnTanUyen', 'CnNamHang'
      ];

      const aType = String(a.tableType || '');
      const bType = String(b.tableType || '');

      const aOrder = branchOrder.indexOf(aType);
      const bOrder = branchOrder.indexOf(bType);

      // If both are in the custom order list, sort by that order
      if (aOrder !== -1 && bOrder !== -1) {
        return aOrder - bOrder;
      }
      // If only one is in the custom order list, prioritize it
      if (aOrder !== -1) return -1;
      if (bOrder !== -1) return 1;

      // Default alphabetical sort for everything else
      return aType.localeCompare(bType);
    });

    console.log('‚úÖ Processed KPI tables:', processedTables.length);
    console.log('üè∑Ô∏è Categories found:', [...new Set(processedTables.map(t => t.category))]);

    return processedTables;
  },

  // Get table details with indicators
  async getTableDetails(tableId) {
    console.log('üîÑ getTableDetails called with tableId:', tableId);
    try {
      const response = await api.get(`/KpiAssignment/tables/${tableId}`);
      const tableData = response.data;
      console.log('üì® getTableDetails API response:', tableData);

      // Handle both PascalCase (backend) and camelCase (frontend) indicators
      const indicators = tableData.Indicators || tableData.indicators;
      console.log('üìä Raw indicators from API:', indicators);

      if (indicators) {
        let indicatorsData = [];

        if (Array.isArray(indicators.$values)) {
          console.log('‚úÖ Using indicators.$values, length:', indicators.$values.length);
          indicatorsData = indicators.$values;
        } else if (Array.isArray(indicators)) {
          console.log('‚úÖ Using direct indicators array, length:', indicators.length);
          indicatorsData = indicators;
        } else {
          console.log('‚ö†Ô∏è indicators is not an array:', typeof indicators, indicators);
          indicatorsData = [];
        }

        // Sort by OrderIndex (PascalCase) or orderIndex (camelCase)
        tableData.indicators = indicatorsData.sort((a, b) => (a.OrderIndex || a.orderIndex || 0) - (b.OrderIndex || b.orderIndex || 0));
        console.log('üìä Final processed indicators count:', tableData.indicators.length);
        console.log('üìä First 2 indicators:', tableData.indicators.slice(0, 2));
      } else {
        console.log('‚ùå No indicators found in response');
        tableData.indicators = [];
      }

      return tableData;
    } catch (error) {
      console.error('‚ùå getTableDetails error:', error);
      throw error;
    }
  },

  // Assign KPI to employee
  async assignKPI(assignmentData) {
    const response = await api.post('/KpiAssignment/assign', assignmentData);
    return response.data;
  },

  // Get employee KPI assignments for a period
  async getEmployeeAssignments(employeeId, periodId) {
    const response = await api.get(`/KpiAssignment/employee/${employeeId}/period/${periodId}`);

    let assignmentsData = [];
    if (response.data && Array.isArray(response.data.$values)) {
      assignmentsData = response.data.$values;
    } else if (Array.isArray(response.data)) {
      assignmentsData = response.data;
    }

    return assignmentsData;
  },

  // Update actual values
  async updateActualValues(updates) {
    const response = await api.put('/KpiAssignment/update-single-actual', updates);
    return response.data;
  },

  // CRUD operations for KPI Indicators
  async createIndicator(indicatorData) {
    const response = await api.post('/KpiAssignment/indicators', indicatorData);
    return response.data;
  },

  async updateIndicator(indicatorId, indicatorData) {
    const response = await api.put(`/KpiAssignment/indicators/${indicatorId}`, indicatorData);
    return response.data;
  },

  async deleteIndicator(indicatorId) {
    const response = await api.delete(`/KpiAssignment/indicators/${indicatorId}`);
    return response.data;
  },

  async reorderIndicator(indicatorId, newOrderIndex) {
    const response = await api.put(`/KpiAssignment/indicators/${indicatorId}/reorder`, {
      newOrderIndex
    });
    return response.data;
  }
};

export default kpiAssignmentService;
