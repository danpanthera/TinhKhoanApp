/**
 * Branch Indicators Service
 * Service ƒë·ªÉ t√≠nh to√°n 6 ch·ªâ ti√™u ch√≠nh theo chi nh√°nh
 */

// API Base URL v·ªõi fallback cho dev environment
const API_BASE_URL = import.meta.env.VITE_API_BASE_URL || '/api'
const DIRECT_API_URL = 'http://localhost:5055/api' // Fallback tr·ª±c ti·∫øp cho dev

export const branchIndicatorsService = {

  /**
   * T√≠nh to√°n Ngu·ªìn v·ªën theo chi nh√°nh t·ª´ d·ªØ li·ªáu th√¥ DP01
   */
  async calculateNguonVon(branchId, date = null) {
    try {
      // Chuy·ªÉn ƒë·ªïi date th√†nh ƒë·ªãnh d·∫°ng ph√π h·ª£p cho API m·ªõi
      let targetDate = new Date();
      if (date && date.trim() !== '') {
        const parsedDate = new Date(date);
        if (!isNaN(parsedDate.getTime())) {
          targetDate = parsedDate;
        }
      }

      console.log('üåê API Call - branchId:', branchId, 'date:', targetDate.toISOString());

      const requestBody = {
        unitCode: branchId,
        targetDate: targetDate.toISOString(),
        dateType: "month" // M·∫∑c ƒë·ªãnh t√≠nh theo th√°ng
      };

      console.log('üìã Request body:', requestBody);

      // Th·ª≠ proxy tr∆∞·ªõc, n·∫øu l·ªói th√¨ th·ª≠ direct URL
      let apiUrl = `${API_BASE_URL}/NguonVon/calculate`;
      console.log('üîó Trying proxy API URL:', apiUrl);

      let response = await fetch(apiUrl, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(requestBody)
      }).catch(async (proxyError) => {
        console.warn('‚ö†Ô∏è Proxy failed, trying direct URL:', proxyError.message);
        apiUrl = `${DIRECT_API_URL}/NguonVon/calculate`;
        console.log('üîó Trying direct API URL:', apiUrl);

        return fetch(apiUrl, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify(requestBody)
        });
      });

      console.log('üì° Response status:', response.status, response.statusText);

      if (!response.ok) {
        console.error('‚ùå API Error:', response.status, response.statusText);
        throw new Error(`HTTP error! status: ${response.status}`)
      }

      const result = await response.json()
      console.log('üì• API Response:', result);

      // Chuy·ªÉn ƒë·ªïi ƒë·ªãnh d·∫°ng response ƒë·ªÉ t∆∞∆°ng th√≠ch v·ªõi frontend hi·ªán t·∫°i
      if (result.success && result.data) {
        return {
          total: result.data.totalBalance,
          unitName: result.data.unitName,
          recordCount: result.data.recordCount,
          topAccounts: result.data.topAccounts,
          message: result.message
        }
      } else {
        throw new Error(result.message || 'Kh√¥ng th·ªÉ t√≠nh to√°n ngu·ªìn v·ªën')
      }
    } catch (error) {
      console.error('‚ùå L·ªói t√≠nh Ngu·ªìn v·ªën:', error)
      throw error
    }
  },

  /**
   * T√≠nh to√°n D∆∞ n·ª£ theo chi nh√°nh
   */
  async calculateDuNo(branchId, date = null) {
    try {
      // Validate v√† x·ª≠ l√Ω tham s·ªë date
      let validDate = null;
      if (date && date.trim() !== '') {
        validDate = date;
      }

      console.log('üåê API Call - branchId:', branchId, 'date:', validDate);

      // Ch·ªâ g·ª≠i thu·ªôc t√≠nh date khi c√≥ gi√° tr·ªã h·ª£p l·ªá
      const requestBody = { branchId };
      if (validDate) {
        requestBody.date = validDate;
      }

      console.log('üìã Request body:', requestBody);

      const response = await fetch(`${API_BASE_URL}/BranchIndicators/du-no`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(requestBody)
      })

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`)
      }

      const result = await response.json()
      return result
    } catch (error) {
      console.error('‚ùå L·ªói t√≠nh D∆∞ n·ª£:', error)
      throw error
    }
  },

  /**
   * T√≠nh to√°n N·ª£ x·∫•u theo chi nh√°nh
   */
  async calculateNoXau(branchId, date = null) {
    try {
      // Validate v√† x·ª≠ l√Ω tham s·ªë date
      let validDate = null;
      if (date && date.trim() !== '') {
        validDate = date;
      }

      console.log('üåê API Call - branchId:', branchId, 'date:', validDate);

      // Ch·ªâ g·ª≠i thu·ªôc t√≠nh date khi c√≥ gi√° tr·ªã h·ª£p l·ªá
      const requestBody = { branchId };
      if (validDate) {
        requestBody.date = validDate;
      }

      console.log('üìã Request body:', requestBody);

      const response = await fetch(`${API_BASE_URL}/BranchIndicators/no-xau`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(requestBody)
      })

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`)
      }

      const result = await response.json()
      return result
    } catch (error) {
      console.error('‚ùå L·ªói t√≠nh N·ª£ x·∫•u:', error)
      throw error
    }
  },

  /**
   * T√≠nh to√°n Thu h·ªìi XLRR theo chi nh√°nh
   */
  async calculateThuHoiXLRR(branchId, date = null) {
    try {
      // Validate v√† x·ª≠ l√Ω tham s·ªë date
      let validDate = null;
      if (date && date.trim() !== '') {
        validDate = date;
      }

      console.log('üåê API Call - branchId:', branchId, 'date:', validDate);

      // Ch·ªâ g·ª≠i thu·ªôc t√≠nh date khi c√≥ gi√° tr·ªã h·ª£p l·ªá
      const requestBody = { branchId };
      if (validDate) {
        requestBody.date = validDate;
      }

      console.log('üìã Request body:', requestBody);

      const response = await fetch(`${API_BASE_URL}/BranchIndicators/thu-hoi-xlrr`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(requestBody)
      })

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`)
      }

      const result = await response.json()
      return result
    } catch (error) {
      console.error('‚ùå L·ªói t√≠nh Thu h·ªìi XLRR:', error)
      throw error
    }
  },

  /**
   * T√≠nh to√°n Thu d·ªãch v·ª• theo chi nh√°nh
   */
  async calculateThuDichVu(branchId, date = null) {
    try {
      // Validate v√† x·ª≠ l√Ω tham s·ªë date
      let validDate = null;
      if (date && date.trim() !== '') {
        validDate = date;
      }

      console.log('üåê API Call - branchId:', branchId, 'date:', validDate);

      // Ch·ªâ g·ª≠i thu·ªôc t√≠nh date khi c√≥ gi√° tr·ªã h·ª£p l·ªá
      const requestBody = { branchId };
      if (validDate) {
        requestBody.date = validDate;
      }

      console.log('üìã Request body:', requestBody);

      const response = await fetch(`${API_BASE_URL}/BranchIndicators/thu-dich-vu`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(requestBody)
      })

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`)
      }

      const result = await response.json()
      return result
    } catch (error) {
      console.error('‚ùå L·ªói t√≠nh Thu d·ªãch v·ª•:', error)
      throw error
    }
  },

  /**
   * T√≠nh to√°n L·ª£i nhu·∫≠n theo chi nh√°nh
   */
  async calculateLoiNhuan(branchId, date = null) {
    try {
      // Validate v√† x·ª≠ l√Ω tham s·ªë date
      let validDate = null;
      if (date && date.trim() !== '') {
        validDate = date;
      }

      console.log('üåê API Call - branchId:', branchId, 'date:', validDate);

      // Ch·ªâ g·ª≠i thu·ªôc t√≠nh date khi c√≥ gi√° tr·ªã h·ª£p l·ªá
      const requestBody = { branchId };
      if (validDate) {
        requestBody.date = validDate;
      }

      console.log('üìã Request body:', requestBody);

      const response = await fetch(`${API_BASE_URL}/BranchIndicators/loi-nhuan`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(requestBody)
      })

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`)
      }

      const result = await response.json()
      return result
    } catch (error) {
      console.error('‚ùå L·ªói t√≠nh L·ª£i nhu·∫≠n:', error)
      throw error
    }
  },

  /**
   * T√≠nh to√°n t·∫•t c·∫£ 6 ch·ªâ ti√™u c√πng l√∫c
   */
  async calculateAllIndicators(branchId, date = null) {
    try {
      // Validate v√† x·ª≠ l√Ω tham s·ªë date
      let validDate = null;
      if (date && date.trim() !== '') {
        validDate = date;
      }

      console.log(`üßÆ T√≠nh to√°n t·∫•t c·∫£ ch·ªâ ti√™u cho chi nh√°nh: ${branchId}, date: ${validDate}`);

      // Ch·ªâ g·ª≠i thu·ªôc t√≠nh date khi c√≥ gi√° tr·ªã h·ª£p l·ªá
      const requestBody = { branchId };
      if (validDate) {
        requestBody.date = validDate;
      }

      console.log('üìã Request body:', requestBody);

      const response = await fetch(`${API_BASE_URL}/BranchIndicators/all-indicators`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(requestBody)
      })

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`)
      }

      const result = await response.json()
      console.log(`‚úÖ K·∫øt qu·∫£ t√≠nh to√°n cho ${branchId}:`, result)
      return result
    } catch (error) {
      console.error('‚ùå L·ªói t√≠nh t·∫•t c·∫£ ch·ªâ ti√™u:', error)
      throw error
    }
  },

  /**
   * Format s·ªë ti·ªÅn
   */
  formatCurrency(value) {
    if (value === null || value === undefined) return '0'
    return new Intl.NumberFormat('vi-VN').format(value)
  },

  /**
   * Format ph·∫ßn trƒÉm
   */
  formatPercentage(value) {
    if (value === null || value === undefined) return '0%'
    return `${value.toFixed(2)}%`
  }
}

export default branchIndicatorsService
