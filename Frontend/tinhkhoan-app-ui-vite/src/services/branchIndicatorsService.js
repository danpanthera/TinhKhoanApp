/**
 * Branch Indicators Service
 * Service ƒë·ªÉ t√≠nh to√°n 6 ch·ªâ ti√™u ch√≠nh theo chi nh√°nh
 */

const API_BASE_URL = import.meta.env.VITE_API_BASE_URL || 'http://localhost:5055/api'

export const branchIndicatorsService = {

  /**
   * T√≠nh to√°n Ngu·ªìn v·ªën theo chi nh√°nh
   */
  async calculateNguonVon(branchId, date = null) {
    try {
      // Validate v√† x·ª≠ l√Ω tham s·ªë date
      let validDate = null;
      if (date && date.trim() !== '') {
        validDate = date;
      }

      console.log('üåê API Call - branchId:', branchId, 'date:', validDate);

      // Ch·ªâ g·ª≠i thu·ªôc t√≠nh date khi c√≥ gi√° tr·ªã h·ª£p l·ªá
      const requestBody = { branchId };
      if (validDate) {
        requestBody.date = validDate;
      }

      console.log('üìã Request body:', requestBody);

      const response = await fetch(`${API_BASE_URL}/BranchIndicators/nguon-von`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(requestBody)
      })

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`)
      }

      const result = await response.json()
      return result
    } catch (error) {
      console.error('‚ùå L·ªói t√≠nh Ngu·ªìn v·ªën:', error)
      throw error
    }
  },

  /**
   * T√≠nh to√°n D∆∞ n·ª£ theo chi nh√°nh
   */
  async calculateDuNo(branchId, date = null) {
    try {
      // Validate v√† x·ª≠ l√Ω tham s·ªë date
      let validDate = null;
      if (date && date.trim() !== '') {
        validDate = date;
      }

      console.log('üåê API Call - branchId:', branchId, 'date:', validDate);

      // Ch·ªâ g·ª≠i thu·ªôc t√≠nh date khi c√≥ gi√° tr·ªã h·ª£p l·ªá
      const requestBody = { branchId };
      if (validDate) {
        requestBody.date = validDate;
      }

      console.log('üìã Request body:', requestBody);

      const response = await fetch(`${API_BASE_URL}/BranchIndicators/du-no`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(requestBody)
      })

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`)
      }

      const result = await response.json()
      return result
    } catch (error) {
      console.error('‚ùå L·ªói t√≠nh D∆∞ n·ª£:', error)
      throw error
    }
  },

  /**
   * T√≠nh to√°n N·ª£ x·∫•u theo chi nh√°nh
   */
  async calculateNoXau(branchId, date = null) {
    try {
      // Validate v√† x·ª≠ l√Ω tham s·ªë date
      let validDate = null;
      if (date && date.trim() !== '') {
        validDate = date;
      }

      console.log('üåê API Call - branchId:', branchId, 'date:', validDate);

      // Ch·ªâ g·ª≠i thu·ªôc t√≠nh date khi c√≥ gi√° tr·ªã h·ª£p l·ªá
      const requestBody = { branchId };
      if (validDate) {
        requestBody.date = validDate;
      }

      console.log('üìã Request body:', requestBody);

      const response = await fetch(`${API_BASE_URL}/BranchIndicators/no-xau`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(requestBody)
      })

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`)
      }

      const result = await response.json()
      return result
    } catch (error) {
      console.error('‚ùå L·ªói t√≠nh N·ª£ x·∫•u:', error)
      throw error
    }
  },

  /**
   * T√≠nh to√°n Thu h·ªìi XLRR theo chi nh√°nh
   */
  async calculateThuHoiXLRR(branchId, date = null) {
    try {
      // Validate v√† x·ª≠ l√Ω tham s·ªë date
      let validDate = null;
      if (date && date.trim() !== '') {
        validDate = date;
      }

      console.log('üåê API Call - branchId:', branchId, 'date:', validDate);

      // Ch·ªâ g·ª≠i thu·ªôc t√≠nh date khi c√≥ gi√° tr·ªã h·ª£p l·ªá
      const requestBody = { branchId };
      if (validDate) {
        requestBody.date = validDate;
      }

      console.log('üìã Request body:', requestBody);

      const response = await fetch(`${API_BASE_URL}/BranchIndicators/thu-hoi-xlrr`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(requestBody)
      })

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`)
      }

      const result = await response.json()
      return result
    } catch (error) {
      console.error('‚ùå L·ªói t√≠nh Thu h·ªìi XLRR:', error)
      throw error
    }
  },

  /**
   * T√≠nh to√°n Thu d·ªãch v·ª• theo chi nh√°nh
   */
  async calculateThuDichVu(branchId, date = null) {
    try {
      // Validate v√† x·ª≠ l√Ω tham s·ªë date
      let validDate = null;
      if (date && date.trim() !== '') {
        validDate = date;
      }

      console.log('üåê API Call - branchId:', branchId, 'date:', validDate);

      // Ch·ªâ g·ª≠i thu·ªôc t√≠nh date khi c√≥ gi√° tr·ªã h·ª£p l·ªá
      const requestBody = { branchId };
      if (validDate) {
        requestBody.date = validDate;
      }

      console.log('üìã Request body:', requestBody);

      const response = await fetch(`${API_BASE_URL}/BranchIndicators/thu-dich-vu`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(requestBody)
      })

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`)
      }

      const result = await response.json()
      return result
    } catch (error) {
      console.error('‚ùå L·ªói t√≠nh Thu d·ªãch v·ª•:', error)
      throw error
    }
  },

  /**
   * T√≠nh to√°n L·ª£i nhu·∫≠n theo chi nh√°nh
   */
  async calculateLoiNhuan(branchId, date = null) {
    try {
      // Validate v√† x·ª≠ l√Ω tham s·ªë date
      let validDate = null;
      if (date && date.trim() !== '') {
        validDate = date;
      }

      console.log('üåê API Call - branchId:', branchId, 'date:', validDate);

      // Ch·ªâ g·ª≠i thu·ªôc t√≠nh date khi c√≥ gi√° tr·ªã h·ª£p l·ªá
      const requestBody = { branchId };
      if (validDate) {
        requestBody.date = validDate;
      }

      console.log('üìã Request body:', requestBody);

      const response = await fetch(`${API_BASE_URL}/BranchIndicators/loi-nhuan`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(requestBody)
      })

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`)
      }

      const result = await response.json()
      return result
    } catch (error) {
      console.error('‚ùå L·ªói t√≠nh L·ª£i nhu·∫≠n:', error)
      throw error
    }
  },

  /**
   * T√≠nh to√°n t·∫•t c·∫£ 6 ch·ªâ ti√™u c√πng l√∫c
   */
  async calculateAllIndicators(branchId, date = null) {
    try {
      // Validate v√† x·ª≠ l√Ω tham s·ªë date
      let validDate = null;
      if (date && date.trim() !== '') {
        validDate = date;
      }

      console.log(`üßÆ T√≠nh to√°n t·∫•t c·∫£ ch·ªâ ti√™u cho chi nh√°nh: ${branchId}, date: ${validDate}`);

      // Ch·ªâ g·ª≠i thu·ªôc t√≠nh date khi c√≥ gi√° tr·ªã h·ª£p l·ªá
      const requestBody = { branchId };
      if (validDate) {
        requestBody.date = validDate;
      }

      console.log('üìã Request body:', requestBody);

      const response = await fetch(`${API_BASE_URL}/BranchIndicators/all-indicators`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(requestBody)
      })

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`)
      }

      const result = await response.json()
      console.log(`‚úÖ K·∫øt qu·∫£ t√≠nh to√°n cho ${branchId}:`, result)
      return result
    } catch (error) {
      console.error('‚ùå L·ªói t√≠nh t·∫•t c·∫£ ch·ªâ ti√™u:', error)
      throw error
    }
  },

  /**
   * Format s·ªë ti·ªÅn
   */
  formatCurrency(value) {
    if (value === null || value === undefined) return '0'
    return new Intl.NumberFormat('vi-VN').format(value)
  },

  /**
   * Format ph·∫ßn trƒÉm
   */
  formatPercentage(value) {
    if (value === null || value === undefined) return '0%'
    return `${value.toFixed(2)}%`
  }
}

export default branchIndicatorsService
