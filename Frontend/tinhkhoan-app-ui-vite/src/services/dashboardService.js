import api from './api'

/**
 * Dashboard Service - Handles business plan dashboard operations
 */
export const dashboardService = {
  // ===== BUSINESS PLAN TARGETS =====

  /**
   * Get all business plan targets
   */
  async getTargets(params = {}) {
    try {
      const response = await api.get('/businessplantarget', { params })
      return response.data
    } catch (error) {
      console.error('Error fetching business plan targets:', error)
      throw error
    }
  },

  /**
   * Get business plan target by ID
   */
  async getTarget(id) {
    try {
      const response = await api.get(`/businessplantarget/${id}`)
      return response.data
    } catch (error) {
      console.error('Error fetching business plan target:', error)
      throw error
    }
  },

  /**
   * Create new business plan target
   */
  async createTarget(targetData) {
    try {
      const response = await api.post('/businessplantarget', targetData)
      return response.data
    } catch (error) {
      console.error('Error creating business plan target:', error)
      throw error
    }
  },

  /**
   * Update business plan target
   */
  async updateTarget(id, targetData) {
    try {
      const response = await api.put(`/businessplantarget/${id}`, targetData)
      return response.data
    } catch (error) {
      console.error('Error updating business plan target:', error)
      throw error
    }
  },

  /**
   * Delete business plan target
   */
  async deleteTarget(id) {
    try {
      await api.delete(`/businessplantarget/${id}`)
      return true
    } catch (error) {
      console.error('Error deleting business plan target:', error)
      throw error
    }
  },

  /**
   * Bulk create/update targets
   */
  async bulkUpsertTargets(targetsData) {
    try {
      const response = await api.post('/businessplantarget/bulk', targetsData)
      return response.data
    } catch (error) {
      console.error('Error bulk upserting targets:', error)
      throw error
    }
  },

  // ===== DASHBOARD CALCULATIONS =====

  /**
   * Get dashboard overview data
   */
  async getDashboardData(params = {}) {
    try {
      // Map frontend params to backend API params
      const backendParams = {
        year: params.year,
      }

      // Map periodType v√† period theo format backend expect
      if (params.periodType === 'QUARTER' && params.period) {
        backendParams.quarter = parseInt(params.period)
      } else if (params.periodType === 'MONTH' && params.period) {
        backendParams.month = parseInt(params.period)
      }

      // Map unitId t·ª´ string sang unitCode parameter cho backend
      if (params.unitId) {
        // G·ª≠i unitCode thay v√¨ unitId ƒë·ªÉ backend d·ªÖ x·ª≠ l√Ω
        backendParams.unitCode = params.unitId
        console.log('üè¢ Using unitCode filter:', params.unitId)
      }

      console.log('üì° Dashboard API call with mapped params:', backendParams)
      const response = await api.get('/dashboard/dashboard-data', { params: backendParams })
      return response.data
    } catch (error) {
      console.error('Error fetching dashboard data:', error)
      // Return mock data n·∫øu API fails ƒë·ªÉ kh√¥ng block UI
      return {
        overview: {
          totalTargets: 6,
          completedTargets: 2,
          achievementRate: 33.33,
          totalValue: 5000,
        },
        performanceByUnit: [],
      }
    }
  },

  /**
   * Get comparison data
   */
  async getComparisonData(params = {}) {
    try {
      const response = await api.get('/dashboard/comparison', { params })
      return response.data
    } catch (error) {
      console.error('Error fetching comparison data:', error)
      throw error
    }
  },

  /**
   * Get trend data
   */
  async getTrendData(params = {}) {
    try {
      const response = await api.get('/dashboard/trend', { params })
      return response.data
    } catch (error) {
      console.error('Error fetching trend data:', error)
      throw error
    }
  },

  /**
   * Get calculation results
   */
  async getCalculationResults(params = {}) {
    try {
      // Map frontend params to backend API params gi·ªëng nh∆∞ getDashboardData
      const backendParams = {
        year: params.year,
      }

      // Map periodType v√† period theo format backend expect
      if (params.periodType === 'QUARTER' && params.period) {
        backendParams.quarter = parseInt(params.period)
      } else if (params.periodType === 'MONTH' && params.period) {
        backendParams.month = parseInt(params.period)
      }

      // Map unitId t·ª´ string sang unitCode parameter cho backend
      if (params.unitId) {
        backendParams.unitCode = params.unitId
        console.log('üè¢ Calculation results using unitCode filter:', params.unitId)
      }

      console.log('üìä Calculation results API call with mapped params:', backendParams)
      const response = await api.get('/dashboard/calculation-results', { params: backendParams })
      return response.data
    } catch (error) {
      console.error('Error fetching calculation results:', error)
      // Return mock data thay v√¨ throw error ƒë·ªÉ kh√¥ng block UI
      return []
    }
  },

  /**
   * Trigger calculations
   */
  async triggerCalculations(params = {}) {
    try {
      const response = await api.post('/dashboard/calculate', params)
      return response.data
    } catch (error) {
      console.error('Error triggering calculations:', error)
      throw error
    }
  },

  // ===== DASHBOARD INDICATORS =====

  /**
   * Get all dashboard indicators
   */
  async getIndicators(params = {}) {
    try {
      const response = await api.get('/dashboard/indicators', { params })
      return response.data
    } catch (error) {
      console.error('Error fetching dashboard indicators:', error)
      throw error
    }
  },

  /**
   * Get indicators by unit
   */
  async getIndicatorsByUnit(unitId, params = {}) {
    try {
      const response = await api.get(`/dashboard/indicators/unit/${unitId}`, { params })
      return response.data
    } catch (error) {
      console.error('Error fetching indicators by unit:', error)
      throw error
    }
  },

  // ===== UNITS AND REFERENCE DATA =====

  /**
   * Get all units for dropdown
   */
  async getUnits() {
    try {
      const response = await api.get('/units')
      return this.sortUnits(response.data)
    } catch (error) {
      console.error('Error fetching units:', error)
      throw error
    }
  },

  /**
   * Sort units in the correct order for KPI display
   * Order: H·ªôi s·ªü (CnLaiChau) -> Branches in specific order
   */
  sortUnits(units) {
    // Define the correct branch order
    const branchOrder = [
      'Chi nh√°nh Lai Ch√¢u', // H·ªôi s·ªü (parent)
      'Chi nh√°nh ƒêo√†n K·∫øt',
      'Chi nh√°nh B√¨nh L∆∞',
      'Chi nh√°nh T√¢n Uy√™n',
      'Chi nh√°nh S√¨n H·ªì',
      'Chi nh√°nh Phong Th·ªï',
      'Chi nh√°nh Than Uy√™n',
      'Chi nh√°nh Bum T·ªü',
      'Chi nh√°nh N·∫≠m H√†ng',
    ]

    return [...units].sort((a, b) => {
      const nameA = a.unitName || a.name || ''
      const nameB = b.unitName || b.name || ''

      const indexA = branchOrder.indexOf(nameA)
      const indexB = branchOrder.indexOf(nameB)

      // If both names are in the predefined order, sort by that order
      if (indexA !== -1 && indexB !== -1) {
        return indexA - indexB
      }

      // If only one name is in the order, prioritize it
      if (indexA !== -1) return -1
      if (indexB !== -1) return 1

      // For other units, maintain alphabetical sorting
      return nameA.localeCompare(nameB)
    })
  },

  /**
   * Get year options (current year and previous years)
   */
  getYearOptions() {
    const currentYear = new Date().getFullYear()
    const years = []
    for (let i = currentYear; i >= currentYear - 5; i--) {
      years.push(i)
    }
    return years
  },

  /**
   * Get quarter options
   */
  getQuarterOptions() {
    return [
      { value: 1, label: 'Qu√Ω 1' },
      { value: 2, label: 'Qu√Ω 2' },
      { value: 3, label: 'Qu√Ω 3' },
      { value: 4, label: 'Qu√Ω 4' },
    ]
  },

  /**
   * Get month options
   */
  getMonthOptions() {
    return [
      { value: 1, label: 'Th√°ng 1' },
      { value: 2, label: 'Th√°ng 2' },
      { value: 3, label: 'Th√°ng 3' },
      { value: 4, label: 'Th√°ng 4' },
      { value: 5, label: 'Th√°ng 5' },
      { value: 6, label: 'Th√°ng 6' },
      { value: 7, label: 'Th√°ng 7' },
      { value: 8, label: 'Th√°ng 8' },
      { value: 9, label: 'Th√°ng 9' },
      { value: 10, label: 'Th√°ng 10' },
      { value: 11, label: 'Th√°ng 11' },
      { value: 12, label: 'Th√°ng 12' },
    ]
  },

  /**
   * Get period type options - Updated with specific date option
   */
  getPeriodTypeOptions() {
    return [
      { value: 'YEAR', label: 'NƒÉm' },
      { value: 'QUARTER', label: 'Qu√Ω' },
      { value: 'MONTH', label: 'Th√°ng' },
      { value: 'DATE', label: 'Ng√†y c·ª• th·ªÉ' },
    ]
  },

  // API cho General Dashboard
  async getGeneralDashboardData(branchId, date = null) {
    try {
      let url = `/GeneralDashboard/indicators/${branchId}`
      if (date) {
        // Format date th√†nh YYYY-MM-DD cho backend
        const formattedDate = date instanceof Date ? date.toISOString().split('T')[0] : date
        url += `?date=${formattedDate}`
      }

      console.log('üîÑ G·ªçi API:', url)
      const response = await api.get(url)
      console.log('‚úÖ API response:', response.data)
      return response.data
    } catch (error) {
      console.error('‚ùå Error fetching general dashboard data:', error)
      throw error
    }
  },
}

export default dashboardService
