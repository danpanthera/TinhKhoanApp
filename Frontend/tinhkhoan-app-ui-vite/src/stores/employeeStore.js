import { defineStore } from "pinia";
import apiClient from "../services/api.js";
import { getId, normalizeArray, safeGet } from "../utils/casingSafeAccess.js";

export const useEmployeeStore = defineStore("employee", {
  state: () => ({
    employees: [],
    isLoading: false,
    error: null,
  }),
  getters: {
    allEmployees: (state) => state.employees,
    employeeCount: (state) => state.employees.length,
    // Safe getters using utility functions
    activeEmployees: (state) => state.employees.filter(emp => safeGet(emp, 'IsActive') === true),
    employeesByUnit: (state) => (unitId) => state.employees.filter(emp => getId(emp) === unitId),
  },
  actions: {
    async fetchEmployees() {
      console.log('üîç Starting fetchEmployees...');
      this.isLoading = true;
      this.error = null;
      try {
        const response = await apiClient.get("/Employees");
        console.log('üì° API Response:', response.data);
        let employeesData = [];

        // X·ª≠ l√Ω ƒë·ªãnh d·∫°ng d·ªØ li·ªáu t·ª´ API
        if (response.data && Array.isArray(response.data.$values)) {
          employeesData = response.data.$values;
          console.log('üìã Using $values format, count:', employeesData.length);
        } else if (Array.isArray(response.data)) {
          employeesData = response.data;
          console.log('üìã Using direct array format, count:', employeesData.length);
        } else if (response.data && typeof response.data === 'object') {
          if (response.data.$id && getId(response.data)) {
            employeesData = [response.data];
            console.log('üìã Using single object with $id');
          } else if (Object.keys(response.data).length > 0) {
            employeesData = [response.data];
            console.log('üìã Using single object');
          }
        }

        console.log('üìä Final employeesData count:', employeesData.length);

        if (employeesData.length === 0) {
          this.error = "D·ªØ li·ªáu nh√¢n vi√™n nh·∫≠n ƒë∆∞·ª£c kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng.";
          console.error('‚ùå No employee data to process!');
          return;
        }

        // Normalize array ƒë·ªÉ ƒë·∫£m b·∫£o PascalCase properties
        this.employees = normalizeArray(employeesData);
        console.log('‚úÖ Employees normalized and stored:', this.employees.length);
      } catch (err) {
        this.employees = [];
        this.error = "Kh√¥ng th·ªÉ t·∫£i danh s√°ch nh√¢n vi√™n. L·ªói: " + (err.response?.data?.message || err.message);
        console.error("L·ªói khi fetchEmployees:", err);
      } finally {
        this.isLoading = false;
      }
    },

    async createEmployee(employeeData) {
      this.isLoading = true;
      this.error = null;
      try {
        // G·ª≠i request t·∫°o nh√¢n vi√™n m·ªõi
        const response = await apiClient.post("/Employees", employeeData);

        if (!response.data || !response.data.Id) {
          throw new Error("API tr·∫£ v·ªÅ d·ªØ li·ªáu kh√¥ng h·ª£p l·ªá");
        }

        // T·∫£i l·∫°i danh s√°ch v√† ki·ªÉm tra nh√¢n vi√™n m·ªõi
        await this.fetchEmployees();

        // Ki·ªÉm tra xem nh√¢n vi√™n m·ªõi c√≥ trong danh s√°ch kh√¥ng
        const newEmployee = this.employees.find(e => e.Id === response.data.Id);
        if (!newEmployee) {
          console.error("Kh√¥ng t√¨m th·∫•y nh√¢n vi√™n m·ªõi trong danh s√°ch sau khi t·∫£i l·∫°i");
        }

        return response.data;
      } catch (err) {
        const errorMessage = err.response?.data?.message ||
                           err.response?.data?.title ||
                           (err.response?.data?.errors ? JSON.stringify(err.response.data.errors) : err.message);

        this.error = "Kh√¥ng th·ªÉ t·∫°o nh√¢n vi√™n. L·ªói: " + errorMessage;
        console.error("L·ªói khi createEmployee:", err);
        throw err;
      } finally {
        this.isLoading = false;
      }
    },

    async updateEmployee(employeeData) {
      this.isLoading = true;
      this.error = null;
      try {
        // Make sure we include passwordHash if it exists on the current employee
        const currentEmployee = await this.fetchEmployeeDetail(employeeData.Id).catch(() => null);

        // If we can't get the current employee, proceed with the update as is
        // If we have the current employee and it has a passwordHash, include it
        const dataToSend = {
          ...employeeData,
          passwordHash: currentEmployee?.passwordHash || employeeData.passwordHash
        };

        // Get employee ID - try both cases for compatibility
        const employeeId = employeeData.Id || employeeData.id;
        
        if (!employeeId) {
          throw new Error("Employee ID is required for update");
        }

        // G·ª≠i request c·∫≠p nh·∫≠t nh√¢n vi√™n
        console.log("üîç Updating employee with ID:", employeeId);
        const response = await apiClient.put(`/Employees/${employeeId}`, dataToSend);
        await this.fetchEmployees();
      } catch (err) {
        const errorMessage = err.response?.data?.message ||
                           err.response?.data?.title ||
                           (err.response?.data?.errors ? JSON.stringify(err.response.data.errors) : err.message);

        this.error = "Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t nh√¢n vi√™n. L·ªói: " + errorMessage;
        console.error("L·ªói khi updateEmployee:", err);
        throw err;
      } finally {
        this.isLoading = false;
      }
    },

    async deleteEmployee(employeeId) {
      this.isLoading = true;
      this.error = null;
      try {
        await apiClient.delete(`/Employees/${employeeId}`);
        this.employees = this.employees.filter(e => e.Id !== employeeId);
      } catch (err) {
        const errorMessage = err.response?.data?.message ||
                           err.response?.data?.title ||
                           err.message;

        this.error = "Kh√¥ng th·ªÉ x√≥a nh√¢n vi√™n. L·ªói: " + errorMessage;
        console.error("L·ªói khi deleteEmployee:", err);
        throw err;
      } finally {
        this.isLoading = false;
      }
    },

    // X√≥a nhi·ªÅu nh√¢n vi√™n c√πng l√∫c
    async deleteMultipleEmployees(employeeIds) {
      this.isLoading = true;
      this.error = null;
      try {
        const response = await apiClient.delete("/Employees/bulk", {
          data: employeeIds // G·ª≠i array IDs trong body
        });

        // C·∫≠p nh·∫≠t state local b·∫±ng c√°ch lo·∫°i b·ªè c√°c nh√¢n vi√™n ƒë√£ x√≥a
        this.employees = this.employees.filter(e => !employeeIds.includes(e.Id));

        return response.data;
      } catch (err) {
        const errorMessage = err.response?.data?.message ||
                           err.response?.data?.title ||
                           err.message;

        this.error = "Kh√¥ng th·ªÉ x√≥a nh√¢n vi√™n. L·ªói: " + errorMessage;
        console.error("L·ªói khi deleteMultipleEmployees:", err);
        throw err;
      } finally {
        this.isLoading = false;
      }
    },

    async fetchEmployeeDetail(id) {
      this.isLoading = true;
      this.error = null;
      try {
        const response = await apiClient.get(`/Employees/${id}`);
        if (response.data) {
          return response.data;
        } else {
          throw new Error("Kh√¥ng l·∫•y ƒë∆∞·ª£c chi ti·∫øt nh√¢n vi√™n");
        }
      } catch (err) {
        this.error =
          "Kh√¥ng th·ªÉ l·∫•y chi ti·∫øt nh√¢n vi√™n. L·ªói: " +
          (err.response?.data?.message ||
            err.response?.data?.title ||
            (err.response?.data?.errors
              ? JSON.stringify(err.response.data.errors)
              : err.message));
        console.error("L·ªói khi fetchEmployeeDetail:", err);
        throw err;
      } finally {
        this.isLoading = false;
      }
    },
  },
});
