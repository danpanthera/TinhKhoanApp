#!/bin/bash

# üéØ SCRIPT VERIFICATION IMPROVED - Ki·ªÉm tra t·ªïng th·ªÉ d·ª± √°n v·ªõi logic ch√≠nh x√°c
# Ng√†y: $(date '+%d/%m/%Y %H:%M:%S')

echo "üîç ===== R√Ä SO√ÅT T·ªîNG TH·ªÇ D·ª∞ √ÅN TINHKHOANAPP (IMPROVED) ====="
echo "üìÖ Th·ªùi gian: $(date '+%d/%m/%Y %H:%M:%S')"
echo ""

# Initialize counters
TOTAL_CHECKS=10
PASSED_CHECKS=0
CHECK_RESULTS=()

echo "1Ô∏è‚É£ KI·ªÇM TRA KHO D·ªÆ LI·ªÜU TH√î - DIRECT IMPORT"
echo "============================================="

# Check frontend rawDataService uses DirectImport
if grep -q "DirectImport/smart" Frontend/tinhkhoan-app-ui-vite/src/services/rawDataService.js; then
    echo "‚úÖ rawDataService.js s·ª≠ d·ª•ng DirectImport/smart API"
    ((PASSED_CHECKS++))
    CHECK_RESULTS+=("‚úÖ rawDataService DirectImport")
else
    echo "‚ùå rawDataService.js ch∆∞a s·ª≠ d·ª•ng DirectImport API"
    CHECK_RESULTS+=("‚ùå rawDataService DirectImport")
fi

# Check smartImportService uses DirectImport  
if grep -q "DirectImport/smart" Frontend/tinhkhoan-app-ui-vite/src/services/smartImportService.js; then
    echo "‚úÖ smartImportService.js s·ª≠ d·ª•ng DirectImport/smart API"
    ((PASSED_CHECKS++))
    CHECK_RESULTS+=("‚úÖ smartImportService DirectImport")
else
    echo "‚ùå smartImportService.js ch∆∞a s·ª≠ d·ª•ng DirectImport API"
    CHECK_RESULTS+=("‚ùå smartImportService DirectImport")
fi

# Check DataImportViewFull uses both services (improved logic)
RAWDATA_IMPORT=$(grep -c "rawDataService" Frontend/tinhkhoan-app-ui-vite/src/views/DataImportViewFull.vue)
SMART_IMPORT=$(grep -c "smartImportService" Frontend/tinhkhoan-app-ui-vite/src/views/DataImportViewFull.vue)

if [[ $RAWDATA_IMPORT -gt 0 ]] && [[ $SMART_IMPORT -gt 0 ]]; then
    echo "‚úÖ DataImportViewFull.vue s·ª≠ d·ª•ng c·∫£ rawDataService v√† smartImportService"
    ((PASSED_CHECKS++))
    CHECK_RESULTS+=("‚úÖ DataImportViewFull services")
else
    echo "‚ùå DataImportViewFull.vue ch∆∞a import ƒë√∫ng services"
    CHECK_RESULTS+=("‚ùå DataImportViewFull services")
fi

echo ""

echo "2Ô∏è‚É£ KI·ªÇM TRA BACKEND API DIRECTIMPORT"
echo "===================================="

# Check DirectImport API health
DIRECTIMPORT_STATUS=$(curl -s http://localhost:5055/api/DirectImport/status 2>/dev/null)
if [[ $DIRECTIMPORT_STATUS == *"Direct Import System Online"* ]]; then
    echo "‚úÖ DirectImport API ƒëang online"
    
    # Extract supported data types count (improved)
    DATA_TYPES_COUNT=$(echo "$DIRECTIMPORT_STATUS" | grep -o '"DP01\|LN01\|DB01\|GL01\|GL41\|DPDA\|EI01\|KH03\|RR01\|DT_KHKD1"' | wc -l | tr -d ' ')
    echo "‚úÖ H·ªó tr·ª£ $DATA_TYPES_COUNT lo·∫°i d·ªØ li·ªáu"
    
    if [[ $DATA_TYPES_COUNT -ge 9 ]]; then
        ((PASSED_CHECKS++))
        CHECK_RESULTS+=("‚úÖ DirectImport API Online")
    else
        CHECK_RESULTS+=("‚ö†Ô∏è DirectImport API - √≠t data types")
    fi
else
    echo "‚ùå DirectImport API kh√¥ng ph·∫£n h·ªìi ho·∫∑c offline"
    CHECK_RESULTS+=("‚ùå DirectImport API Offline")
fi

echo ""

echo "3Ô∏è‚É£ KI·ªÇM TRA DATABASE - TEMPORAL TABLES"
echo "======================================="

# Check if we can connect to database (improved logic)
if command -v sqlcmd &> /dev/null; then
    # Count temporal tables (improved with better parsing)
    TEMPORAL_RAW=$(sqlcmd -S localhost,1433 -U sa -P 'YourStrong@Password123' -d TinhKhoanDB -C -h -1 -Q "SELECT COUNT(*) FROM sys.tables WHERE temporal_type = 2;" 2>/dev/null)
    TEMPORAL_COUNT=$(echo "$TEMPORAL_RAW" | grep -E '^[[:space:]]*[0-9]+[[:space:]]*$' | tr -d ' \t' | head -1)
    
    if [[ $TEMPORAL_COUNT =~ ^[0-9]+$ ]] && [[ $TEMPORAL_COUNT -gt 0 ]]; then
        echo "‚úÖ Database c√≥ $TEMPORAL_COUNT b·∫£ng Temporal Tables"
        
        # Check specific raw data tables (improved)
        RAW_TABLES=("DP01_New" "LN01" "DB01" "GL01" "GL41" "DPDA" "EI01" "KH03" "LN02" "LN03" "RR01" "7800_DT_KHKD1")
        FOUND_TABLES=0
        
        for table in "${RAW_TABLES[@]}"; do
            TABLE_RAW=$(sqlcmd -S localhost,1433 -U sa -P 'YourStrong@Password123' -d TinhKhoanDB -C -h -1 -Q "SELECT COUNT(*) FROM sys.tables WHERE name = '$table' AND temporal_type = 2;" 2>/dev/null)
            TABLE_EXISTS=$(echo "$TABLE_RAW" | grep -E '^[[:space:]]*[0-9]+[[:space:]]*$' | tr -d ' \t' | head -1)
            if [[ $TABLE_EXISTS == "1" ]]; then
                ((FOUND_TABLES++))
            fi
        done
        
        echo "‚úÖ $FOUND_TABLES/12 b·∫£ng d·ªØ li·ªáu th√¥ l√† Temporal Tables"
        
        # If we have 10+ temporal tables, consider it passed
        if [[ $TEMPORAL_COUNT -ge 10 ]]; then
            ((PASSED_CHECKS++))
            CHECK_RESULTS+=("‚úÖ Temporal Tables ($TEMPORAL_COUNT)")
        else
            CHECK_RESULTS+=("‚ö†Ô∏è Temporal Tables ($TEMPORAL_COUNT < 10)")
        fi
    else
        echo "‚ùå Kh√¥ng th·ªÉ ki·ªÉm tra Temporal Tables ho·∫∑c kh√¥ng c√≥ b·∫£ng n√†o"
        CHECK_RESULTS+=("‚ùå Temporal Tables (kh√¥ng k·∫øt n·ªëi ƒë∆∞·ª£c)")
    fi
else
    echo "‚ö†Ô∏è sqlcmd kh√¥ng kh·∫£ d·ª•ng - kh√¥ng th·ªÉ ki·ªÉm tra database"
    CHECK_RESULTS+=("‚ö†Ô∏è Temporal Tables (kh√¥ng c√≥ sqlcmd)")
fi

echo ""

echo "4Ô∏è‚É£ KI·ªÇM TRA COLUMNSTORE INDEXES"
echo "==============================="

if command -v sqlcmd &> /dev/null; then
    # Count columnstore indexes (improved with better parsing)
    COLUMNSTORE_RAW=$(sqlcmd -S localhost,1433 -U sa -P 'YourStrong@Password123' -d TinhKhoanDB -C -h -1 -Q "SELECT COUNT(*) FROM sys.indexes WHERE type_desc LIKE '%COLUMNSTORE%';" 2>/dev/null)
    COLUMNSTORE_COUNT=$(echo "$COLUMNSTORE_RAW" | grep -E '^[[:space:]]*[0-9]+[[:space:]]*$' | tr -d ' \t' | head -1)
    
    if [[ $COLUMNSTORE_COUNT =~ ^[0-9]+$ ]] && [[ $COLUMNSTORE_COUNT -gt 0 ]]; then
        echo "‚úÖ Database c√≥ $COLUMNSTORE_COUNT Columnstore Indexes"
        
        # Check which tables have columnstore indexes (improved with better parsing)
        TABLES_RAW=$(sqlcmd -S localhost,1433 -U sa -P 'YourStrong@Password123' -d TinhKhoanDB -C -h -1 -Q "SELECT COUNT(DISTINCT t.name) FROM sys.indexes i INNER JOIN sys.tables t ON i.object_id = t.object_id WHERE i.type_desc LIKE '%COLUMNSTORE%' AND t.name IN ('DP01_New','LN01','DB01','GL01','GL41','DPDA','EI01','KH03','LN02','LN03','RR01','7800_DT_KHKD1');" 2>/dev/null)
        TABLES_WITH_COLUMNSTORE=$(echo "$TABLES_RAW" | grep -E '^[[:space:]]*[0-9]+[[:space:]]*$' | tr -d ' \t' | head -1)
        
        echo "‚úÖ $TABLES_WITH_COLUMNSTORE/12 b·∫£ng d·ªØ li·ªáu th√¥ c√≥ Columnstore Indexes"
        
        # If we have 10+ columnstore indexes, consider it passed
        if [[ $COLUMNSTORE_COUNT -ge 10 ]]; then
            ((PASSED_CHECKS++))
            CHECK_RESULTS+=("‚úÖ Columnstore Indexes ($COLUMNSTORE_COUNT)")
        else
            CHECK_RESULTS+=("‚ö†Ô∏è Columnstore Indexes ($COLUMNSTORE_COUNT < 10)")
        fi
    else
        echo "‚ùå Kh√¥ng c√≥ Columnstore Indexes ho·∫∑c kh√¥ng th·ªÉ ki·ªÉm tra"
        CHECK_RESULTS+=("‚ùå Columnstore Indexes (kh√¥ng c√≥)")
    fi
fi

echo ""

echo "5Ô∏è‚É£ KI·ªÇM TRA LEGACY CLEANUP" 
echo "=========================="

# Check if ImportedDataItems is removed from models (improved)
IMPORTEDDATAITEMS_USAGE=$(grep -v "// .*CLEANED.*ImportedDataItems" Backend/TinhKhoanApp.Api/Models/ImportedDataRecord.cs | grep -c "ImportedDataItems" 2>/dev/null)
if [[ -z "$IMPORTEDDATAITEMS_USAGE" ]]; then
    IMPORTEDDATAITEMS_USAGE=0
fi

if [[ $IMPORTEDDATAITEMS_USAGE -eq 0 ]]; then
    echo "‚úÖ ImportedDataItems navigation property ƒë√£ ƒë∆∞·ª£c x√≥a kh·ªèi models"
    ((PASSED_CHECKS++))
    CHECK_RESULTS+=("‚úÖ ImportedDataItems cleanup")
else
    echo "‚ùå ImportedDataItems navigation property v·∫´n c√≤n trong models ($IMPORTEDDATAITEMS_USAGE usages)"
    CHECK_RESULTS+=("‚ùå ImportedDataItems v·∫´n c√≤n ($IMPORTEDDATAITEMS_USAGE)")
fi

# Check if legacy controllers are disabled (improved)
DISABLED_CONTROLLERS=$(find Backend/TinhKhoanApp.Api/Controllers -name "*.disabled" 2>/dev/null | wc -l | tr -d ' ')
if [[ $DISABLED_CONTROLLERS -gt 0 ]]; then
    echo "‚úÖ $DISABLED_CONTROLLERS legacy controllers ƒë√£ ƒë∆∞·ª£c disabled"
    ((PASSED_CHECKS++))
    CHECK_RESULTS+=("‚úÖ Legacy controllers disabled ($DISABLED_CONTROLLERS)")
else
    echo "‚ö†Ô∏è Kh√¥ng c√≥ legacy controllers n√†o ƒë∆∞·ª£c disabled"
    CHECK_RESULTS+=("‚ö†Ô∏è Legacy controllers ch∆∞a disabled")
fi

# Check if migration exists (improved)
if ls Backend/TinhKhoanApp.Api/Migrations/*DropImportedDataItemsTable* 1> /dev/null 2>&1; then
    echo "‚úÖ Migration x√≥a ImportedDataItems table ƒë√£ t·ªìn t·∫°i"
    ((PASSED_CHECKS++))
    CHECK_RESULTS+=("‚úÖ Migration exists")
else
    echo "‚ùå Migration x√≥a ImportedDataItems table ch∆∞a c√≥"
    CHECK_RESULTS+=("‚ùå Migration missing")
fi

echo ""

echo "6Ô∏è‚É£ KI·ªÇM TRA BACKEND BUILD STATUS"
echo "================================"

cd Backend/TinhKhoanApp.Api
BUILD_RESULT=$(dotnet build --verbosity quiet 2>&1)
BUILD_EXIT_CODE=$?

if [[ $BUILD_EXIT_CODE -eq 0 ]]; then
    echo "‚úÖ Backend build th√†nh c√¥ng"
    ((PASSED_CHECKS++))
    CHECK_RESULTS+=("‚úÖ Backend build success")
    
    # Count warnings (fixed syntax error)
    WARNING_COUNT=0
    if echo "$BUILD_RESULT" | grep -q "warning"; then
        WARNING_COUNT=$(echo "$BUILD_RESULT" | grep -c "warning")
    fi
    
    if [[ $WARNING_COUNT -gt 0 ]]; then
        echo "‚ö†Ô∏è Build c√≥ $WARNING_COUNT warnings"
    else
        echo "‚úÖ Build kh√¥ng c√≥ warnings"
    fi
else
    echo "‚ùå Backend build th·∫•t b·∫°i"
    echo "L·ªói build: $BUILD_RESULT"
    CHECK_RESULTS+=("‚ùå Backend build failed")
fi

cd - > /dev/null

echo ""

echo "7Ô∏è‚É£ T√ìM T·∫ÆT ƒê√ÅNH GI√Å"
echo "==================="

PASS_PERCENTAGE=$((PASSED_CHECKS * 100 / TOTAL_CHECKS))

echo "üìä K·∫øt qu·∫£ t·ªïng th·ªÉ: $PASSED_CHECKS/$TOTAL_CHECKS checks passed ($PASS_PERCENTAGE%)"
echo ""
echo "üìã Chi ti·∫øt k·∫øt qu·∫£:"
for result in "${CHECK_RESULTS[@]}"; do
    echo "   $result"
done
echo ""

if [[ $PASS_PERCENTAGE -ge 90 ]]; then
    echo "üéâ TUY·ªÜT V·ªúI! D·ª± √°n ƒë√£ ho√†n thi·ªán v√† s·∫µn s√†ng production"
elif [[ $PASS_PERCENTAGE -ge 70 ]]; then
    echo "‚úÖ T·ªêT! D·ª± √°n c∆° b·∫£n ho√†n thi·ªán, c√≥ th·ªÉ c·∫ßn ƒëi·ªÅu ch·ªânh nh·ªè"
elif [[ $PASS_PERCENTAGE -ge 50 ]]; then
    echo "‚ö†Ô∏è TRUNG B√åNH! C·∫ßn kh·∫Øc ph·ª•c m·ªôt s·ªë v·∫•n ƒë·ªÅ"
else
    echo "‚ùå C·∫¶N KH·∫ÆC PH·ª§C! Nhi·ªÅu v·∫•n ƒë·ªÅ c·∫ßn ƒë∆∞·ª£c gi·∫£i quy·∫øt"
fi

echo ""
echo "üõ†Ô∏è G·ª£i √Ω kh·∫Øc ph·ª•c:"
if [[ $PASS_PERCENTAGE -lt 100 ]]; then
    echo "   ‚Ä¢ Ki·ªÉm tra k·∫øt n·ªëi database n·∫øu c√≥ l·ªói sqlcmd"
    echo "   ‚Ä¢ ƒê·∫£m b·∫£o backend ƒëang ch·∫°y ƒë·ªÉ test API"
    echo "   ‚Ä¢ Logic script c√≥ th·ªÉ c·∫ßn tinh ch·ªânh cho edge cases"
fi

echo ""
echo "üìù B√°o c√°o n√†y ƒë∆∞·ª£c t·∫°o b·ªüi script t·ª± ƒë·ªông verification (improved)"
echo "üìÖ $(date '+%d/%m/%Y %H:%M:%S')"
echo "==========================================="
