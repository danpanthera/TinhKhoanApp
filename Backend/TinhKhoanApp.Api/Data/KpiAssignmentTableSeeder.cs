using TinhKhoanApp.Api.Models;
using TinhKhoanApp.Api.Data;
using Microsoft.EntityFrameworkCore;

namespace TinhKhoanApp.Api.Data
{
    /// <summary>
    /// Seeder t·∫°o 23 b·∫£ng KPI chu·∫©n cho c√°c vai tr√≤ c√°n b·ªô + 9 b·∫£ng cho chi nh√°nh
    /// S·ª≠ d·ª•ng definitions t·ª´ SeedKPIDefinitionMaxScore.cs ƒë·ªÉ ƒë·∫£m b·∫£o t√≠nh nh·∫•t qu√°n
    /// </summary>
    public static class KpiAssignmentTableSeeder
    {
        // Mapping t·ª´ KpiTableType enum sang RoleCode string (chu·∫©n h√≥a theo SeedKPIDefinitionMaxScore.cs)
        public static readonly Dictionary<KpiTableType, string> TableTypeToRoleCodeMapping = new()
        {
            // Vai tr√≤ c√°n b·ªô (23 lo·∫°i) - theo SeedKPIDefinitionMaxScore.cs
            { KpiTableType.TruongphongKhdn, "TruongphongKhdn" },
            { KpiTableType.TruongphongKhcn, "TruongphongKhcn" },
            { KpiTableType.PhophongKhdn, "PhophongKhdn" },
            { KpiTableType.PhophongKhcn, "PhophongKhcn" },
            { KpiTableType.TruongphongKhqlrr, "TruongphongKhqlrr" },
            { KpiTableType.PhophongKhqlrr, "PhophongKhqlrr" },
            { KpiTableType.Cbtd, "Cbtd" },
            { KpiTableType.TruongphongKtnqCnl1, "TruongphongKtnqCnl1" },
            { KpiTableType.PhophongKtnqCnl1, "PhophongKtnqCnl1" },
            { KpiTableType.Gdv, "Gdv" },
            { KpiTableType.TqHkKtnb, "TqHkKtnb" },
            { KpiTableType.TruongphoItThKtgs, "TruongphongItThKtgs" },
            { KpiTableType.CBItThKtgsKhqlrr, "CbItThKtgsKhqlrr" },
            { KpiTableType.GiamdocPgd, "GiamdocPgd" },
            { KpiTableType.PhogiamdocPgd, "PhogiamdocPgd" },
            { KpiTableType.PhogiamdocPgdCbtd, "PhogiamdocPgdCbtd" },
            { KpiTableType.GiamdocCnl2, "GiamdocCnl2" },
            { KpiTableType.PhogiamdocCnl2Td, "PhogiamdocCnl2Td" },
            { KpiTableType.PhogiamdocCnl2Kt, "PhogiamdocCnl2Kt" },
            { KpiTableType.TruongphongKhCnl2, "TruongphongKhCnl2" },
            { KpiTableType.PhophongKhCnl2, "PhophongKhCnl2" },
            { KpiTableType.TruongphongKtnqCnl2, "TruongphongKtnqCnl2" },
            { KpiTableType.PhophongKtnqCnl2, "PhophongKtnqCnl2" },
            // Chi nh√°nh (9 chi nh√°nh) - s·∫Ω c√≥ logic ri√™ng
            { KpiTableType.HoiSo, "HoiSo" },
            { KpiTableType.CnTamDuong, "CnBinhLu" },
            { KpiTableType.CnPhongTho, "CnPhongTho" },
            { KpiTableType.CnSinHo, "CnSinHo" },
            { KpiTableType.CnMuongTe, "CnBumTo" },
            { KpiTableType.CnThanUyen, "CnThanUyen" },
            { KpiTableType.CnThanhPho, "CnDoanKet" },
            { KpiTableType.CnTanUyen, "CnTanUyen" },
            { KpiTableType.CnNamNhun, "CnNamHang" }
        };

        // Mapping t·ª´ KpiTableType sang role descriptions chu·∫©n
        public static readonly Dictionary<KpiTableType, string> TableTypeToDescriptionMapping = new()
        {
            // Vai tr√≤ c√°n b·ªô - descriptions t·ª´ SeedKPIDefinitionMaxScore.cs
            { KpiTableType.TruongphongKhdn, "Tr∆∞·ªüng ph√≤ng KHDN" },
            { KpiTableType.TruongphongKhcn, "Tr∆∞·ªüng ph√≤ng KHCN" },
            { KpiTableType.PhophongKhdn, "Ph√≥ ph√≤ng KHDN" },
            { KpiTableType.PhophongKhcn, "Ph√≥ ph√≤ng KHCN" },
            { KpiTableType.TruongphongKhqlrr, "Tr∆∞·ªüng ph√≤ng K·∫ø ho·∫°ch v√† Qu·∫£n l√Ω r·ªßi ro" },
            { KpiTableType.PhophongKhqlrr, "Ph√≥ ph√≤ng K·∫ø ho·∫°ch v√† Qu·∫£n l√Ω r·ªßi ro" },
            { KpiTableType.Cbtd, "C√°n b·ªô t√≠n d·ª•ng" },
            { KpiTableType.TruongphongKtnqCnl1, "Tr∆∞·ªüng ph√≤ng K·∫ø to√°n & Ng√¢n qu·ªπ CNL1" },
            { KpiTableType.PhophongKtnqCnl1, "Ph√≥ ph√≤ng K·∫ø to√°n & Ng√¢n qu·ªπ CNL1" },
            { KpiTableType.Gdv, "Giao d·ªãch vi√™n" },
            { KpiTableType.TqHkKtnb, "TQ/H·∫≠u ki·ªÉm/K·∫ø to√°n n·ªôi b·ªô" },
            { KpiTableType.TruongphoItThKtgs, "Tr∆∞·ªüng ph√≥ ph√≤ng IT/TH/KTGS" },
            { KpiTableType.CBItThKtgsKhqlrr, "CB IT/TH/KTGS/KHQLRR" },
            { KpiTableType.GiamdocPgd, "Gi√°m ƒë·ªëc PGD" },
            { KpiTableType.PhogiamdocPgd, "Ph√≥ gi√°m ƒë·ªëc PGD" },
            { KpiTableType.PhogiamdocPgdCbtd, "Ph√≥ gi√°m ƒë·ªëc PGD ki√™m CBTD" },
            { KpiTableType.GiamdocCnl2, "Gi√°m ƒë·ªëc CNL2" },
            { KpiTableType.PhogiamdocCnl2Td, "Ph√≥ gi√°m ƒë·ªëc CNL2 ph·ª• tr√°ch T√≠n d·ª•ng" },
            { KpiTableType.PhogiamdocCnl2Kt, "Ph√≥ gi√°m ƒë·ªëc CNL2 Ph·ª• tr√°ch K·∫ø to√°n" },
            { KpiTableType.TruongphongKhCnl2, "Tr∆∞·ªüng ph√≤ng KH CNL2" },
            { KpiTableType.PhophongKhCnl2, "Ph√≥ ph√≤ng KH CNL2" },
            { KpiTableType.TruongphongKtnqCnl2, "Tr∆∞·ªüng ph√≤ng K·∫ø to√°n & Ng√¢n qu·ªπ CNL2" },
            { KpiTableType.PhophongKtnqCnl2, "Ph√≥ ph√≤ng K·∫ø to√°n & Ng√¢n qu·ªπ CNL2" },
            // Chi nh√°nh (c·∫≠p nh·∫≠t t√™n m·ªõi)
            { KpiTableType.HoiSo, "H·ªôi s·ªü" },
            { KpiTableType.CnTamDuong, "Chi nh√°nh B√¨nh L∆∞" },
            { KpiTableType.CnPhongTho, "Chi nh√°nh Phong Th·ªï" },
            { KpiTableType.CnSinHo, "Chi nh√°nh Sin H·ªì" },
            { KpiTableType.CnMuongTe, "Chi nh√°nh Bum T·ªü" },
            { KpiTableType.CnThanUyen, "Chi nh√°nh Than Uy√™n" },
            { KpiTableType.CnThanhPho, "Chi nh√°nh ƒêo√†n K·∫øt" },
            { KpiTableType.CnTanUyen, "Chi nh√°nh T√¢n Uy√™n" },
            { KpiTableType.CnNamNhun, "Chi nh√°nh N·∫≠m H√†ng" }
        };

        public static void SeedKpiAssignmentTables(ApplicationDbContext context)
        {
            try
            {
                Console.WriteLine("=== B·∫Øt ƒë·∫ßu seed 32 b·∫£ng KPI Assignment (23 vai tr√≤ + 9 chi nh√°nh) ===");

                // Ki·ªÉm tra xem ƒë√£ c√≥ b·∫£ng n√†o ch∆∞a
                var existingTables = context.KpiAssignmentTables.Count();
                if (existingTables > 0)
                {
                    Console.WriteLine($"‚ö†Ô∏è ƒê√£ c√≥ {existingTables} b·∫£ng KPI. B·ªè qua seeding ƒë·ªÉ tr√°nh tr√πng l·∫∑p.");
                    return;
                }

                var tablesToCreate = new List<KpiAssignmentTable>();
                var indicatorsToCreate = new List<KpiIndicator>();

                foreach (var mapping in TableTypeToRoleCodeMapping)
                {
                    var tableType = mapping.Key;
                    var roleCode = mapping.Value;
                    var description = TableTypeToDescriptionMapping[tableType];

                    Console.WriteLine($"üìã T·∫°o b·∫£ng KPI cho {description} (TableType: {tableType}, RoleCode: {roleCode})");

                    // T·∫°o KPI Assignment Table
                    var kpiTable = new KpiAssignmentTable
                    {
                        TableType = tableType,
                        TableName = $"{roleCode}_KPI_Assignment",
                        Description = $"B·∫£ng KPI cho {description}",
                        Category = GetCategoryForTableType(tableType),
                        IsActive = true,
                        CreatedDate = DateTime.UtcNow
                    };

                    tablesToCreate.Add(kpiTable);
                }

                // Th√™m t·∫•t c·∫£ b·∫£ng v√†o context v√† save ƒë·ªÉ c√≥ ID
                context.KpiAssignmentTables.AddRange(tablesToCreate);
                context.SaveChanges();

                Console.WriteLine($"‚úÖ ƒê√£ t·∫°o {tablesToCreate.Count} b·∫£ng KPI Assignment th√†nh c√¥ng");

                // T·∫°o indicators cho t·ª´ng b·∫£ng d·ª±a tr√™n definitions trong b·∫£ng KPIDefinitions
                foreach (var kpiTable in tablesToCreate)
                {
                    var indicators = CreateIndicatorsForTableFromDefinitions(context, kpiTable);
                    indicatorsToCreate.AddRange(indicators);
                }

                // Th√™m t·∫•t c·∫£ indicators
                context.KpiIndicators.AddRange(indicatorsToCreate);
                context.SaveChanges();

                Console.WriteLine($"‚úÖ ƒê√£ t·∫°o {indicatorsToCreate.Count} KPI Indicators theo definitions chu·∫©n");
                Console.WriteLine("=== Ho√†n th√†nh seed KPI Assignment Tables ===");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå L·ªói khi seed KPI Assignment Tables: {ex.Message}");
                Console.WriteLine($"üìç Stack trace: {ex.StackTrace}");
                throw;
            }
        }

        /// <summary>
        /// T·∫°o indicators t·ª´ definitions chu·∫©n trong b·∫£ng KPIDefinitions
        /// </summary>
        private static List<KpiIndicator> CreateIndicatorsForTableFromDefinitions(ApplicationDbContext context, KpiAssignmentTable kpiTable)
        {
            var indicators = new List<KpiIndicator>();
            var roleCode = TableTypeToRoleCodeMapping[kpiTable.TableType];

            // L·∫•y KPI definitions t·ª´ database theo roleCode
            var kpiDefinitions = context.KPIDefinitions
                .Where(k => k.KpiCode.StartsWith(roleCode + "_"))
                .OrderBy(k => k.KpiCode)
                .ToList();

            // N·∫øu kh√¥ng t√¨m th·∫•y definitions (c√≥ th·ªÉ l√† chi nh√°nh), s·ª≠ d·ª•ng template t·ª´ GiamdocCnl2
            if (!kpiDefinitions.Any() && IsBranchTableType(kpiTable.TableType))
            {
                Console.WriteLine($"‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y KPI definitions cho {roleCode}, s·ª≠ d·ª•ng template GiamdocCnl2");
                kpiDefinitions = context.KPIDefinitions
                    .Where(k => k.KpiCode.StartsWith("GiamdocCnl2_"))
                    .OrderBy(k => k.KpiCode)
                    .ToList();
            }

            for (int i = 0; i < kpiDefinitions.Count; i++)
            {
                var definition = kpiDefinitions[i];
                var indicator = new KpiIndicator
                {
                    TableId = kpiTable.Id,
                    IndicatorName = definition.KpiName,
                    MaxScore = definition.MaxScore,
                    Unit = definition.UnitOfMeasure,
                    OrderIndex = i + 1,
                    ValueType = definition.ValueType,
                    IsActive = definition.IsActive
                };

                indicators.Add(indicator);
            }

            Console.WriteLine($"üìä T·∫°o {indicators.Count} indicators cho {roleCode} t·ª´ b·∫£ng KPIDefinitions");
            return indicators;
        }

        /// <summary>
        /// Ki·ªÉm tra xem table type c√≥ ph·∫£i l√† chi nh√°nh kh√¥ng
        /// </summary>
        private static bool IsBranchTableType(KpiTableType tableType)
        {
            return tableType >= KpiTableType.HoiSo && tableType <= KpiTableType.CnNamNhun;
        }

        /// <summary>
        /// L·∫•y category cho table type
        /// </summary>
        private static string GetCategoryForTableType(KpiTableType tableType)
        {
            return IsBranchTableType(tableType) ? "CHINHANH" : "CANBO";
        }
    }
}
