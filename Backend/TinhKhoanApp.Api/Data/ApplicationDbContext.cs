using Microsoft.EntityFrameworkCore;
using TinhKhoanApp.Api.Models; // ƒê·∫£m b·∫£o namespace n√†y ƒë√∫ng v·ªõi n∆°i S·∫øp ƒë·∫∑t c√°c Model
using TinhKhoanApp.Api.Models.RawData; // Th√™m namespace cho Raw Data models
using TinhKhoanApp.Api.Models.Temporal; // Th√™m namespace cho Temporal models

namespace TinhKhoanApp.Api.Data // S·ª≠ d·ª•ng block-scoped namespace cho r√µ r√†ng
{
    public class ApplicationDbContext : DbContext
    {
        public ApplicationDbContext(DbContextOptions<ApplicationDbContext> options) : base(options)
        {
        }

        // Khai b√°o c√°c DbSet<T> cho m·ªói Model
        public DbSet<Unit> Units { get; set; }
        public DbSet<Position> Positions { get; set; }
        public DbSet<Employee> Employees { get; set; }
        public DbSet<Role> Roles { get; set; }
        public DbSet<EmployeeRole> EmployeeRoles { get; set; }
        public DbSet<KhoanPeriod> KhoanPeriods { get; set; }
        public DbSet<EmployeeKhoanAssignment> EmployeeKhoanAssignments { get; set; }
        public DbSet<EmployeeKhoanAssignmentDetail> EmployeeKhoanAssignmentDetails { get; set; }
        public DbSet<UnitKhoanAssignment> UnitKhoanAssignments { get; set; }
        public DbSet<UnitKhoanAssignmentDetail> UnitKhoanAssignmentDetails { get; set; }
        public DbSet<TransactionAdjustmentFactor> TransactionAdjustmentFactors { get; set; }
        public DbSet<SalaryParameter> SalaryParameters { get; set; }
        public DbSet<FinalPayout> FinalPayouts { get; set; }

        // DbSets cho h·ªá th·ªëng KPI m·ªõi
        public DbSet<KpiAssignmentTable> KpiAssignmentTables { get; set; }
        public DbSet<KpiIndicator> KpiIndicators { get; set; }
        public DbSet<EmployeeKpiTarget> EmployeeKpiTargets { get; set; }
        public DbSet<KPIDefinition> KPIDefinitions { get; set; }
        public DbSet<EmployeeKpiAssignment> EmployeeKpiAssignments { get; set; }

        // DbSets cho h·ªá th·ªëng ch·∫•m ƒëi·ªÉm KPI Chi nh√°nh
        public DbSet<UnitKpiScoring> UnitKpiScorings { get; set; }
        public DbSet<UnitKpiScoringDetail> UnitKpiScoringDetails { get; set; }
        public DbSet<UnitKpiScoringCriteria> UnitKpiScoringCriterias { get; set; }
        
        // DbSet cho b·∫£ng quy t·∫Øc t√≠nh ƒëi·ªÉm c·ªông/tr·ª´ KPI
        public DbSet<KpiScoringRule> KpiScoringRules { get; set; }

        // DbSets cho h·ªá th·ªëng Import d·ªØ li·ªáu
        public DbSet<ImportedDataRecord> ImportedDataRecords { get; set; }
        public DbSet<ImportedDataItem> ImportedDataItems { get; set; }
        
        // üóÑÔ∏è DbSets cho h·ªá th·ªëng Kho D·ªØ li·ªáu Th√¥ (Legacy)
        public DbSet<Models.RawDataImport> LegacyRawDataImports { get; set; }
        public DbSet<RawDataRecord> RawDataRecords { get; set; }
        
        // üöÄ DbSets cho h·ªá th·ªëng Temporal Tables (High Performance)
        public DbSet<Models.Temporal.RawDataImport> RawDataImports { get; set; }
        public DbSet<RawDataImportArchive> RawDataImportArchives { get; set; }
        public DbSet<Models.Temporal.ImportLog> ImportLogs { get; set; }
        
        // üìä DbSets cho h·ªá th·ªëng SCD Type 2 History Tables
        public DbSet<LN01History> LN01History { get; set; }
        public DbSet<GL01History> GL01History { get; set; }
        
        // üÜï DbSets cho c√°c b·∫£ng SCD Type 2 m·ªõi
        public DbSet<LN03History> LN03History { get; set; }
        public DbSet<EI01History> EI01History { get; set; }
        public DbSet<DPDAHistory> DPDAHistory { get; set; }
        public DbSet<DB01History> DB01History { get; set; }
        public DbSet<KH03History> KH03History { get; set; }
        public DbSet<BC57History> BC57History { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            // C·∫•u h√¨nh kh√≥a ch√≠nh ph·ª©c h·ª£p cho EmployeeRole
            modelBuilder.Entity<EmployeeRole>()
                .HasKey(er => new { er.EmployeeId, er.RoleId });

            // C·∫•u h√¨nh m·ªëi quan h·ªá nhi·ªÅu-nhi·ªÅu gi·ªØa Employee v√† Role qua EmployeeRole
            modelBuilder.Entity<EmployeeRole>()
                .HasOne(er => er.Employee)
                .WithMany(e => e.EmployeeRoles)
                .HasForeignKey(er => er.EmployeeId);

            modelBuilder.Entity<EmployeeRole>()
                .HasOne(er => er.Role)
                .WithMany(r => r.EmployeeRoles)
                .HasForeignKey(er => er.RoleId);

            // C·∫•u h√¨nh m·ªëi quan h·ªá t·ª± tham chi·∫øu c·ªßa Unit (ƒê∆°n v·ªã cha - ƒê∆°n v·ªã con)
            modelBuilder.Entity<Unit>()
                .HasOne(u => u.ParentUnit)
                .WithMany(u => u.ChildUnits)
                .HasForeignKey(u => u.ParentUnitId)
                .OnDelete(DeleteBehavior.Restrict); // NgƒÉn ch·∫∑n vi·ªác x√≥a ƒë·ªá quy

            // C·∫•u h√¨nh quan h·ªá EmployeeKhoanAssignment - Employee - KhoanPeriod
            modelBuilder.Entity<EmployeeKhoanAssignment>()
                .HasOne(e => e.Employee)
                .WithMany()
                .HasForeignKey(e => e.EmployeeId);
            modelBuilder.Entity<EmployeeKhoanAssignment>()
                .HasOne(e => e.KhoanPeriod)
                .WithMany()
                .HasForeignKey(e => e.KhoanPeriodId);
            // C·∫•u h√¨nh quan h·ªá UnitKhoanAssignment - Unit - KhoanPeriod
            modelBuilder.Entity<UnitKhoanAssignment>()
                .HasOne(u => u.Unit)
                .WithMany()
                .HasForeignKey(u => u.UnitId);
            modelBuilder.Entity<UnitKhoanAssignment>()
                .HasOne(u => u.KhoanPeriod)
                .WithMany()
                .HasForeignKey(u => u.KhoanPeriodId);

            // Th√™m c√°c c·∫•u h√¨nh Fluent API kh√°c ·ªü ƒë√¢y n·∫øu c·∫ßn (v√≠ d·ª•: unique constraints, indexes)
            // modelBuilder.Entity<Employee>()
            //     .HasIndex(e => e.Username)
            //     .IsUnique();
            // modelBuilder.Entity<Employee>()
            //     .HasIndex(e => e.EmployeeCode)
            //     .IsUnique();
            // modelBuilder.Entity<Role>()
            //     .HasIndex(r => r.Name)
            //     .IsUnique();

            // C·∫•u h√¨nh quan h·ªá cho c√°c b·∫£ng nghi·ªáp v·ª• KPI/l∆∞∆°ng n·∫øu c·∫ßn

            // C·∫•u h√¨nh quan h·ªá cho UnitKpiScoring
            modelBuilder.Entity<UnitKpiScoring>()
                .HasOne(s => s.UnitKhoanAssignment)
                .WithMany()
                .HasForeignKey(s => s.UnitKhoanAssignmentId)
                .OnDelete(DeleteBehavior.NoAction);

            modelBuilder.Entity<UnitKpiScoring>()
                .HasOne(s => s.KhoanPeriod)
                .WithMany()
                .HasForeignKey(s => s.KhoanPeriodId)
                .OnDelete(DeleteBehavior.NoAction);

            modelBuilder.Entity<UnitKpiScoring>()
                .HasOne(s => s.Unit)
                .WithMany()
                .HasForeignKey(s => s.UnitId)
                .OnDelete(DeleteBehavior.NoAction);

            // C·∫•u h√¨nh quan h·ªá cho UnitKpiScoringDetail
            modelBuilder.Entity<UnitKpiScoringDetail>()
                .HasOne(d => d.UnitKpiScoring)
                .WithMany(s => s.ScoringDetails)
                .HasForeignKey(d => d.UnitKpiScoringId);

            modelBuilder.Entity<UnitKpiScoringDetail>()
                .HasOne(d => d.KpiIndicator)
                .WithMany()
                .HasForeignKey(d => d.KpiIndicatorId);

            // C·∫•u h√¨nh quan h·ªá cho UnitKpiScoringCriteria
            modelBuilder.Entity<UnitKpiScoringCriteria>()
                .HasOne(c => c.UnitKpiScoring)
                .WithMany(s => s.ScoringCriteria)
                .HasForeignKey(c => c.UnitKpiScoringId);

            // C·∫•u h√¨nh cho KpiScoringRule
            modelBuilder.Entity<KpiScoringRule>(entity =>
            {
                // T·∫°o index cho vi·ªác t√¨m ki·∫øm nhanh theo t√™n ch·ªâ ti√™u
                entity.HasIndex(e => e.KpiIndicatorName)
                      .HasDatabaseName("IX_KpiScoringRules_IndicatorName");
                      
                // Thi·∫øt l·∫≠p gi√° tr·ªã m·∫∑c ƒë·ªãnh cho RuleType
                entity.Property(e => e.RuleType)
                      .HasDefaultValue("COMPLETION_RATE");
                      
                entity.Property(e => e.IsActive)
                      .HasDefaultValue(true);
            });

            // C·∫•u h√¨nh r√µ r√†ng quan h·ªá c·ªßa KpiIndicator ch·ªâ v·ªõi KpiAssignmentTable
            modelBuilder.Entity<KpiIndicator>()
                .HasOne(k => k.Table)
                .WithMany(t => t.Indicators)
                .HasForeignKey(k => k.TableId)
                .OnDelete(DeleteBehavior.Cascade);
            
            // NgƒÉn Entity Framework t·ª± ƒë·ªông t·∫°o quan h·ªá gi·ªØa KPIDefinition v√† KpiIndicator
            modelBuilder.Entity<KPIDefinition>()
                .Ignore(k => k.KpiIndicators);
        }
    }
}