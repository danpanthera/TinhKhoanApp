using Microsoft.EntityFrameworkCore;
using TinhKhoanApp.Api.Models; // ƒê·∫£m b·∫£o namespace n√†y ƒë√∫ng v·ªõi n∆°i S·∫øp ƒë·∫∑t c√°c Model
using TinhKhoanApp.Api.Models.RawData; // Th√™m namespace cho Raw Data models
using TinhKhoanApp.Api.Models.Temporal; // Th√™m namespace cho Temporal models
using TinhKhoanApp.Api.Models.Dashboard; // Th√™m namespace cho Dashboard models

namespace TinhKhoanApp.Api.Data // S·ª≠ d·ª•ng block-scoped namespace cho r√µ r√†ng
{
    public class ApplicationDbContext : DbContext
    {
        public ApplicationDbContext(DbContextOptions<ApplicationDbContext> options) : base(options)
        {
        }

        // Khai b√°o c√°c DbSet<T> cho m·ªói Model
        public DbSet<Unit> Units { get; set; }
        public DbSet<Position> Positions { get; set; }
        public DbSet<Employee> Employees { get; set; }
        public DbSet<Role> Roles { get; set; }
        public DbSet<EmployeeRole> EmployeeRoles { get; set; }
        public DbSet<KhoanPeriod> KhoanPeriods { get; set; }
        public DbSet<EmployeeKhoanAssignment> EmployeeKhoanAssignments { get; set; }
        public DbSet<EmployeeKhoanAssignmentDetail> EmployeeKhoanAssignmentDetails { get; set; }
        public DbSet<UnitKhoanAssignment> UnitKhoanAssignments { get; set; }
        public DbSet<UnitKhoanAssignmentDetail> UnitKhoanAssignmentDetails { get; set; }
        public DbSet<TransactionAdjustmentFactor> TransactionAdjustmentFactors { get; set; }
        public DbSet<SalaryParameter> SalaryParameters { get; set; }
        public DbSet<FinalPayout> FinalPayouts { get; set; }

        // DbSets cho h·ªá th·ªëng KPI m·ªõi
        public DbSet<KpiAssignmentTable> KpiAssignmentTables { get; set; }
        public DbSet<KpiIndicator> KpiIndicators { get; set; }
        public DbSet<EmployeeKpiTarget> EmployeeKpiTargets { get; set; }
        public DbSet<KPIDefinition> KPIDefinitions { get; set; }
        public DbSet<EmployeeKpiAssignment> EmployeeKpiAssignments { get; set; }

        // DbSets cho h·ªá th·ªëng ch·∫•m ƒëi·ªÉm KPI Chi nh√°nh
        public DbSet<UnitKpiScoring> UnitKpiScorings { get; set; }
        public DbSet<UnitKpiScoringDetail> UnitKpiScoringDetails { get; set; }
        public DbSet<UnitKpiScoringCriteria> UnitKpiScoringCriterias { get; set; }

        // DbSet cho b·∫£ng quy t·∫Øc t√≠nh ƒëi·ªÉm c·ªông/tr·ª´ KPI
        public DbSet<KpiScoringRule> KpiScoringRules { get; set; }

        // DbSets cho h·ªá th·ªëng Import d·ªØ li·ªáu
        public DbSet<ImportedDataRecord> ImportedDataRecords { get; set; }
        public DbSet<ImportedDataItem> ImportedDataItems { get; set; }

        // üóÑÔ∏è DbSets cho h·ªá th·ªëng Kho D·ªØ li·ªáu Th√¥ (Legacy)
        public DbSet<Models.RawDataImport> LegacyRawDataImports { get; set; }
        public DbSet<RawDataRecord> RawDataRecords { get; set; }

        // üöÄ DbSets cho h·ªá th·ªëng Temporal Tables (High Performance)
        // Temporarily commented out while using ImportedDataRecords
        // public DbSet<Models.Temporal.RawDataImport> RawDataImports { get; set; }
        public DbSet<Models.Temporal.OptimizedRawDataImport> OptimizedRawDataImports { get; set; }
        public DbSet<RawDataImportArchive> RawDataImportArchives { get; set; }
        public DbSet<Models.Temporal.ImportLog> ImportLogs { get; set; }

        // üìä DbSets cho h·ªá th·ªëng SCD Type 2 History Tables
        public DbSet<LN01History> LN01History { get; set; }
        public DbSet<GL01History> GL01History { get; set; }

        // üÜï DbSets cho c√°c b·∫£ng History v·ªõi t√™n c·ªôt CSV g·ªëc
        public DbSet<LN01_History> LN01_History { get; set; }

        // üÜï DbSets cho c√°c b·∫£ng SCD Type 2 m·ªõi
        public DbSet<LN03History> LN03History { get; set; }
        public DbSet<EI01History> EI01History { get; set; }
        public DbSet<DPDAHistory> DPDAHistory { get; set; }
        public DbSet<DB01History> DB01History { get; set; }
        public DbSet<KH03History> KH03History { get; set; }
        public DbSet<BC57History> BC57History { get; set; }

        // üöÄ DbSets cho c√°c b·∫£ng c√≤n thi·∫øu temporal tables
        public DbSet<DT_KHKD1_History> DT_KHKD1_History { get; set; }
        public DbSet<GAHR26_History> GAHR26_History { get; set; }
        public DbSet<GL41_History> GL41_History { get; set; }

        // üí∞ DbSets cho 3 b·∫£ng d·ªØ li·ªáu th√¥ m·ªõi v·ªõi Temporal Tables
        public DbSet<ThuXLRR> ThuXLRR { get; set; }
        public DbSet<MSIT72_TSBD> MSIT72_TSBD { get; set; }
        public DbSet<MSIT72_TSGH> MSIT72_TSGH { get; set; }

        // üìä DbSets cho h·ªá th·ªëng Dashboard K·∫ø ho·∫°ch Kinh doanh
        public DbSet<DashboardIndicator> DashboardIndicators { get; set; }
        public DbSet<BusinessPlanTarget> BusinessPlanTargets { get; set; }
        public DbSet<DashboardCalculation> DashboardCalculations { get; set; }

        // üí∞ DbSet cho b·∫£ng DP01 - D·ªØ li·ªáu b√°o c√°o t√†i ch√≠nh theo ng√†y
        public DbSet<DP01> DP01s { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            // C·∫•u h√¨nh kh√≥a ch√≠nh ph·ª©c h·ª£p cho EmployeeRole
            modelBuilder.Entity<EmployeeRole>()
                .HasKey(er => new { er.EmployeeId, er.RoleId });

            // C·∫•u h√¨nh m·ªëi quan h·ªá nhi·ªÅu-nhi·ªÅu gi·ªØa Employee v√† Role qua EmployeeRole
            modelBuilder.Entity<EmployeeRole>()
                .HasOne(er => er.Employee)
                .WithMany(e => e.EmployeeRoles)
                .HasForeignKey(er => er.EmployeeId);

            modelBuilder.Entity<EmployeeRole>()
                .HasOne(er => er.Role)
                .WithMany(r => r.EmployeeRoles)
                .HasForeignKey(er => er.RoleId);

            // C·∫•u h√¨nh m·ªëi quan h·ªá t·ª± tham chi·∫øu c·ªßa Unit (ƒê∆°n v·ªã cha - ƒê∆°n v·ªã con)
            modelBuilder.Entity<Unit>()
                .HasOne(u => u.ParentUnit)
                .WithMany(u => u.ChildUnits)
                .HasForeignKey(u => u.ParentUnitId)
                .OnDelete(DeleteBehavior.Restrict); // NgƒÉn ch·∫∑n vi·ªác x√≥a ƒë·ªá quy

            // C·∫•u h√¨nh quan h·ªá EmployeeKhoanAssignment - Employee - KhoanPeriod
            modelBuilder.Entity<EmployeeKhoanAssignment>()
                .HasOne(e => e.Employee)
                .WithMany()
                .HasForeignKey(e => e.EmployeeId);
            modelBuilder.Entity<EmployeeKhoanAssignment>()
                .HasOne(e => e.KhoanPeriod)
                .WithMany()
                .HasForeignKey(e => e.KhoanPeriodId);
            // C·∫•u h√¨nh quan h·ªá UnitKhoanAssignment - Unit - KhoanPeriod
            modelBuilder.Entity<UnitKhoanAssignment>()
                .HasOne(u => u.Unit)
                .WithMany()
                .HasForeignKey(u => u.UnitId);
            modelBuilder.Entity<UnitKhoanAssignment>()
                .HasOne(u => u.KhoanPeriod)
                .WithMany()
                .HasForeignKey(u => u.KhoanPeriodId);

            // Th√™m c√°c c·∫•u h√¨nh Fluent API kh√°c ·ªü ƒë√¢y n·∫øu c·∫ßn (v√≠ d·ª•: unique constraints, indexes)
            // modelBuilder.Entity<Employee>()
            //     .HasIndex(e => e.Username)
            //     .IsUnique();
            // modelBuilder.Entity<Employee>()
            //     .HasIndex(e => e.EmployeeCode)
            //     .IsUnique();
            // modelBuilder.Entity<Role>()
            //     .HasIndex(r => r.Name)
            //     .IsUnique();

            // C·∫•u h√¨nh quan h·ªá cho c√°c b·∫£ng nghi·ªáp v·ª• KPI/l∆∞∆°ng n·∫øu c·∫ßn

            // C·∫•u h√¨nh quan h·ªá cho UnitKpiScoring
            modelBuilder.Entity<UnitKpiScoring>()
                .HasOne(s => s.UnitKhoanAssignment)
                .WithMany()
                .HasForeignKey(s => s.UnitKhoanAssignmentId)
                .OnDelete(DeleteBehavior.NoAction);

            modelBuilder.Entity<UnitKpiScoring>()
                .HasOne(s => s.KhoanPeriod)
                .WithMany()
                .HasForeignKey(s => s.KhoanPeriodId)
                .OnDelete(DeleteBehavior.NoAction);

            modelBuilder.Entity<UnitKpiScoring>()
                .HasOne(s => s.Unit)
                .WithMany()
                .HasForeignKey(s => s.UnitId)
                .OnDelete(DeleteBehavior.NoAction);

            // C·∫•u h√¨nh quan h·ªá cho UnitKpiScoringDetail
            modelBuilder.Entity<UnitKpiScoringDetail>()
                .HasOne(d => d.UnitKpiScoring)
                .WithMany(s => s.ScoringDetails)
                .HasForeignKey(d => d.UnitKpiScoringId);

            modelBuilder.Entity<UnitKpiScoringDetail>()
                .HasOne(d => d.KpiIndicator)
                .WithMany()
                .HasForeignKey(d => d.KpiIndicatorId);

            // C·∫•u h√¨nh quan h·ªá cho UnitKpiScoringCriteria
            modelBuilder.Entity<UnitKpiScoringCriteria>()
                .HasOne(c => c.UnitKpiScoring)
                .WithMany(s => s.ScoringCriteria)
                .HasForeignKey(c => c.UnitKpiScoringId);

            // C·∫•u h√¨nh cho KpiScoringRule
            modelBuilder.Entity<KpiScoringRule>(entity =>
            {
                // T·∫°o index cho vi·ªác t√¨m ki·∫øm nhanh theo t√™n ch·ªâ ti√™u
                entity.HasIndex(e => e.KpiIndicatorName)
                      .HasDatabaseName("IX_KpiScoringRules_IndicatorName");

                // Thi·∫øt l·∫≠p gi√° tr·ªã m·∫∑c ƒë·ªãnh cho RuleType
                entity.Property(e => e.RuleType)
                      .HasDefaultValue("COMPLETION_RATE");

                entity.Property(e => e.IsActive)
                      .HasDefaultValue(true);
            });

            // C·∫•u h√¨nh r√µ r√†ng quan h·ªá c·ªßa KpiIndicator ch·ªâ v·ªõi KpiAssignmentTable
            modelBuilder.Entity<KpiIndicator>()
                .HasOne(k => k.Table)
                .WithMany(t => t.Indicators)
                .HasForeignKey(k => k.TableId)
                .OnDelete(DeleteBehavior.Cascade);

            // NgƒÉn Entity Framework t·ª± ƒë·ªông t·∫°o quan h·ªá gi·ªØa KPIDefinition v√† KpiIndicator
            modelBuilder.Entity<KPIDefinition>()
                .Ignore(k => k.KpiIndicators);

            // === DECIMAL PRECISION CONFIGURATION ===
            // Fix all decimal property precision warnings

            // EmployeeKhoanAssignmentDetail
            modelBuilder.Entity<EmployeeKhoanAssignmentDetail>(entity =>
            {
                entity.Property(e => e.ActualValue).HasPrecision(18, 2);
                entity.Property(e => e.Score).HasPrecision(18, 2);
                entity.Property(e => e.TargetValue).HasPrecision(18, 2);
            });

            // EmployeeKpiTarget
            modelBuilder.Entity<EmployeeKpiTarget>(entity =>
            {
                entity.Property(e => e.ActualValue).HasPrecision(18, 2);
                entity.Property(e => e.Score).HasPrecision(18, 2);
                entity.Property(e => e.TargetValue).HasPrecision(18, 2);
            });

            // FinalPayout
            modelBuilder.Entity<FinalPayout>(entity =>
            {
                entity.Property(e => e.CompletionFactor).HasPrecision(18, 4);
                entity.Property(e => e.TotalAmount).HasPrecision(18, 2);
                entity.Property(e => e.V1).HasPrecision(18, 2);
                entity.Property(e => e.V2).HasPrecision(18, 2);
            });

            // KPIDefinition
            modelBuilder.Entity<KPIDefinition>(entity =>
            {
                entity.Property(e => e.MaxScore).HasPrecision(18, 2);
            });

            // KpiIndicator
            modelBuilder.Entity<KpiIndicator>(entity =>
            {
                entity.Property(e => e.MaxScore).HasPrecision(18, 2);
            });

            // KpiScoringRule
            modelBuilder.Entity<KpiScoringRule>(entity =>
            {
                entity.Property(e => e.BonusPoints).HasPrecision(18, 2);
                entity.Property(e => e.MaxValue).HasPrecision(18, 2);
                entity.Property(e => e.MinValue).HasPrecision(18, 2);
                entity.Property(e => e.PenaltyPoints).HasPrecision(18, 2);
            });

            // SalaryParameter
            modelBuilder.Entity<SalaryParameter>(entity =>
            {
                entity.Property(e => e.Value).HasPrecision(18, 2);
            });

            // TransactionAdjustmentFactor
            modelBuilder.Entity<TransactionAdjustmentFactor>(entity =>
            {
                entity.Property(e => e.Factor).HasPrecision(18, 4);
            });

            // UnitKhoanAssignmentDetail
            modelBuilder.Entity<UnitKhoanAssignmentDetail>(entity =>
            {
                entity.Property(e => e.ActualValue).HasPrecision(18, 2);
                entity.Property(e => e.Score).HasPrecision(18, 2);
                entity.Property(e => e.TargetValue).HasPrecision(18, 2);
            });

            // === DASHBOARD CONFIGURATION ===

            // C·∫•u h√¨nh DashboardIndicator
            modelBuilder.Entity<DashboardIndicator>(entity =>
            {
                entity.HasIndex(d => d.Code).IsUnique();
                entity.Property(d => d.CreatedDate).HasDefaultValueSql("GETDATE()");
            });

            // C·∫•u h√¨nh BusinessPlanTarget
            modelBuilder.Entity<BusinessPlanTarget>(entity =>
            {
                // Unique constraint: m·ªôt ƒë∆°n v·ªã ch·ªâ c√≥ m·ªôt k·∫ø ho·∫°ch cho m·ªôt ch·ªâ ti√™u trong m·ªôt k·ª≥
                entity.HasIndex(b => new { b.DashboardIndicatorId, b.UnitId, b.Year, b.Quarter, b.Month })
                      .IsUnique()
                      .HasDatabaseName("IX_BusinessPlanTarget_Unique");

                entity.Property(b => b.TargetValue).HasPrecision(18, 2);
                entity.Property(b => b.CreatedDate).HasDefaultValueSql("GETDATE()");
                entity.Property(b => b.Status).HasDefaultValue("Draft");

                // Quan h·ªá v·ªõi DashboardIndicator
                entity.HasOne(b => b.DashboardIndicator)
                      .WithMany()
                      .HasForeignKey(b => b.DashboardIndicatorId)
                      .OnDelete(DeleteBehavior.Cascade);

                // Quan h·ªá v·ªõi Unit
                entity.HasOne(b => b.Unit)
                      .WithMany()
                      .HasForeignKey(b => b.UnitId)
                      .OnDelete(DeleteBehavior.Cascade);
            });

            // C·∫•u h√¨nh DashboardCalculation
            modelBuilder.Entity<DashboardCalculation>(entity =>
            {
                // Unique constraint: m·ªôt ƒë∆°n v·ªã ch·ªâ c√≥ m·ªôt k·∫øt qu·∫£ t√≠nh to√°n cho m·ªôt ch·ªâ ti√™u trong m·ªôt ng√†y
                entity.HasIndex(d => new { d.DashboardIndicatorId, d.UnitId, d.CalculationDate })
                      .IsUnique()
                      .HasDatabaseName("IX_DashboardCalculation_Unique");

                entity.Property(d => d.ActualValue).HasPrecision(18, 2);
                entity.Property(d => d.CreatedDate).HasDefaultValueSql("GETDATE()");
                entity.Property(d => d.Status).HasDefaultValue("Success");

                // Quan h·ªá v·ªõi DashboardIndicator
                entity.HasOne(d => d.DashboardIndicator)
                      .WithMany()
                      .HasForeignKey(d => d.DashboardIndicatorId)
                      .OnDelete(DeleteBehavior.Cascade);

                // Quan h·ªá v·ªõi Unit
                entity.HasOne(d => d.Unit)
                      .WithMany()
                      .HasForeignKey(d => d.UnitId)
                      .OnDelete(DeleteBehavior.Cascade);
            });

            // üöÄ === TEMPORAL TABLES + COLUMNSTORE INDEXES CONFIGURATION ===

            // üìä C·∫•u h√¨nh Temporal Tables cho ImportedDataRecord v·ªõi history tracking
            // ‚úÖ ƒê√£ fix c√°c v·∫•n ƒë·ªÅ compression columns, b·∫≠t l·∫°i temporal tables
            modelBuilder.Entity<ImportedDataRecord>(entity =>
            {
                // B·∫≠t Temporal Table v·ªõi shadow properties ƒë·ªÉ tracking l·ªãch s·ª≠ thay ƒë·ªïi
                entity.ToTable(tb => tb.IsTemporal(ttb =>
                {
                    ttb.UseHistoryTable("ImportedDataRecords_History");
                    ttb.HasPeriodStart("SysStartTime").HasColumnName("SysStartTime");
                    ttb.HasPeriodEnd("SysEndTime").HasColumnName("SysEndTime");
                }));

                // ‚ö†Ô∏è QUAN TR·ªåNG: ƒê·ªãnh nghƒ©a shadow properties cho temporal columns
                entity.Property<DateTime>("SysStartTime").HasColumnName("SysStartTime");
                entity.Property<DateTime>("SysEndTime").HasColumnName("SysEndTime");

                // Indexes for performance theo chu·∫©n Columnstore
                entity.HasIndex(e => e.StatementDate)
                      .HasDatabaseName("IX_ImportedDataRecords_StatementDate");

                entity.HasIndex(e => new { e.Category, e.ImportDate })
                      .HasDatabaseName("IX_ImportedDataRecords_Category_ImportDate");

                entity.HasIndex(e => e.Status)
                      .HasDatabaseName("IX_ImportedDataRecords_Status");

                // B·ªï sung index cho temporal table queries
                entity.HasIndex(e => e.ImportDate)
                      .HasDatabaseName("IX_ImportedDataRecords_ImportDate");
            });

            // üìà C·∫•u h√¨nh Temporal Tables cho ImportedDataItem v·ªõi Columnstore Index
            modelBuilder.Entity<ImportedDataItem>(entity =>
            {
                // Enable Temporal Table v·ªõi shadow properties cho Big Data Analytics
                entity.ToTable(tb => tb.IsTemporal(ttb =>
                {
                    ttb.UseHistoryTable("ImportedDataItems_History");
                    ttb.HasPeriodStart("SysStartTime").HasColumnName("SysStartTime");
                    ttb.HasPeriodEnd("SysEndTime").HasColumnName("SysEndTime");
                }));

                // ‚ö†Ô∏è QUAN TR·ªåNG: ƒê·ªãnh nghƒ©a shadow properties cho temporal columns
                entity.Property<DateTime>("SysStartTime").HasColumnName("SysStartTime");
                entity.Property<DateTime>("SysEndTime").HasColumnName("SysEndTime");

                // Indexes cho analytics performance v·ªõi Columnstore optimization
                entity.HasIndex(e => e.ProcessedDate)
                      .HasDatabaseName("IX_ImportedDataItems_ProcessedDate");

                entity.HasIndex(e => e.ImportedDataRecordId)
                      .HasDatabaseName("IX_ImportedDataItems_RecordId");

                // Index k·∫øt h·ª£p cho temporal queries
                entity.HasIndex(e => new { e.ImportedDataRecordId, e.ProcessedDate })
                      .HasDatabaseName("IX_ImportedDataItems_Record_Date");

                // JSON indexing (SQL Server 2016+) cho RawData
                entity.Property(e => e.RawData)
                      .HasColumnType("nvarchar(max)");
            });

            // üéØ Custom SQL ƒë·ªÉ t·∫°o Columnstore Index (s·∫Ω ch·∫°y qua migration)
            // Columnstore Index cho analytics performance tr√™n ImportedDataItems v√† History
            // Em s·∫Ω t·∫°o migration ri√™ng ƒë·ªÉ:
            // 1. CREATE NONCLUSTERED COLUMNSTORE INDEX IX_ImportedDataItems_Columnstore
            //    ON ImportedDataItems (ImportedDataRecordId, ProcessedDate, RawData)
            //    WHERE ProcessedDate >= '2024-01-01'
            //
            // 2. CREATE NONCLUSTERED COLUMNSTORE INDEX IX_ImportedDataItems_History_Columnstore
            //    ON ImportedDataItems_History (ImportedDataRecordId, ProcessedDate, RawData, SysStartTime, SysEndTime)
            //    WHERE ProcessedDate >= '2024-01-01'
            //
            // 3. CREATE NONCLUSTERED COLUMNSTORE INDEX IX_ImportedDataRecords_History_Columnstore
            //    ON ImportedDataRecords_History (Category, ImportDate, StatementDate, Status, SysStartTime, SysEndTime)
            //    WHERE ImportDate >= '2024-01-01'

            // üöÄ === C·∫§U H√åNH TEMPORAL TABLES V·ªöI T√äN C·ªòT CSV G·ªêC ===
            // S·ª≠ d·ª•ng History models cho temporal configuration nh∆∞ng ƒë·∫£m b·∫£o main table c√≥ t√™n c·ªôt ƒë√∫ng

            // C·∫•u h√¨nh t√™n c·ªôt CSV g·ªëc cho c√°c b·∫£ng
            ConfigureMainTableWithOriginalColumns(modelBuilder);

            // C·∫•u h√¨nh temporal table cho KH03 (ch·ªâ thi·∫øu temporal table)
            ConfigureTemporalTable<KH03History>(modelBuilder, "KH03", "KH03_History");

            // ƒê·∫£m b·∫£o c√°c b·∫£ng ƒë√£ c√≥ c≈©ng ƒë∆∞·ª£c c·∫•u h√¨nh ƒë√∫ng
            ConfigureTemporalTable<DPDAHistory>(modelBuilder, "DPDA", "DPDA_History");
            ConfigureTemporalTable<EI01History>(modelBuilder, "EI01", "EI01_History");
        }

        // üîß Helper method ƒë·ªÉ c·∫•u h√¨nh Temporal Table
        private void ConfigureTemporalTable<T>(ModelBuilder modelBuilder, string tableName, string historyTableName) where T : class
        {
            modelBuilder.Entity<T>(entity =>
            {
                // C·∫•u h√¨nh b·∫£ng th√†nh Temporal Table v·ªõi shadow properties
                entity.ToTable(tableName, b => b.IsTemporal(ttb =>
                {
                    ttb.HasPeriodStart("SysStartTime").HasColumnName("SysStartTime");
                    ttb.HasPeriodEnd("SysEndTime").HasColumnName("SysEndTime");
                    ttb.UseHistoryTable(historyTableName);
                }));

                // Th√™m shadow properties cho temporal columns (kh√¥ng ƒë∆∞·ª£c c√≥ default value)
                entity.Property<DateTime>("SysStartTime").HasColumnName("SysStartTime");
                entity.Property<DateTime>("SysEndTime").HasColumnName("SysEndTime");

                // Indexes for performance theo chu·∫©n Columnstore (ki·ªÉm tra property t·ªìn t·∫°i)
                var entityType = typeof(T);
                if (entityType.GetProperty("StatementDate") != null)
                {
                    entity.HasIndex("StatementDate")
                          .HasDatabaseName($"IX_{tableName}_StatementDate");
                }

                if (entityType.GetProperty("ProcessedDate") != null)
                {
                    entity.HasIndex("ProcessedDate")
                          .HasDatabaseName($"IX_{tableName}_ProcessedDate");
                }

                if (entityType.GetProperty("IsCurrent") != null)
                {
                    entity.HasIndex("IsCurrent")
                          .HasDatabaseName($"IX_{tableName}_IsCurrent");
                }
            });
        }

        /// <summary>
        /// C·∫•u h√¨nh c√°c b·∫£ng ch√≠nh v·ªõi t√™n c·ªôt CSV g·ªëc
        /// </summary>
        private void ConfigureMainTableWithOriginalColumns(ModelBuilder modelBuilder)
        {
            // T·∫°m th·ªùi comment out v√¨ c·∫ßn xem l·∫°i c·∫•u h√¨nh temporal table
            // Thay v√†o ƒë√≥, ƒë·∫£m b·∫£o History models c√≥ t√™n c·ªôt ch√≠nh x√°c            // üè¶ C·∫•u h√¨nh cho b·∫£ng DP01 - D·ªØ li·ªáu b√°o c√°o t√†i ch√≠nh
            modelBuilder.Entity<DP01>(entity =>
            {
                entity.ToTable("DP01");

                // C·∫•u h√¨nh precision cho CURRENT_BALANCE (18,2 ƒë·ªÉ l∆∞u s·ªë ti·ªÅn l·ªõn)
                entity.Property(e => e.CURRENT_BALANCE)
                    .HasPrecision(18, 2);

                // T·∫°o clustered columnstore index cho hi·ªáu su·∫•t cao
                entity.HasIndex(e => new { e.DATA_DATE, e.MA_CN, e.MA_PGD })
                    .HasDatabaseName("IX_DP01_DateBranchPGD_Clustered");

                // Index cho t√†i kho·∫£n h·∫°ch to√°n ƒë·ªÉ filter nhanh
                entity.HasIndex(e => e.TAI_KHOAN_HACH_TOAN)
                    .HasDatabaseName("IX_DP01_Account");

                // Index cho m√£ chi nh√°nh
                entity.HasIndex(e => e.MA_CN)
                    .HasDatabaseName("IX_DP01_Branch");
            });
        }
    }
}
