using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Microsoft.EntityFrameworkCore;
using TinhKhoanApp.Api.Models;

namespace TinhKhoanApp.Api.Data
{
    /// <summary>
    /// C·∫≠p nh·∫≠t v√† chu·∫©n h√≥a terminology trong database
    /// KTNV -> KTNQ, "Kinh t·∫ø N·ªôi v·ª•" -> "K·∫ø to√°n v√† Ng√¢n qu·ªπ"
    /// </summary>
    public static class TerminologyUpdater
    {
        public static void UpdateTerminology(ApplicationDbContext context)
        {
            try
            {
                Console.WriteLine("üîÑ B·∫Øt ƒë·∫ßu chu·∫©n h√≥a terminology...");

                UpdateTableTerminology(context);
                UpdateIndicatorTerminology(context);

                context.SaveChanges();
                Console.WriteLine("‚úÖ Ho√†n th√†nh chu·∫©n h√≥a terminology!");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå L·ªói khi chu·∫©n h√≥a terminology: {ex.Message}");
            }
        }

        private static void UpdateTableTerminology(ApplicationDbContext context)
        {
            try
            {
                var tables = context.KpiAssignmentTables
                    .Where(t => t.TableName.Contains("KTNV") ||
                               (t.Description != null && t.Description.Contains("Kinh t·∫ø N·ªôi v·ª•")) ||
                               (t.Description != null && t.Description.Contains("H·∫°ch ki·ªÉm")) ||
                               t.TableName.Contains("ph·ª• tr√°ch Kinh t·∫ø") ||
                               (t.Description != null && t.Description.Contains("ph·ª• tr√°ch Kinh t·∫ø")) ||
                               // Th√™m c√°c b·∫£ng KPI c·ª• th·ªÉ c·∫ßn c·∫≠p nh·∫≠t
                               t.TableName.Contains("Tr∆∞·ªüng ph√≤ng KTNV") ||
                               t.TableName.Contains("Ph√≥ ph√≤ng KTNV"))
                    .ToList();

                if (tables.Count == 0)
                {
                    Console.WriteLine("‚úÖ Kh√¥ng c√≥ b·∫£ng KPI n√†o c·∫ßn chu·∫©n h√≥a terminology");
                    return;
                }

                int changesCount = 0;
                foreach (var table in tables)
                {
                    bool changed = false;

                    // 1. KTNV -> KTNQ (chu·∫©n h√≥a m√£ ph√≤ng ban)
                    if (table.TableName.Contains("KTNV"))
                    {
                        table.TableName = table.TableName.Replace("KTNV", "KTNQ");
                        changed = true;
                        Console.WriteLine($"üìã C·∫≠p nh·∫≠t TableName: KTNV -> KTNQ trong '{table.TableName}'");
                    }

                    // 2. Kinh t·∫ø N·ªôi v·ª• -> K·∫ø to√°n & Ng√¢n qu·ªπ (chu·∫©n h√≥a t√™n ph√≤ng ban)
                    if (table.Description?.Contains("Kinh t·∫ø N·ªôi v·ª•") == true)
                    {
                        string oldDesc = table.Description;
                        table.Description = table.Description.Replace("Kinh t·∫ø N·ªôi v·ª•", "K·∫ø to√°n & Ng√¢n qu·ªπ");
                        changed = true;
                        Console.WriteLine($"üìã C·∫≠p nh·∫≠t Description: '{oldDesc}' -> '{table.Description}'");
                    }

                    // 3. H·∫°ch ki·ªÉm -> H·∫≠u ki·ªÉm
                    if (table.Description?.Contains("H·∫°ch ki·ªÉm") == true)
                    {
                        string oldDesc = table.Description;
                        table.Description = table.Description.Replace("H·∫°ch ki·ªÉm", "H·∫≠u ki·ªÉm");
                        changed = true;
                        Console.WriteLine($"üìã C·∫≠p nh·∫≠t Description: '{oldDesc}' -> '{table.Description}'");
                    }

                    // 4. Chu·∫©n h√≥a: ph·ª• tr√°ch Kinh t·∫ø -> Ph·ª• tr√°ch K·∫ø to√°n
                    if (table.TableName.Contains("ph·ª• tr√°ch Kinh t·∫ø") || table.TableName.Contains("Ph√≥ gi√°m ƒë·ªëc CNL2 ph·ª• tr√°ch Kinh t·∫ø"))
                    {
                        string oldTableName = table.TableName;
                        table.TableName = table.TableName.Replace("ph·ª• tr√°ch Kinh t·∫ø", "Ph·ª• tr√°ch K·∫ø to√°n")
                                                       .Replace("Ph√≥ gi√°m ƒë·ªëc CNL2 ph·ª• tr√°ch Kinh t·∫ø", "Ph√≥ gi√°m ƒë·ªëc CNL2 Ph·ª• tr√°ch K·∫ø to√°n");
                        changed = true;
                        Console.WriteLine($"üìã C·∫≠p nh·∫≠t TableName: '{oldTableName}' -> '{table.TableName}'");
                    }

                    // 5. C·∫≠p nh·∫≠t c√°c b·∫£ng KPI c·ª• th·ªÉ: KTNV -> KTNQ v√† TableType
                    if (table.TableName == "Tr∆∞·ªüng ph√≤ng KTNV CNL1")
                    {
                        table.TableName = "Tr∆∞·ªüng ph√≤ng KTNQ CNL1";
                        table.TableType = KpiTableType.TruongphongKtnqCnl1;
                        changed = true;
                        Console.WriteLine($"üìã C·∫≠p nh·∫≠t b·∫£ng KPI: Tr∆∞·ªüng ph√≤ng KTNV CNL1 -> Tr∆∞·ªüng ph√≤ng KTNQ CNL1");
                    }
                    else if (table.TableName == "Ph√≥ ph√≤ng KTNV CNL1")
                    {
                        table.TableName = "Ph√≥ ph√≤ng KTNQ CNL1";
                        table.TableType = KpiTableType.PhophongKtnqCnl1;
                        changed = true;
                        Console.WriteLine($"üìã C·∫≠p nh·∫≠t b·∫£ng KPI: Ph√≥ ph√≤ng KTNV CNL1 -> Ph√≥ ph√≤ng KTNQ CNL1");
                    }
                    else if (table.TableName == "Tr∆∞·ªüng ph√≤ng KTNV CNL2")
                    {
                        table.TableName = "Tr∆∞·ªüng ph√≤ng KTNQ CNL2";
                        table.TableType = KpiTableType.TruongphongKtnqCnl2;
                        changed = true;
                        Console.WriteLine($"üìã C·∫≠p nh·∫≠t b·∫£ng KPI: Tr∆∞·ªüng ph√≤ng KTNV CNL2 -> Tr∆∞·ªüng ph√≤ng KTNQ CNL2");
                    }
                    else if (table.TableName == "Ph√≥ ph√≤ng KTNV CNL2")
                    {
                        table.TableName = "Ph√≥ ph√≤ng KTNQ CNL2";
                        table.TableType = KpiTableType.PhophongKtnqCnl2;
                        changed = true;
                        Console.WriteLine($"üìã C·∫≠p nh·∫≠t b·∫£ng KPI: Ph√≥ ph√≤ng KTNV CNL2 -> Ph√≥ ph√≤ng KTNQ CNL2");
                    }

                    // 6. Chu·∫©n h√≥a: ph·ª• tr√°ch Kinh t·∫ø trong Description -> Ph·ª• tr√°ch K·∫ø to√°n
                    if (table.Description?.Contains("ph·ª• tr√°ch Kinh t·∫ø") == true || table.Description?.Contains("Ph√≥ gi√°m ƒë·ªëc Chi nh√°nh lo·∫°i 2 ph·ª• tr√°ch Kinh t·∫ø") == true)
                    {
                        string oldDesc = table.Description;
                        table.Description = table.Description.Replace("ph·ª• tr√°ch Kinh t·∫ø", "Ph·ª• tr√°ch K·∫ø to√°n")
                                                          .Replace("Ph√≥ gi√°m ƒë·ªëc Chi nh√°nh lo·∫°i 2 ph·ª• tr√°ch Kinh t·∫ø", "Ph√≥ gi√°m ƒë·ªëc Chi nh√°nh lo·∫°i 2 Ph·ª• tr√°ch K·∫ø to√°n");
                        changed = true;
                        Console.WriteLine($"üìã C·∫≠p nh·∫≠t Description: '{oldDesc}' -> '{table.Description}'");
                    }

                    // Special cases
                    if (table.TableName == "TQ/HK/KTNB")
                    {
                        if (table.Description?.Contains("Th·ªß qu·ªπ/H·∫°ch ki·ªÉm/Kinh t·∫ø N·ªôi b·ªô") == true)
                        {
                            table.TableName = "TQ/HK/KTNQ";
                            table.Description = table.Description.Replace("Th·ªß qu·ªπ/H·∫°ch ki·ªÉm/Kinh t·∫ø N·ªôi b·ªô", "Th·ªß qu·ªπ/H·∫≠u ki·ªÉm/K·∫ø to√°n N·ªôi b·ªô");
                            changed = true;
                            Console.WriteLine($"üìã C·∫≠p nh·∫≠t ƒë·∫∑c bi·ªát: TQ/HK/KTNB -> TQ/HK/KTNQ");
                        }
                    }

                    if (changed)
                    {
                        changesCount++;
                    }
                }

                if (changesCount > 0)
                {
                    Console.WriteLine($"‚úÖ ƒê√£ chu·∫©n h√≥a terminology cho {changesCount} b·∫£ng KPI");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå L·ªói khi chu·∫©n h√≥a terminology cho b·∫£ng KPI: {ex.Message}");
            }
        }

        private static void UpdateIndicatorTerminology(ApplicationDbContext context)
        {
            try
            {
                var indicators = context.KpiIndicators
                    .Where(i => i.IndicatorName.Contains("Kinh t·∫ø N·ªôi v·ª•") ||
                           i.IndicatorName.Contains("H·∫°ch ki·ªÉm") ||
                           i.IndicatorName.Contains("ph·ª• tr√°ch Kinh t·∫ø"))
                    .ToList();

                if (indicators.Count == 0)
                {
                    Console.WriteLine("‚úÖ Kh√¥ng c√≥ indicators c·∫ßn c·∫≠p nh·∫≠t terminology");
                    return;
                }

                int changesCount = 0;
                foreach (var indicator in indicators)
                {
                    bool changed = false;
                    string oldName = indicator.IndicatorName;

                    // Chu·∫©n h√≥a: Kinh t·∫ø N·ªôi v·ª• -> K·∫ø to√°n & Ng√¢n qu·ªπ trong indicator names
                    if (indicator.IndicatorName.Contains("Kinh t·∫ø N·ªôi v·ª•"))
                    {
                        indicator.IndicatorName = indicator.IndicatorName.Replace("Kinh t·∫ø N·ªôi v·ª•", "K·∫ø to√°n & Ng√¢n qu·ªπ");
                        changed = true;
                    }

                    if (indicator.IndicatorName.Contains("H·∫°ch ki·ªÉm"))
                    {
                        indicator.IndicatorName = indicator.IndicatorName.Replace("H·∫°ch ki·ªÉm", "H·∫≠u ki·ªÉm");
                        changed = true;
                    }

                    if (indicator.IndicatorName.Contains("ph·ª• tr√°ch Kinh t·∫ø"))
                    {
                        indicator.IndicatorName = indicator.IndicatorName.Replace("ph·ª• tr√°ch Kinh t·∫ø", "Ph·ª• tr√°ch K·∫ø to√°n");
                        changed = true;
                    }

                    if (changed)
                    {
                        changesCount++;
                        Console.WriteLine($"üìä C·∫≠p nh·∫≠t Indicator: '{oldName}' -> '{indicator.IndicatorName}'");
                    }
                }

                if (changesCount > 0)
                {
                    Console.WriteLine($"‚úÖ ƒê√£ chu·∫©n h√≥a terminology cho {changesCount} indicators");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå L·ªói khi chu·∫©n h√≥a terminology cho indicators: {ex.Message}");
            }
        }
    }
}
