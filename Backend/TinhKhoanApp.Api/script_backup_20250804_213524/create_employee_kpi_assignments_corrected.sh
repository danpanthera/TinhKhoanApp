#!/bin/bash

# =============================================================================
# T·∫†O EMPLOYEE KPI ASSIGNMENTS - CORRECT SCHEMA VERSION
# Giao kho√°n KPI cho employees v·ªõi ƒë√∫ng column names
# =============================================================================

echo "üöÄ B·∫ÆT ƒê·∫¶U T·∫†O EMPLOYEE KPI ASSIGNMENTS (CORRECTED)..."

# Database connection
SERVER="localhost,1433"
DATABASE="TinhKhoanDB"
USERNAME="sa"
PASSWORD="YourStrong@Password123"

# 1. Ki·ªÉm tra role name mapping
echo "üìä 1. KI·ªÇM TRA ROLE NAME MAPPING..."

sqlcmd -S $SERVER -d $DATABASE -U $USERNAME -P $PASSWORD -C -Q "
-- Ki·ªÉm tra mapping gi·ªØa roles v√† KpiAssignmentTables
SELECT
    r.Id as RoleId,
    r.Name as RoleName,
    kat.Id as TableId,
    kat.TableName,
    kat.Category,
    ki.IndicatorName
FROM Roles r
LEFT JOIN KpiAssignmentTables kat ON r.Name = kat.TableName
LEFT JOIN KpiIndicators ki ON kat.Id = ki.TableId
WHERE kat.Category = 'EMPLOYEE'
ORDER BY r.Id;
"

# 2. T·∫°o EmployeeKpiAssignments v·ªõi correct column names
echo "üéØ 2. T·∫†O EMPLOYEE KPI ASSIGNMENTS..."

sqlcmd -S $SERVER -d $DATABASE -U $USERNAME -P $PASSWORD -C -Q "
-- T·∫°o EmployeeKpiAssignments cho employees c√≥ role matching v·ªõi KpiAssignmentTables
INSERT INTO EmployeeKpiAssignments (EmployeeId, KpiIndicatorId, KhoanPeriodId, TargetValue, ActualValue, Status, AssignedAt, UpdatedAt)
SELECT
    e.Id as EmployeeId,
    ki.Id as KpiIndicatorId,
    kp.Id as KhoanPeriodId,
    1000.00 as TargetValue,  -- Default target value
    0.00 as ActualValue,     -- Starting actual value
    'Active' as Status,
    GETDATE() as AssignedAt,
    GETDATE() as UpdatedAt
FROM Employees e
INNER JOIN EmployeeRoles er ON e.Id = er.EmployeeId
INNER JOIN Roles r ON er.RoleId = r.Id
INNER JOIN KpiAssignmentTables kat ON r.Name = kat.TableName  -- Match role name v·ªõi table name
INNER JOIN KpiIndicators ki ON kat.Id = ki.TableId
CROSS JOIN (SELECT TOP 1 Id FROM KhoanPeriods WHERE YEAR(StartDate) = 2025 ORDER BY StartDate) kp
WHERE kat.Category = 'EMPLOYEE'  -- Ch·ªâ employee assignments
AND NOT EXISTS (
    SELECT 1 FROM EmployeeKpiAssignments eka
    WHERE eka.EmployeeId = e.Id AND eka.KpiIndicatorId = ki.Id AND eka.KhoanPeriodId = kp.Id
);

-- B√°o c√°o k·∫øt qu·∫£
SELECT 'EmployeeKpiAssignments created: ' + CAST(@@ROWCOUNT as VARCHAR(10)) as Result;
"

# 3. Verification v√† b√°o c√°o chi ti·∫øt
echo "‚úÖ 3. VERIFICATION V√Ä B√ÅO C√ÅO..."

sqlcmd -S $SERVER -d $DATABASE -U $USERNAME -P $PASSWORD -C -Q "
-- Th·ªëng k√™ assignments ƒë√£ t·∫°o
SELECT
    COUNT(*) as TotalAssignments,
    COUNT(DISTINCT EmployeeId) as UniqueEmployees,
    COUNT(DISTINCT KpiIndicatorId) as UniqueKpiIndicators,
    COUNT(DISTINCT KhoanPeriodId) as UniquePeriods
FROM EmployeeKpiAssignments;

-- Chi ti·∫øt assignments theo employee
SELECT
    e.FullName,
    r.Name as RoleName,
    COUNT(eka.Id) as AssignmentCount,
    STRING_AGG(ki.IndicatorName, '; ') as KpiIndicators
FROM Employees e
INNER JOIN EmployeeRoles er ON e.Id = er.EmployeeId
INNER JOIN Roles r ON er.RoleId = r.Id
LEFT JOIN KpiAssignmentTables kat ON r.Name = kat.TableName
LEFT JOIN KpiIndicators ki ON kat.Id = ki.TableId
LEFT JOIN EmployeeKpiAssignments eka ON e.Id = eka.EmployeeId AND ki.Id = eka.KpiIndicatorId
WHERE kat.Category = 'EMPLOYEE' OR kat.Category IS NULL
GROUP BY e.Id, e.FullName, r.Name
ORDER BY e.FullName;
"

# 4. Test API endpoints
echo "üîó 4. TESTING API ENDPOINTS..."

echo "Testing EmployeeKpiAssignment count..."
curl -s "http://localhost:5055/api/EmployeeKpiAssignment" | jq 'length // "Error occurred"'

echo ""
echo "‚úÖ HO√ÄN TH√ÄNH T·∫†O EMPLOYEE KPI ASSIGNMENTS!"
echo "üìä T·ªïng assignments: $(sqlcmd -S $SERVER -d $DATABASE -U $USERNAME -P $PASSWORD -C -h -1 -Q "SELECT COUNT(*) FROM EmployeeKpiAssignments")"
