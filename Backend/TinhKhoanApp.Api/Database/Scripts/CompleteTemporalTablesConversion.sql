-- üöÄ SCRIPT CHUY·ªÇN ƒê·ªîI HO√ÄN CH·ªàNH 100% SANG TEMPORAL TABLES + COLUMNSTORE INDEXES
-- Author: AI Assistant - Ng√†y: 22/06/2025
-- M·ª•c ti√™u: Chuy·ªÉn ƒë·ªïi t·∫•t c·∫£ c√°c b·∫£ng c√≤n l·∫°i th√†nh Temporal Tables v·ªõi Columnstore Indexes

USE TinhKhoanDB;
GO

-- ================================
-- B∆Ø·ªöC 1: KH·ªûI T·∫†O VARIABLES
-- ================================
DECLARE @sql NVARCHAR(MAX) = ''
DECLARE @tableName NVARCHAR(128)
DECLARE @historyTableName NVARCHAR(128)

PRINT 'üöÄ B·∫ÆTƒê·∫¶U CHUY·ªÇN ƒê·ªîI 100% SANG TEMPORAL TABLES + COLUMNSTORE'
PRINT '================================================================='
PRINT CONVERT(VARCHAR, GETDATE(), 120) + ' - Kh·ªüi t·∫°o script chuy·ªÉn ƒë·ªïi'

-- ================================
-- B∆Ø·ªöC 2: CHUY·ªÇN ƒê·ªîI C√ÅC B·∫¢NG CORE SYSTEM
-- ================================

-- üìã TABLE: Units (ƒê∆°n v·ªã)
IF NOT EXISTS (SELECT * FROM sys.tables WHERE name = 'Units' AND temporal_type = 2)
BEGIN
    PRINT 'üîÑ Chuy·ªÉn ƒë·ªïi b·∫£ng Units th√†nh Temporal Table...'
    
    -- Th√™m c·ªôt period n·∫øu ch∆∞a c√≥
    IF NOT EXISTS (SELECT * FROM sys.columns WHERE object_id = OBJECT_ID('Units') AND name = 'ValidFrom')
    BEGIN
        ALTER TABLE Units ADD 
            ValidFrom DATETIME2 GENERATED ALWAYS AS ROW START HIDDEN NOT NULL DEFAULT SYSUTCDATETIME(),
            ValidTo DATETIME2 GENERATED ALWAYS AS ROW END HIDDEN NOT NULL DEFAULT CONVERT(DATETIME2, '9999-12-31 23:59:59.9999999'),
            PERIOD FOR SYSTEM_TIME (ValidFrom, ValidTo)
    END
    
    -- K√≠ch ho·∫°t Temporal Table
    ALTER TABLE Units SET (SYSTEM_VERSIONING = ON (HISTORY_TABLE = dbo.UnitsHistory))
    
    -- T·∫°o Columnstore Index cho history table
    IF EXISTS (SELECT * FROM sys.tables WHERE name = 'UnitsHistory')
    BEGIN
        CREATE CLUSTERED COLUMNSTORE INDEX CCI_UnitsHistory ON dbo.UnitsHistory
    END
    
    PRINT '‚úÖ Units chuy·ªÉn ƒë·ªïi th√†nh c√¥ng!'
END
ELSE
    PRINT '‚ÑπÔ∏è Units ƒë√£ l√† Temporal Table'

-- üìã TABLE: Positions (Ch·ª©c v·ª•)
IF NOT EXISTS (SELECT * FROM sys.tables WHERE name = 'Positions' AND temporal_type = 2)
BEGIN
    PRINT 'üîÑ Chuy·ªÉn ƒë·ªïi b·∫£ng Positions th√†nh Temporal Table...'
    
    IF NOT EXISTS (SELECT * FROM sys.columns WHERE object_id = OBJECT_ID('Positions') AND name = 'ValidFrom')
    BEGIN
        ALTER TABLE Positions ADD 
            ValidFrom DATETIME2 GENERATED ALWAYS AS ROW START HIDDEN NOT NULL DEFAULT SYSUTCDATETIME(),
            ValidTo DATETIME2 GENERATED ALWAYS AS ROW END HIDDEN NOT NULL DEFAULT CONVERT(DATETIME2, '9999-12-31 23:59:59.9999999'),
            PERIOD FOR SYSTEM_TIME (ValidFrom, ValidTo)
    END
    
    ALTER TABLE Positions SET (SYSTEM_VERSIONING = ON (HISTORY_TABLE = dbo.PositionsHistory))
    
    IF EXISTS (SELECT * FROM sys.tables WHERE name = 'PositionsHistory')
    BEGIN
        CREATE CLUSTERED COLUMNSTORE INDEX CCI_PositionsHistory ON dbo.PositionsHistory
    END
    
    PRINT '‚úÖ Positions chuy·ªÉn ƒë·ªïi th√†nh c√¥ng!'
END
ELSE
    PRINT '‚ÑπÔ∏è Positions ƒë√£ l√† Temporal Table'

-- üìã TABLE: Employees (Nh√¢n vi√™n)
IF NOT EXISTS (SELECT * FROM sys.tables WHERE name = 'Employees' AND temporal_type = 2)
BEGIN
    PRINT 'üîÑ Chuy·ªÉn ƒë·ªïi b·∫£ng Employees th√†nh Temporal Table...'
    
    IF NOT EXISTS (SELECT * FROM sys.columns WHERE object_id = OBJECT_ID('Employees') AND name = 'ValidFrom')
    BEGIN
        ALTER TABLE Employees ADD 
            ValidFrom DATETIME2 GENERATED ALWAYS AS ROW START HIDDEN NOT NULL DEFAULT SYSUTCDATETIME(),
            ValidTo DATETIME2 GENERATED ALWAYS AS ROW END HIDDEN NOT NULL DEFAULT CONVERT(DATETIME2, '9999-12-31 23:59:59.9999999'),
            PERIOD FOR SYSTEM_TIME (ValidFrom, ValidTo)
    END
    
    ALTER TABLE Employees SET (SYSTEM_VERSIONING = ON (HISTORY_TABLE = dbo.EmployeesHistory))
    
    IF EXISTS (SELECT * FROM sys.tables WHERE name = 'EmployeesHistory')
    BEGIN
        CREATE CLUSTERED COLUMNSTORE INDEX CCI_EmployeesHistory ON dbo.EmployeesHistory
    END
    
    PRINT '‚úÖ Employees chuy·ªÉn ƒë·ªïi th√†nh c√¥ng!'
END
ELSE
    PRINT '‚ÑπÔ∏è Employees ƒë√£ l√† Temporal Table'

-- üìã TABLE: Roles (Vai tr√≤)
IF NOT EXISTS (SELECT * FROM sys.tables WHERE name = 'Roles' AND temporal_type = 2)
BEGIN
    PRINT 'üîÑ Chuy·ªÉn ƒë·ªïi b·∫£ng Roles th√†nh Temporal Table...'
    
    IF NOT EXISTS (SELECT * FROM sys.columns WHERE object_id = OBJECT_ID('Roles') AND name = 'ValidFrom')
    BEGIN
        ALTER TABLE Roles ADD 
            ValidFrom DATETIME2 GENERATED ALWAYS AS ROW START HIDDEN NOT NULL DEFAULT SYSUTCDATETIME(),
            ValidTo DATETIME2 GENERATED ALWAYS AS ROW END HIDDEN NOT NULL DEFAULT CONVERT(DATETIME2, '9999-12-31 23:59:59.9999999'),
            PERIOD FOR SYSTEM_TIME (ValidFrom, ValidTo)
    END
    
    ALTER TABLE Roles SET (SYSTEM_VERSIONING = ON (HISTORY_TABLE = dbo.RolesHistory))
    
    IF EXISTS (SELECT * FROM sys.tables WHERE name = 'RolesHistory')
    BEGIN
        CREATE CLUSTERED COLUMNSTORE INDEX CCI_RolesHistory ON dbo.RolesHistory
    END
    
    PRINT '‚úÖ Roles chuy·ªÉn ƒë·ªïi th√†nh c√¥ng!'
END
ELSE
    PRINT '‚ÑπÔ∏è Roles ƒë√£ l√† Temporal Table'

-- ================================
-- B∆Ø·ªöC 3: CHUY·ªÇN ƒê·ªîI C√ÅC B·∫¢NG KPI SYSTEM
-- ================================

-- üìã TABLE: KPIDefinitions
IF NOT EXISTS (SELECT * FROM sys.tables WHERE name = 'KPIDefinitions' AND temporal_type = 2)
BEGIN
    PRINT 'üîÑ Chuy·ªÉn ƒë·ªïi b·∫£ng KPIDefinitions th√†nh Temporal Table...'
    
    IF NOT EXISTS (SELECT * FROM sys.columns WHERE object_id = OBJECT_ID('KPIDefinitions') AND name = 'ValidFrom')
    BEGIN
        ALTER TABLE KPIDefinitions ADD 
            ValidFrom DATETIME2 GENERATED ALWAYS AS ROW START HIDDEN NOT NULL DEFAULT SYSUTCDATETIME(),
            ValidTo DATETIME2 GENERATED ALWAYS AS ROW END HIDDEN NOT NULL DEFAULT CONVERT(DATETIME2, '9999-12-31 23:59:59.9999999'),
            PERIOD FOR SYSTEM_TIME (ValidFrom, ValidTo)
    END
    
    ALTER TABLE KPIDefinitions SET (SYSTEM_VERSIONING = ON (HISTORY_TABLE = dbo.KPIDefinitionsHistory))
    
    IF EXISTS (SELECT * FROM sys.tables WHERE name = 'KPIDefinitionsHistory')
    BEGIN
        CREATE CLUSTERED COLUMNSTORE INDEX CCI_KPIDefinitionsHistory ON dbo.KPIDefinitionsHistory
    END
    
    PRINT '‚úÖ KPIDefinitions chuy·ªÉn ƒë·ªïi th√†nh c√¥ng!'
END
ELSE
    PRINT '‚ÑπÔ∏è KPIDefinitions ƒë√£ l√† Temporal Table'

-- üìã TABLE: EmployeeKpiAssignments
IF NOT EXISTS (SELECT * FROM sys.tables WHERE name = 'EmployeeKpiAssignments' AND temporal_type = 2)
BEGIN
    PRINT 'üîÑ Chuy·ªÉn ƒë·ªïi b·∫£ng EmployeeKpiAssignments th√†nh Temporal Table...'
    
    IF NOT EXISTS (SELECT * FROM sys.columns WHERE object_id = OBJECT_ID('EmployeeKpiAssignments') AND name = 'ValidFrom')
    BEGIN
        ALTER TABLE EmployeeKpiAssignments ADD 
            ValidFrom DATETIME2 GENERATED ALWAYS AS ROW START HIDDEN NOT NULL DEFAULT SYSUTCDATETIME(),
            ValidTo DATETIME2 GENERATED ALWAYS AS ROW END HIDDEN NOT NULL DEFAULT CONVERT(DATETIME2, '9999-12-31 23:59:59.9999999'),
            PERIOD FOR SYSTEM_TIME (ValidFrom, ValidTo)
    END
    
    ALTER TABLE EmployeeKpiAssignments SET (SYSTEM_VERSIONING = ON (HISTORY_TABLE = dbo.EmployeeKpiAssignmentsHistory))
    
    IF EXISTS (SELECT * FROM sys.tables WHERE name = 'EmployeeKpiAssignmentsHistory')
    BEGIN
        CREATE CLUSTERED COLUMNSTORE INDEX CCI_EmployeeKpiAssignmentsHistory ON dbo.EmployeeKpiAssignmentsHistory
    END
    
    PRINT '‚úÖ EmployeeKpiAssignments chuy·ªÉn ƒë·ªïi th√†nh c√¥ng!'
END
ELSE
    PRINT '‚ÑπÔ∏è EmployeeKpiAssignments ƒë√£ l√† Temporal Table'

-- üìã TABLE: KpiScoringRules
IF NOT EXISTS (SELECT * FROM sys.tables WHERE name = 'KpiScoringRules' AND temporal_type = 2)
BEGIN
    PRINT 'üîÑ Chuy·ªÉn ƒë·ªïi b·∫£ng KpiScoringRules th√†nh Temporal Table...'
    
    IF NOT EXISTS (SELECT * FROM sys.columns WHERE object_id = OBJECT_ID('KpiScoringRules') AND name = 'ValidFrom')
    BEGIN
        ALTER TABLE KpiScoringRules ADD 
            ValidFrom DATETIME2 GENERATED ALWAYS AS ROW START HIDDEN NOT NULL DEFAULT SYSUTCDATETIME(),
            ValidTo DATETIME2 GENERATED ALWAYS AS ROW END HIDDEN NOT NULL DEFAULT CONVERT(DATETIME2, '9999-12-31 23:59:59.9999999'),
            PERIOD FOR SYSTEM_TIME (ValidFrom, ValidTo)
    END
    
    ALTER TABLE KpiScoringRules SET (SYSTEM_VERSIONING = ON (HISTORY_TABLE = dbo.KpiScoringRulesHistory))
    
    IF EXISTS (SELECT * FROM sys.tables WHERE name = 'KpiScoringRulesHistory')
    BEGIN
        CREATE CLUSTERED COLUMNSTORE INDEX CCI_KpiScoringRulesHistory ON dbo.KpiScoringRulesHistory
    END
    
    PRINT '‚úÖ KpiScoringRules chuy·ªÉn ƒë·ªïi th√†nh c√¥ng!'
END
ELSE
    PRINT '‚ÑπÔ∏è KpiScoringRules ƒë√£ l√† Temporal Table'

-- ================================
-- B∆Ø·ªöC 4: CHUY·ªÇN ƒê·ªîI C√ÅC B·∫¢NG FINANCIAL SYSTEM
-- ================================

-- üìã TABLE: SalaryParameters
IF NOT EXISTS (SELECT * FROM sys.tables WHERE name = 'SalaryParameters' AND temporal_type = 2)
BEGIN
    PRINT 'üîÑ Chuy·ªÉn ƒë·ªïi b·∫£ng SalaryParameters th√†nh Temporal Table...'
    
    IF NOT EXISTS (SELECT * FROM sys.columns WHERE object_id = OBJECT_ID('SalaryParameters') AND name = 'ValidFrom')
    BEGIN
        ALTER TABLE SalaryParameters ADD 
            ValidFrom DATETIME2 GENERATED ALWAYS AS ROW START HIDDEN NOT NULL DEFAULT SYSUTCDATETIME(),
            ValidTo DATETIME2 GENERATED ALWAYS AS ROW END HIDDEN NOT NULL DEFAULT CONVERT(DATETIME2, '9999-12-31 23:59:59.9999999'),
            PERIOD FOR SYSTEM_TIME (ValidFrom, ValidTo)
    END
    
    ALTER TABLE SalaryParameters SET (SYSTEM_VERSIONING = ON (HISTORY_TABLE = dbo.SalaryParametersHistory))
    
    IF EXISTS (SELECT * FROM sys.tables WHERE name = 'SalaryParametersHistory')
    BEGIN
        CREATE CLUSTERED COLUMNSTORE INDEX CCI_SalaryParametersHistory ON dbo.SalaryParametersHistory
    END
    
    PRINT '‚úÖ SalaryParameters chuy·ªÉn ƒë·ªïi th√†nh c√¥ng!'
END
ELSE
    PRINT '‚ÑπÔ∏è SalaryParameters ƒë√£ l√† Temporal Table'

-- üìã TABLE: FinalPayouts
IF NOT EXISTS (SELECT * FROM sys.tables WHERE name = 'FinalPayouts' AND temporal_type = 2)
BEGIN
    PRINT 'üîÑ Chuy·ªÉn ƒë·ªïi b·∫£ng FinalPayouts th√†nh Temporal Table...'
    
    IF NOT EXISTS (SELECT * FROM sys.columns WHERE object_id = OBJECT_ID('FinalPayouts') AND name = 'ValidFrom')
    BEGIN
        ALTER TABLE FinalPayouts ADD 
            ValidFrom DATETIME2 GENERATED ALWAYS AS ROW START HIDDEN NOT NULL DEFAULT SYSUTCDATETIME(),
            ValidTo DATETIME2 GENERATED ALWAYS AS ROW END HIDDEN NOT NULL DEFAULT CONVERT(DATETIME2, '9999-12-31 23:59:59.9999999'),
            PERIOD FOR SYSTEM_TIME (ValidFrom, ValidTo)
    END
    
    ALTER TABLE FinalPayouts SET (SYSTEM_VERSIONING = ON (HISTORY_TABLE = dbo.FinalPayoutsHistory))
    
    IF EXISTS (SELECT * FROM sys.tables WHERE name = 'FinalPayoutsHistory')
    BEGIN
        CREATE CLUSTERED COLUMNSTORE INDEX CCI_FinalPayoutsHistory ON dbo.FinalPayoutsHistory
    END
    
    PRINT '‚úÖ FinalPayouts chuy·ªÉn ƒë·ªïi th√†nh c√¥ng!'
END
ELSE
    PRINT '‚ÑπÔ∏è FinalPayouts ƒë√£ l√† Temporal Table'

-- ================================
-- B∆Ø·ªöC 5: CHUY·ªÇN ƒê·ªîI C√ÅC B·∫¢NG ASSIGNMENT SYSTEM
-- ================================

-- üìã TABLE: KhoanPeriods
IF NOT EXISTS (SELECT * FROM sys.tables WHERE name = 'KhoanPeriods' AND temporal_type = 2)
BEGIN
    PRINT 'üîÑ Chuy·ªÉn ƒë·ªïi b·∫£ng KhoanPeriods th√†nh Temporal Table...'
    
    IF NOT EXISTS (SELECT * FROM sys.columns WHERE object_id = OBJECT_ID('KhoanPeriods') AND name = 'ValidFrom')
    BEGIN
        ALTER TABLE KhoanPeriods ADD 
            ValidFrom DATETIME2 GENERATED ALWAYS AS ROW START HIDDEN NOT NULL DEFAULT SYSUTCDATETIME(),
            ValidTo DATETIME2 GENERATED ALWAYS AS ROW END HIDDEN NOT NULL DEFAULT CONVERT(DATETIME2, '9999-12-31 23:59:59.9999999'),
            PERIOD FOR SYSTEM_TIME (ValidFrom, ValidTo)
    END
    
    ALTER TABLE KhoanPeriods SET (SYSTEM_VERSIONING = ON (HISTORY_TABLE = dbo.KhoanPeriodsHistory))
    
    IF EXISTS (SELECT * FROM sys.tables WHERE name = 'KhoanPeriodsHistory')
    BEGIN
        CREATE CLUSTERED COLUMNSTORE INDEX CCI_KhoanPeriodsHistory ON dbo.KhoanPeriodsHistory
    END
    
    PRINT '‚úÖ KhoanPeriods chuy·ªÉn ƒë·ªïi th√†nh c√¥ng!'
END
ELSE
    PRINT '‚ÑπÔ∏è KhoanPeriods ƒë√£ l√† Temporal Table'

-- üìã TABLE: EmployeeKhoanAssignments
IF NOT EXISTS (SELECT * FROM sys.tables WHERE name = 'EmployeeKhoanAssignments' AND temporal_type = 2)
BEGIN
    PRINT 'üîÑ Chuy·ªÉn ƒë·ªïi b·∫£ng EmployeeKhoanAssignments th√†nh Temporal Table...'
    
    IF NOT EXISTS (SELECT * FROM sys.columns WHERE object_id = OBJECT_ID('EmployeeKhoanAssignments') AND name = 'ValidFrom')
    BEGIN
        ALTER TABLE EmployeeKhoanAssignments ADD 
            ValidFrom DATETIME2 GENERATED ALWAYS AS ROW START HIDDEN NOT NULL DEFAULT SYSUTCDATETIME(),
            ValidTo DATETIME2 GENERATED ALWAYS AS ROW END HIDDEN NOT NULL DEFAULT CONVERT(DATETIME2, '9999-12-31 23:59:59.9999999'),
            PERIOD FOR SYSTEM_TIME (ValidFrom, ValidTo)
    END
    
    ALTER TABLE EmployeeKhoanAssignments SET (SYSTEM_VERSIONING = ON (HISTORY_TABLE = dbo.EmployeeKhoanAssignmentsHistory))
    
    IF EXISTS (SELECT * FROM sys.tables WHERE name = 'EmployeeKhoanAssignmentsHistory')
    BEGIN
        CREATE CLUSTERED COLUMNSTORE INDEX CCI_EmployeeKhoanAssignmentsHistory ON dbo.EmployeeKhoanAssignmentsHistory
    END
    
    PRINT '‚úÖ EmployeeKhoanAssignments chuy·ªÉn ƒë·ªïi th√†nh c√¥ng!'
END
ELSE
    PRINT '‚ÑπÔ∏è EmployeeKhoanAssignments ƒë√£ l√† Temporal Table'

-- ================================
-- B∆Ø·ªöC 6: CHUY·ªÇN ƒê·ªîI C√ÅC B·∫¢NG DASHBOARD SYSTEM  
-- ================================

-- üìã TABLE: DashboardIndicators
IF NOT EXISTS (SELECT * FROM sys.tables WHERE name = 'DashboardIndicators' AND temporal_type = 2)
BEGIN
    PRINT 'üîÑ Chuy·ªÉn ƒë·ªïi b·∫£ng DashboardIndicators th√†nh Temporal Table...'
    
    IF NOT EXISTS (SELECT * FROM sys.columns WHERE object_id = OBJECT_ID('DashboardIndicators') AND name = 'ValidFrom')
    BEGIN
        ALTER TABLE DashboardIndicators ADD 
            ValidFrom DATETIME2 GENERATED ALWAYS AS ROW START HIDDEN NOT NULL DEFAULT SYSUTCDATETIME(),
            ValidTo DATETIME2 GENERATED ALWAYS AS ROW END HIDDEN NOT NULL DEFAULT CONVERT(DATETIME2, '9999-12-31 23:59:59.9999999'),
            PERIOD FOR SYSTEM_TIME (ValidFrom, ValidTo)
    END
    
    ALTER TABLE DashboardIndicators SET (SYSTEM_VERSIONING = ON (HISTORY_TABLE = dbo.DashboardIndicatorsHistory))
    
    IF EXISTS (SELECT * FROM sys.tables WHERE name = 'DashboardIndicatorsHistory')
    BEGIN
        CREATE CLUSTERED COLUMNSTORE INDEX CCI_DashboardIndicatorsHistory ON dbo.DashboardIndicatorsHistory
    END
    
    PRINT '‚úÖ DashboardIndicators chuy·ªÉn ƒë·ªïi th√†nh c√¥ng!'
END
ELSE
    PRINT '‚ÑπÔ∏è DashboardIndicators ƒë√£ l√† Temporal Table'

-- üìã TABLE: BusinessPlanTargets
IF NOT EXISTS (SELECT * FROM sys.tables WHERE name = 'BusinessPlanTargets' AND temporal_type = 2)
BEGIN
    PRINT 'üîÑ Chuy·ªÉn ƒë·ªïi b·∫£ng BusinessPlanTargets th√†nh Temporal Table...'
    
    IF NOT EXISTS (SELECT * FROM sys.columns WHERE object_id = OBJECT_ID('BusinessPlanTargets') AND name = 'ValidFrom')
    BEGIN
        ALTER TABLE BusinessPlanTargets ADD 
            ValidFrom DATETIME2 GENERATED ALWAYS AS ROW START HIDDEN NOT NULL DEFAULT SYSUTCDATETIME(),
            ValidTo DATETIME2 GENERATED ALWAYS AS ROW END HIDDEN NOT NULL DEFAULT CONVERT(DATETIME2, '9999-12-31 23:59:59.9999999'),
            PERIOD FOR SYSTEM_TIME (ValidFrom, ValidTo)
    END
    
    ALTER TABLE BusinessPlanTargets SET (SYSTEM_VERSIONING = ON (HISTORY_TABLE = dbo.BusinessPlanTargetsHistory))
    
    IF EXISTS (SELECT * FROM sys.tables WHERE name = 'BusinessPlanTargetsHistory')
    BEGIN
        CREATE CLUSTERED COLUMNSTORE INDEX CCI_BusinessPlanTargetsHistory ON dbo.BusinessPlanTargetsHistory
    END
    
    PRINT '‚úÖ BusinessPlanTargets chuy·ªÉn ƒë·ªïi th√†nh c√¥ng!'
END
ELSE
    PRINT '‚ÑπÔ∏è BusinessPlanTargets ƒë√£ l√† Temporal Table'

-- üìã TABLE: DashboardCalculations
IF NOT EXISTS (SELECT * FROM sys.tables WHERE name = 'DashboardCalculations' AND temporal_type = 2)
BEGIN
    PRINT 'üîÑ Chuy·ªÉn ƒë·ªïi b·∫£ng DashboardCalculations th√†nh Temporal Table...'
    
    IF NOT EXISTS (SELECT * FROM sys.columns WHERE object_id = OBJECT_ID('DashboardCalculations') AND name = 'ValidFrom')
    BEGIN
        ALTER TABLE DashboardCalculations ADD 
            ValidFrom DATETIME2 GENERATED ALWAYS AS ROW START HIDDEN NOT NULL DEFAULT SYSUTCDATETIME(),
            ValidTo DATETIME2 GENERATED ALWAYS AS ROW END HIDDEN NOT NULL DEFAULT CONVERT(DATETIME2, '9999-12-31 23:59:59.9999999'),
            PERIOD FOR SYSTEM_TIME (ValidFrom, ValidTo)
    END
    
    ALTER TABLE DashboardCalculations SET (SYSTEM_VERSIONING = ON (HISTORY_TABLE = dbo.DashboardCalculationsHistory))
    
    IF EXISTS (SELECT * FROM sys.tables WHERE name = 'DashboardCalculationsHistory')
    BEGIN
        CREATE CLUSTERED COLUMNSTORE INDEX CCI_DashboardCalculationsHistory ON dbo.DashboardCalculationsHistory
    END
    
    PRINT '‚úÖ DashboardCalculations chuy·ªÉn ƒë·ªïi th√†nh c√¥ng!'
END
ELSE
    PRINT '‚ÑπÔ∏è DashboardCalculations ƒë√£ l√† Temporal Table'

-- ================================
-- B∆Ø·ªöC 7: T·∫†O OPTIMIZED INDEXES CHO C√ÅC B·∫¢NG CH√çNH
-- ================================

PRINT 'üîß T·∫°o c√°c Optimized Indexes cho hi·ªáu su·∫•t truy v·∫•n...'

-- Index t·ªëi ∆∞u cho Employees
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE name = 'IX_Employees_UnitId_Active' AND object_id = OBJECT_ID('Employees'))
BEGIN
    CREATE NONCLUSTERED INDEX IX_Employees_UnitId_Active ON Employees (UnitId, IsActive) 
    INCLUDE (Id, FullName, EmployeeCode, PositionId)
    PRINT '‚úÖ T·∫°o index IX_Employees_UnitId_Active'
END

-- Index t·ªëi ∆∞u cho KPIDefinitions
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE name = 'IX_KPIDefinitions_Category_Active' AND object_id = OBJECT_ID('KPIDefinitions'))
BEGIN
    CREATE NONCLUSTERED INDEX IX_KPIDefinitions_Category_Active ON KPIDefinitions (Category, IsActive) 
    INCLUDE (Id, Name, Formula, Weight)
    PRINT '‚úÖ T·∫°o index IX_KPIDefinitions_Category_Active'
END

-- Index t·ªëi ∆∞u cho FinalPayouts theo th·ªùi gian
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE name = 'IX_FinalPayouts_Period_Employee' AND object_id = OBJECT_ID('FinalPayouts'))
BEGIN
    CREATE NONCLUSTERED INDEX IX_FinalPayouts_Period_Employee ON FinalPayouts (PeriodId, EmployeeId) 
    INCLUDE (TotalAmount, BonusAmount, DeductionAmount, NetAmount)
    PRINT '‚úÖ T·∫°o index IX_FinalPayouts_Period_Employee'
END

-- ================================
-- B∆Ø·ªöC 8: T·∫†O VIEWS T·ªêI ∆ØU CHO TEMPORAL DATA
-- ================================

PRINT 'üìä T·∫°o Views t·ªëi ∆∞u cho Temporal Data...'

-- View t·ªïng h·ª£p th√¥ng tin nh√¢n vi√™n v·ªõi l·ªãch s·ª≠
IF NOT EXISTS (SELECT * FROM sys.views WHERE name = 'vw_EmployeeHistoricalData')
BEGIN
    EXEC('
    CREATE VIEW vw_EmployeeHistoricalData AS
    SELECT 
        e.Id,
        e.FullName,
        e.EmployeeCode,
        u.Name AS UnitName,
        p.Name AS PositionName,
        e.ValidFrom,
        e.ValidTo,
        CASE WHEN e.ValidTo = ''9999-12-31 23:59:59.9999999'' THEN 1 ELSE 0 END AS IsCurrent
    FROM Employees FOR SYSTEM_TIME ALL e
    LEFT JOIN Units u ON e.UnitId = u.Id
    LEFT JOIN Positions p ON e.PositionId = p.Id
    ')
    PRINT '‚úÖ T·∫°o view vw_EmployeeHistoricalData'
END

-- View t·ªïng h·ª£p KPI v·ªõi l·ªãch s·ª≠ thay ƒë·ªïi
IF NOT EXISTS (SELECT * FROM sys.views WHERE name = 'vw_KPIDefinitionHistory')
BEGIN
    EXEC('
    CREATE VIEW vw_KPIDefinitionHistory AS
    SELECT 
        kd.Id,
        kd.Name,
        kd.Category,
        kd.Formula,
        kd.Weight,
        kd.IsActive,
        kd.ValidFrom,
        kd.ValidTo,
        CASE WHEN kd.ValidTo = ''9999-12-31 23:59:59.9999999'' THEN 1 ELSE 0 END AS IsCurrent
    FROM KPIDefinitions FOR SYSTEM_TIME ALL kd
    ')
    PRINT '‚úÖ T·∫°o view vw_KPIDefinitionHistory'
END

-- ================================
-- B∆Ø·ªöC 9: T·∫†O STORED PROCEDURES TEMPORAL QUERIES
-- ================================

PRINT '‚öôÔ∏è T·∫°o Stored Procedures cho Temporal Queries...'

-- SP ƒë·ªÉ l·∫•y l·ªãch s·ª≠ thay ƒë·ªïi c·ªßa nh√¢n vi√™n
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'sp_GetEmployeeHistory')
BEGIN
    EXEC('
    CREATE PROCEDURE sp_GetEmployeeHistory
        @EmployeeId INT,
        @FromDate DATETIME2 = NULL,
        @ToDate DATETIME2 = NULL
    AS
    BEGIN
        SET NOCOUNT ON;
        
        SELECT 
            e.Id,
            e.FullName,
            e.EmployeeCode,
            e.Email,
            u.Name AS UnitName,
            p.Name AS PositionName,
            e.ValidFrom,
            e.ValidTo,
            DATEDIFF(DAY, e.ValidFrom, ISNULL(e.ValidTo, GETDATE())) AS DaysInPosition
        FROM Employees FOR SYSTEM_TIME ALL e
        LEFT JOIN Units u ON e.UnitId = u.Id
        LEFT JOIN Positions p ON e.PositionId = p.Id
        WHERE e.Id = @EmployeeId
            AND (@FromDate IS NULL OR e.ValidFrom >= @FromDate)
            AND (@ToDate IS NULL OR e.ValidTo <= @ToDate)
        ORDER BY e.ValidFrom DESC
    END
    ')
    PRINT '‚úÖ T·∫°o SP sp_GetEmployeeHistory'
END

-- SP ƒë·ªÉ l·∫•y th·ªëng k√™ thay ƒë·ªïi KPI
IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'sp_GetKPIChangeStatistics')
BEGIN
    EXEC('
    CREATE PROCEDURE sp_GetKPIChangeStatistics
        @FromDate DATETIME2,
        @ToDate DATETIME2
    AS
    BEGIN
        SET NOCOUNT ON;
        
        SELECT 
            k.Category,
            COUNT(*) AS TotalChanges,
            COUNT(DISTINCT k.Id) AS UniqueKPIs,
            AVG(CAST(k.Weight AS FLOAT)) AS AvgWeight,
            MIN(k.ValidFrom) AS FirstChange,
            MAX(k.ValidFrom) AS LastChange
        FROM KPIDefinitions FOR SYSTEM_TIME ALL k
        WHERE k.ValidFrom BETWEEN @FromDate AND @ToDate
        GROUP BY k.Category
        ORDER BY TotalChanges DESC
    END
    ')
    PRINT '‚úÖ T·∫°o SP sp_GetKPIChangeStatistics'
END

-- ================================
-- B∆Ø·ªöC 10: B√ÅO C√ÅO K·∫æT QU·∫¢
-- ================================

PRINT 'üìä B√ÅO C√ÅO K·∫æT QU·∫¢ CHUY·ªÇN ƒê·ªîI'
PRINT '================================='

-- ƒê·∫øm s·ªë l∆∞·ª£ng Temporal Tables
DECLARE @TemporalTablesCount INT
SELECT @TemporalTablesCount = COUNT(*)
FROM sys.tables 
WHERE temporal_type = 2

PRINT 'T·ªïng s·ªë Temporal Tables: ' + CAST(@TemporalTablesCount AS VARCHAR(10))

-- Li·ªát k√™ t·∫•t c·∫£ Temporal Tables
PRINT 'Danh s√°ch c√°c Temporal Tables:'
DECLARE @TableList NVARCHAR(MAX) = ''
SELECT @TableList = @TableList + '‚úÖ ' + t.name + ' (History: ' + ISNULL(h.name, 'N/A') + ')' + CHAR(13)
FROM sys.tables t
LEFT JOIN sys.tables h ON t.history_table_id = h.object_id
WHERE t.temporal_type = 2

PRINT @TableList

-- Ki·ªÉm tra Columnstore Indexes
DECLARE @ColumnstoreCount INT
SELECT @ColumnstoreCount = COUNT(*)
FROM sys.indexes i
INNER JOIN sys.tables t ON i.object_id = t.object_id
WHERE i.type IN (5, 6) -- Columnstore indexes
AND t.name LIKE '%History'

PRINT 'T·ªïng s·ªë Columnstore Indexes tr√™n History Tables: ' + CAST(@ColumnstoreCount AS VARCHAR(10))

PRINT 'üéâ HO√ÄN TH√ÄNH CHUY·ªÇN ƒê·ªîI 100% SANG TEMPORAL TABLES!'
PRINT 'Th·ªùi gian ho√†n th√†nh: ' + CONVERT(VARCHAR, GETDATE(), 120)
PRINT '================================================================='
GO
