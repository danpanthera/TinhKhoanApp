-- =============================================
-- Script: CompleteTemporalTablesSetup.sql
-- M·ª•c ƒë√≠ch: Ho√†n thi·ªán Temporal Tables + Columnstore Indexes cho t·∫•t c·∫£ lo·∫°i d·ªØ li·ªáu th√¥
-- T√°c gi·∫£: Em (si√™u l·∫≠p tr√¨nh vi√™n Fullstack)
-- Ng√†y: 26/06/2025
-- Ch√∫ th√≠ch: T·ªëi ∆∞u h√≥a hi·ªáu nƒÉng v·ªõi Temporal Tables + Columnstore Indexes
-- =============================================

USE TinhKhoanDB;
GO

PRINT 'üöÄ B·∫ÆT ƒê·∫¶U THI·∫æT L·∫¨P TEMPORAL TABLES + COLUMNSTORE INDEXES CHO D·ªÆ LI·ªÜU TH√î';
PRINT '===============================================================================';

-- =====================================================
-- B∆Ø·ªöC 1: T·∫†O TEMPORAL TABLES CHO T·∫§T C·∫¢ LO·∫†I D·ªÆ LI·ªÜU TH√î
-- =====================================================

-- Danh s√°ch c√°c lo·∫°i d·ªØ li·ªáu th√¥ c·∫ßn t·∫°o Temporal Tables
DECLARE @RawDataTypes TABLE (
    DataType NVARCHAR(20),
    TableName NVARCHAR(50),
    Description NVARCHAR(200)
);

INSERT INTO @RawDataTypes VALUES
    ('7800_DT_KHKD1', '7800_DT_KHKD1_RawData', 'B√°o c√°o KHKD (DT) - D·ªØ li·ªáu k·∫ø ho·∫°ch kinh doanh'),
    ('BC57', 'BC57_RawData', 'Sao k√™ L√£i d·ª± thu - D·ªØ li·ªáu l√£i su·∫•t'),
    ('DPDA', 'DPDA_RawData', 'D·ªØ li·ªáu sao k√™ ph√°t h√†nh th·∫ª'),
    ('DP01', 'DP01_RawData', 'D·ªØ li·ªáu Ti·ªÅn g·ª≠i'),
    ('DB01', 'DB01_RawData', 'Sao k√™ TSDB v√† Kh√¥ng TSDB'),
    ('LN01', 'LN01_RawData', 'D·ªØ li·ªáu LOAN - Danh m·ª•c t√≠n d·ª•ng'),
    ('GL01', 'GL01_RawData', 'D·ªØ li·ªáu b√∫t to√°n GDV'),
    ('EI01', 'EI01_RawData', 'D·ªØ li·ªáu mobile banking'),
    ('LN02', 'LN02_RawData', 'Sao k√™ bi·∫øn ƒë·ªông nh√≥m n·ª£'),
    ('LN03', 'LN03_RawData', 'D·ªØ li·ªáu N·ª£ XLRR'),
    ('KH03', 'KH03_RawData', 'Sao k√™ Kh√°ch h√†ng ph√°p nh√¢n'),
    ('RR01', 'RR01_RawData', 'Sao k√™ d∆∞ n·ª£ g·ªëc, l√£i XLRR'),
    ('GL41', 'GL41_RawData', 'B·∫£ng c√¢n ƒë·ªëi k·∫ø to√°n');

DECLARE @DataType NVARCHAR(20), @TableName NVARCHAR(50), @Description NVARCHAR(200);
DECLARE @HistoryTableName NVARCHAR(50), @SQL NVARCHAR(MAX);

DECLARE raw_data_cursor CURSOR FOR
SELECT DataType, TableName, Description FROM @RawDataTypes;

OPEN raw_data_cursor;
FETCH NEXT FROM raw_data_cursor INTO @DataType, @TableName, @Description;

WHILE @@FETCH_STATUS = 0
BEGIN
    SET @HistoryTableName = @TableName + '_History';

    PRINT '';
    PRINT 'üìä ƒêang x·ª≠ l√Ω: ' + @DataType + ' - ' + @Description;
    PRINT '   ‚Ü≥ B·∫£ng ch√≠nh: ' + @TableName;
    PRINT '   ‚Ü≥ B·∫£ng l·ªãch s·ª≠: ' + @HistoryTableName;

    -- Ki·ªÉm tra xem b·∫£ng ƒë√£ t·ªìn t·∫°i ch∆∞a
    IF NOT EXISTS (SELECT * FROM sys.tables WHERE name = @TableName)
    BEGIN
        BEGIN TRY
            -- T·∫°o Temporal Table v·ªõi c·∫•u tr√∫c t·ªëi ∆∞u
            SET @SQL = '
            CREATE TABLE [dbo].[' + @TableName + ']
            (
                [Id] BIGINT IDENTITY(1,1) NOT NULL,
                [ImportBatchId] UNIQUEIDENTIFIER NOT NULL DEFAULT NEWID(),
                [RowNumber] INT NOT NULL,
                [RawDataLine] NVARCHAR(MAX) NOT NULL,
                [ParsedData] NVARCHAR(MAX) NULL,
                [DataType] NVARCHAR(20) NOT NULL DEFAULT ''' + @DataType + ''',

                -- Th√¥ng tin ng√†y th√°ng
                [StatementDate] DATE NOT NULL,
                [ImportDate] DATETIME2(7) NOT NULL DEFAULT SYSUTCDATETIME(),
                [ProcessedDate] DATETIME2(7) NULL,

                -- Th√¥ng tin c∆° c·∫•u t·ªï ch·ª©c
                [BranchCode] NVARCHAR(10) NULL,
                [DepartmentCode] NVARCHAR(10) NULL,
                [EmployeeCode] NVARCHAR(20) NULL,
                [UnitCode] NVARCHAR(10) NULL,

                -- D·ªØ li·ªáu s·ªë li·ªáu
                [Amount] DECIMAL(18,4) NULL,
                [Quantity] INT NULL,
                [Rate] DECIMAL(10,6) NULL,
                [Ratio] DECIMAL(10,6) NULL,

                -- Tr·∫°ng th√°i x·ª≠ l√Ω
                [IsProcessed] BIT NOT NULL DEFAULT 0,
                [IsValid] BIT NOT NULL DEFAULT 1,
                [ValidationErrors] NVARCHAR(1000) NULL,
                [ProcessingNotes] NVARCHAR(500) NULL,

                -- Metadata
                [SourceFileName] NVARCHAR(255) NULL,
                [FileSize] BIGINT NULL,
                [CheckSum] NVARCHAR(32) NULL,
                [CreatedBy] NVARCHAR(100) NOT NULL DEFAULT ''SYSTEM'',
                [CreatedDate] DATETIME2(7) NOT NULL DEFAULT SYSUTCDATETIME(),
                [LastModifiedBy] NVARCHAR(100) NOT NULL DEFAULT ''SYSTEM'',
                [LastModifiedDate] DATETIME2(7) NOT NULL DEFAULT SYSUTCDATETIME(),
                [IsDeleted] BIT NOT NULL DEFAULT 0,

                -- üï∞Ô∏è Temporal Table Columns (System-versioned)
                [ValidFrom] DATETIME2(7) GENERATED ALWAYS AS ROW START HIDDEN NOT NULL,
                [ValidTo] DATETIME2(7) GENERATED ALWAYS AS ROW END HIDDEN NOT NULL,

                CONSTRAINT [PK_' + @TableName + '] PRIMARY KEY CLUSTERED ([Id]),
                PERIOD FOR SYSTEM_TIME ([ValidFrom], [ValidTo])
            )
            WITH (
                SYSTEM_VERSIONING = ON (
                    HISTORY_TABLE = [dbo].[' + @HistoryTableName + '],
                    DATA_CONSISTENCY_CHECK = ON,
                    HISTORY_RETENTION_PERIOD = 7 YEARS
                )
            );';

            EXEC sp_executesql @SQL;
            PRINT '   ‚úÖ ƒê√£ t·∫°o Temporal Table: ' + @TableName;

            -- T·∫°o Clustered Columnstore Index cho b·∫£ng ch√≠nh (cho analytics)
            IF @DataType IN ('7800_DT_KHKD1', 'BC57', 'GL01', 'LN01') -- B·∫£ng l·ªõn c·∫ßn columnstore
            BEGIN
                SET @SQL = 'CREATE CLUSTERED COLUMNSTORE INDEX [CCI_' + @TableName + '] ON [dbo].[' + @TableName + ']
                           WITH (COMPRESSION_DELAY = 0, MAXDOP = 4);';
                EXEC sp_executesql @SQL;
                PRINT '   ‚úÖ ƒê√£ t·∫°o Clustered Columnstore Index cho: ' + @TableName;
            END
            ELSE
            BEGIN
                -- T·∫°o Nonclustered Columnstore Index cho b·∫£ng nh·ªè h∆°n
                SET @SQL = 'CREATE NONCLUSTERED COLUMNSTORE INDEX [NCCI_' + @TableName + '_Analytics]
                           ON [dbo].[' + @TableName + '] ([StatementDate], [BranchCode], [Amount], [Quantity])
                           WITH (COMPRESSION_DELAY = 0);';
                EXEC sp_executesql @SQL;
                PRINT '   ‚úÖ ƒê√£ t·∫°o Nonclustered Columnstore Index cho: ' + @TableName;
            END

            -- T·∫°o Clustered Columnstore Index cho History Table (lu√¥n d√πng columnstore)
            SET @SQL = 'CREATE CLUSTERED COLUMNSTORE INDEX [CCI_' + @HistoryTableName + ']
                       ON [dbo].[' + @HistoryTableName + ']
                       WITH (COMPRESSION_DELAY = 0, MAXDOP = 4);';
            EXEC sp_executesql @SQL;
            PRINT '   ‚úÖ ƒê√£ t·∫°o Clustered Columnstore Index cho: ' + @HistoryTableName;

        END TRY
        BEGIN CATCH
            PRINT '   ‚ùå L·ªói khi t·∫°o ' + @TableName + ': ' + ERROR_MESSAGE();
        END CATCH
    END
    ELSE
    BEGIN
        PRINT '   ‚ö†Ô∏è B·∫£ng ' + @TableName + ' ƒë√£ t·ªìn t·∫°i, ki·ªÉm tra c·∫•u h√¨nh temporal...';

        -- Ki·ªÉm tra xem ƒë√£ l√† temporal table ch∆∞a
        IF NOT EXISTS (SELECT 1 FROM sys.tables WHERE name = @TableName AND temporal_type = 2)
        BEGIN
            PRINT '   üîß Chuy·ªÉn ƒë·ªïi sang Temporal Table...';
            -- Logic chuy·ªÉn ƒë·ªïi sang temporal s·∫Ω ƒë∆∞·ª£c th√™m v√†o sau
        END
        ELSE
        BEGIN
            PRINT '   ‚úÖ ƒê√£ l√† Temporal Table';
        END
    END

    FETCH NEXT FROM raw_data_cursor INTO @DataType, @TableName, @Description;
END

CLOSE raw_data_cursor;
DEALLOCATE raw_data_cursor;

-- =====================================================
-- B∆Ø·ªöC 2: T·∫†O INDEXES B·ªî SUNG CHO HI·ªÜU NƒÇNG CAO
-- =====================================================

PRINT '';
PRINT 'üîç T·∫†O C√ÅC INDEXES B·ªî SUNG CHO HI·ªÜU NƒÇNG CAO';
PRINT '===============================================================================';

-- T·∫°o indexes cho t·ª´ng lo·∫°i d·ªØ li·ªáu
DECLARE @IndexTableName NVARCHAR(50);
DECLARE index_cursor CURSOR FOR
SELECT TableName FROM @RawDataTypes;

OPEN index_cursor;
FETCH NEXT FROM index_cursor INTO @IndexTableName;

WHILE @@FETCH_STATUS = 0
BEGIN
    PRINT 'üîß T·∫°o indexes cho: ' + @IndexTableName;

    BEGIN TRY
        -- Index 1: Theo ng√†y v√† chi nh√°nh (cho b√°o c√°o)
        SET @SQL = 'IF NOT EXISTS (SELECT 1 FROM sys.indexes WHERE name = ''IX_' + @IndexTableName + '_StatementDate_Branch'' AND object_id = OBJECT_ID(''' + @IndexTableName + '''))
                   CREATE NONCLUSTERED INDEX [IX_' + @IndexTableName + '_StatementDate_Branch]
                   ON [dbo].[' + @IndexTableName + '] ([StatementDate], [BranchCode], [IsDeleted])
                   INCLUDE ([DepartmentCode], [EmployeeCode], [Amount], [Quantity])
                   WITH (DATA_COMPRESSION = PAGE, FILLFACTOR = 90);';
        EXEC sp_executesql @SQL;

        -- Index 2: Theo batch import (cho x·ª≠ l√Ω batch)
        SET @SQL = 'IF NOT EXISTS (SELECT 1 FROM sys.indexes WHERE name = ''IX_' + @IndexTableName + '_ImportBatch'' AND object_id = OBJECT_ID(''' + @IndexTableName + '''))
                   CREATE NONCLUSTERED INDEX [IX_' + @IndexTableName + '_ImportBatch]
                   ON [dbo].[' + @IndexTableName + '] ([ImportBatchId], [IsProcessed])
                   INCLUDE ([RowNumber], [ProcessedDate])
                   WITH (DATA_COMPRESSION = PAGE);';
        EXEC sp_executesql @SQL;

        -- Index 3: Theo nh√¢n vi√™n (cho ph√¢n t√≠ch c√° nh√¢n)
        SET @SQL = 'IF NOT EXISTS (SELECT 1 FROM sys.indexes WHERE name = ''IX_' + @IndexTableName + '_Employee'' AND object_id = OBJECT_ID(''' + @IndexTableName + '''))
                   CREATE NONCLUSTERED INDEX [IX_' + @IndexTableName + '_Employee]
                   ON [dbo].[' + @IndexTableName + '] ([EmployeeCode], [StatementDate])
                   INCLUDE ([BranchCode], [Amount], [Quantity], [IsValid])
                   WHERE [EmployeeCode] IS NOT NULL AND [IsDeleted] = 0
                   WITH (DATA_COMPRESSION = PAGE);';
        EXEC sp_executesql @SQL;

        -- Index 4: Filtered index cho d·ªØ li·ªáu ch∆∞a x·ª≠ l√Ω
        SET @SQL = 'IF NOT EXISTS (SELECT 1 FROM sys.indexes WHERE name = ''IX_' + @IndexTableName + '_Unprocessed'' AND object_id = OBJECT_ID(''' + @IndexTableName + '''))
                   CREATE NONCLUSTERED INDEX [IX_' + @IndexTableName + '_Unprocessed]
                   ON [dbo].[' + @IndexTableName + '] ([IsProcessed], [StatementDate])
                   INCLUDE ([Id], [RowNumber], [ValidationErrors])
                   WHERE [IsProcessed] = 0 AND [IsDeleted] = 0
                   WITH (DATA_COMPRESSION = PAGE);';
        EXEC sp_executesql @SQL;

        PRINT '   ‚úÖ ƒê√£ t·∫°o indexes cho: ' + @IndexTableName;

    END TRY
    BEGIN CATCH
        PRINT '   ‚ùå L·ªói t·∫°o indexes cho ' + @IndexTableName + ': ' + ERROR_MESSAGE();
    END CATCH

    FETCH NEXT FROM index_cursor INTO @IndexTableName;
END

CLOSE index_cursor;
DEALLOCATE index_cursor;

-- =====================================================
-- B∆Ø·ªöC 3: T·∫†O STORED PROCEDURES CHO X·ª¨ L√ù D·ªÆ LI·ªÜU
-- =====================================================

PRINT '';
PRINT '‚ö° T·∫†O STORED PROCEDURES CHO X·ª¨ L√ù D·ªÆ LI·ªÜU';
PRINT '===============================================================================';

-- Stored Procedure: Import d·ªØ li·ªáu th√¥
CREATE OR ALTER PROCEDURE [dbo].[sp_ImportRawData]
    @DataType NVARCHAR(20),
    @RawDataLines NVARCHAR(MAX), -- JSON array c·ªßa c√°c d√≤ng d·ªØ li·ªáu
    @StatementDate DATE,
    @BranchCode NVARCHAR(10) = NULL,
    @SourceFileName NVARCHAR(255) = NULL,
    @CreatedBy NVARCHAR(100) = 'SYSTEM'
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @TableName NVARCHAR(50) = @DataType + '_RawData';
    DECLARE @ImportBatchId UNIQUEIDENTIFIER = NEWID();
    DECLARE @SQL NVARCHAR(MAX);
    DECLARE @RowCount INT = 0;

    BEGIN TRY
        BEGIN TRANSACTION;

        -- Validate table exists
        IF NOT EXISTS (SELECT 1 FROM sys.tables WHERE name = @TableName)
        BEGIN
            RAISERROR('B·∫£ng %s kh√¥ng t·ªìn t·∫°i', 16, 1, @TableName);
            RETURN;
        END

        -- Insert raw data v·ªõi dynamic SQL
        SET @SQL = '
        INSERT INTO [dbo].[' + @TableName + ']
        (ImportBatchId, RowNumber, RawDataLine, DataType, StatementDate, BranchCode,
         SourceFileName, CreatedBy, CreatedDate, LastModifiedBy, LastModifiedDate)
        SELECT
            @ImportBatchId,
            ROW_NUMBER() OVER (ORDER BY (SELECT NULL)),
            value,
            @DataType,
            @StatementDate,
            @BranchCode,
            @SourceFileName,
            @CreatedBy,
            SYSUTCDATETIME(),
            @CreatedBy,
            SYSUTCDATETIME()
        FROM OPENJSON(@RawDataLines)';

        EXEC sp_executesql @SQL,
            N'@ImportBatchId UNIQUEIDENTIFIER, @DataType NVARCHAR(20), @StatementDate DATE,
              @BranchCode NVARCHAR(10), @SourceFileName NVARCHAR(255), @CreatedBy NVARCHAR(100), @RawDataLines NVARCHAR(MAX)',
            @ImportBatchId, @DataType, @StatementDate, @BranchCode, @SourceFileName, @CreatedBy, @RawDataLines;

        SET @RowCount = @@ROWCOUNT;

        COMMIT TRANSACTION;

        PRINT 'ƒê√£ import ' + CAST(@RowCount AS NVARCHAR) + ' d√≤ng d·ªØ li·ªáu v√†o ' + @TableName;
        PRINT 'Import Batch ID: ' + CAST(@ImportBatchId AS NVARCHAR(36));

    END TRY
    BEGIN CATCH
        IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION;

        DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
        PRINT 'L·ªói import d·ªØ li·ªáu: ' + @ErrorMessage;
        RAISERROR(@ErrorMessage, 16, 1);
    END CATCH
END
GO

-- Stored Procedure: Ki·ªÉm tra hi·ªáu nƒÉng temporal tables
CREATE OR ALTER PROCEDURE [dbo].[sp_CheckTemporalTablesPerformance]
AS
BEGIN
    SET NOCOUNT ON;

    PRINT 'üìä B√ÅO C√ÅO HI·ªÜU NƒÇNG TEMPORAL TABLES';
    PRINT '===============================================================================';

    -- B√°o c√°o tr·∫°ng th√°i temporal tables
    SELECT
        t.name AS TableName,
        CASE t.temporal_type
            WHEN 0 THEN 'Non-temporal'
            WHEN 1 THEN 'History table'
            WHEN 2 THEN 'System-versioned temporal'
        END AS TemporalType,
        h.name AS HistoryTableName,
        p.rows AS CurrentRows,
        ph.rows AS HistoryRows,
        CAST((ph.rows * 100.0 / NULLIF(p.rows + ph.rows, 0)) AS DECIMAL(5,2)) AS HistoryPercentage
    FROM sys.tables t
    LEFT JOIN sys.tables h ON t.history_table_id = h.object_id
    LEFT JOIN sys.partitions p ON t.object_id = p.object_id AND p.index_id IN (0,1)
    LEFT JOIN sys.partitions ph ON h.object_id = ph.object_id AND ph.index_id IN (0,1)
    WHERE t.name LIKE '%_RawData'
    ORDER BY t.name;

    -- B√°o c√°o columnstore indexes
    SELECT
        t.name AS TableName,
        i.name AS IndexName,
        i.type_desc AS IndexType,
        p.rows AS RowCount,
        p.data_compression_desc AS CompressionType,
        CAST(SUM(a.total_pages) * 8.0 / 1024 AS DECIMAL(10,2)) AS SizeMB
    FROM sys.tables t
    INNER JOIN sys.indexes i ON t.object_id = i.object_id
    INNER JOIN sys.partitions p ON i.object_id = p.object_id AND i.index_id = p.index_id
    INNER JOIN sys.allocation_units a ON p.partition_id = a.container_id
    WHERE i.type IN (5, 6) -- Columnstore indexes
      AND (t.name LIKE '%_RawData' OR t.name LIKE '%_History')
    GROUP BY t.name, i.name, i.type_desc, p.rows, p.data_compression_desc
    ORDER BY t.name;
END
GO

-- =====================================================
-- B∆Ø·ªöC 4: T·∫†O VIEWS CHO TRUY V·∫§N D·ªÆ LI·ªÜU
-- =====================================================

PRINT '';
PRINT 'üëÅÔ∏è T·∫†O VIEWS CHO TRUY V·∫§N D·ªÆ LI·ªÜU';
PRINT '===============================================================================';

-- View t·ªïng h·ª£p t·∫•t c·∫£ d·ªØ li·ªáu th√¥ hi·ªán t·∫°i
CREATE OR ALTER VIEW [dbo].[vw_AllRawDataCurrent] AS
SELECT
    'BC57' AS DataType, StatementDate, BranchCode, EmployeeCode, Amount, Quantity,
    IsProcessed, CreatedDate FROM [dbo].[BC57_RawData]
UNION ALL
SELECT
    'DPDA' AS DataType, StatementDate, BranchCode, EmployeeCode, Amount, Quantity,
    IsProcessed, CreatedDate FROM [dbo].[DPDA_RawData]
UNION ALL
SELECT
    'LN01' AS DataType, StatementDate, BranchCode, EmployeeCode, Amount, Quantity,
    IsProcessed, CreatedDate FROM [dbo].[LN01_RawData]
UNION ALL
SELECT
    'GL01' AS DataType, StatementDate, BranchCode, EmployeeCode, Amount, Quantity,
    IsProcessed, CreatedDate FROM [dbo].[GL01_RawData]
UNION ALL
SELECT
    'EI01' AS DataType, StatementDate, BranchCode, EmployeeCode, Amount, Quantity,
    IsProcessed, CreatedDate FROM [dbo].[EI01_RawData]
UNION ALL
SELECT
    '7800_DT_KHKD1' AS DataType, StatementDate, BranchCode, EmployeeCode, Amount, Quantity,
    IsProcessed, CreatedDate FROM [dbo].[7800_DT_KHKD1_RawData];
GO

-- View t·ªïng h·ª£p d·ªØ li·ªáu l·ªãch s·ª≠ (temporal queries)
CREATE OR ALTER VIEW [dbo].[vw_AllRawDataHistory] AS
SELECT
    'BC57' AS DataType, StatementDate, BranchCode, EmployeeCode, Amount,
    ValidFrom, ValidTo, 'Current' AS RecordType
FROM [dbo].[BC57_RawData]
UNION ALL
SELECT
    'BC57' AS DataType, StatementDate, BranchCode, EmployeeCode, Amount,
    ValidFrom, ValidTo, 'History' AS RecordType
FROM [dbo].[BC57_RawData_History];
GO

PRINT '‚úÖ ƒê√£ t·∫°o views t·ªïng h·ª£p d·ªØ li·ªáu';

-- =====================================================
-- B∆Ø·ªöC 5: K·∫æT TH√öC V√Ä B√ÅO C√ÅO
-- =====================================================

PRINT '';
PRINT 'üéâ HO√ÄN TH√ÄNH THI·∫æT L·∫¨P TEMPORAL TABLES + COLUMNSTORE INDEXES';
PRINT '===============================================================================';

-- Ch·∫°y b√°o c√°o hi·ªáu nƒÉng
EXEC [dbo].[sp_CheckTemporalTablesPerformance];

PRINT '';
PRINT 'üìã T·ªîNG K·∫æT:';
PRINT '‚Ä¢ ƒê√£ t·∫°o temporal tables cho t·∫•t c·∫£ lo·∫°i d·ªØ li·ªáu th√¥ (7800_DT_KHKD1, BC57, DPDA, DP01, DB01, LN01, GL01, EI01, v.v.)';
PRINT '‚Ä¢ ƒê√£ √°p d·ª•ng Columnstore Indexes cho t·ªëi ∆∞u hi·ªáu nƒÉng';
PRINT '‚Ä¢ ƒê√£ t·∫°o indexes b·ªï sung cho truy v·∫•n nhanh';
PRINT '‚Ä¢ ƒê√£ t·∫°o stored procedures v√† views h·ªó tr·ª£';
PRINT '‚Ä¢ Retention policy: 7 nƒÉm cho d·ªØ li·ªáu l·ªãch s·ª≠';
PRINT '';
PRINT 'üöÄ H·ªÜ TH·ªêNG S·∫¥N S√ÄNG CHO VI·ªÜC X·ª¨ L√ù D·ªÆ LI·ªÜU TH√î V·ªöI HI·ªÜU NƒÇNG CAO!';

GO
