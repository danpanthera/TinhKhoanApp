-- =============================================
-- Script: FixExistingTemporalTables.sql
-- M·ª•c ƒë√≠ch: Ki·ªÉm tra v√† s·ª≠a ch·ªØa c√°c temporal tables hi·ªán c√≥
-- T√°c gi·∫£: Em (si√™u l·∫≠p tr√¨nh vi√™n Fullstack)
-- Ng√†y: 26/06/2025
-- Ch√∫ th√≠ch: ƒê·∫£m b·∫£o t·∫•t c·∫£ tables ƒë·ªÅu c√≥ temporal + columnstore
-- =============================================

USE TinhKhoanDB;
GO

PRINT 'üîß KI·ªÇM TRA V√Ä S·ª¨A CH·ªÆA TEMPORAL TABLES HI·ªÜN C√ì';
PRINT '===============================================================================';

-- =====================================================
-- B∆Ø·ªöC 1: KI·ªÇM TRA TR·∫†NG TH√ÅI C√ÅC B·∫¢NG HI·ªÜN T·∫†I
-- =====================================================

PRINT 'üìä Ki·ªÉm tra tr·∫°ng th√°i c√°c b·∫£ng hi·ªán t·∫°i...';

-- T·∫°o b·∫£ng t·∫°m ƒë·ªÉ l∆∞u k·∫øt qu·∫£ ki·ªÉm tra
IF OBJECT_ID('tempdb..#TableStatus') IS NOT NULL DROP TABLE #TableStatus;

CREATE TABLE #TableStatus (
    TableName NVARCHAR(128),
    IsTemporal BIT,
    HasColumnstore BIT,
    HistoryTableName NVARCHAR(128),
    RowCount BIGINT,
    Issues NVARCHAR(500),
    Priority INT
);

-- Ki·ªÉm tra c√°c b·∫£ng ch√≠nh
INSERT INTO #TableStatus (TableName, IsTemporal, HasColumnstore, HistoryTableName, RowCount, Issues, Priority)
SELECT 
    t.name AS TableName,
    CASE WHEN t.temporal_type = 2 THEN 1 ELSE 0 END AS IsTemporal,
    CASE WHEN EXISTS (
        SELECT 1 FROM sys.indexes i 
        WHERE i.object_id = t.object_id AND i.type IN (5,6)
    ) THEN 1 ELSE 0 END AS HasColumnstore,
    h.name AS HistoryTableName,
    ISNULL(p.rows, 0) AS RowCount,
    '' AS Issues,
    CASE 
        WHEN t.name LIKE 'ImportedData%' THEN 1  -- ∆Øu ti√™n cao nh·∫•t
        WHEN t.name LIKE '%RawData%' THEN 2      -- ∆Øu ti√™n cao
        WHEN t.name LIKE '%History' THEN 3      -- ∆Øu ti√™n th·∫•p (history tables)
        ELSE 4                                   -- C√°c b·∫£ng kh√°c
    END AS Priority
FROM sys.tables t
LEFT JOIN sys.tables h ON t.history_table_id = h.object_id
LEFT JOIN sys.partitions p ON t.object_id = p.object_id AND p.index_id IN (0,1)
WHERE t.name NOT LIKE '%_History%'  -- Lo·∫°i tr·ª´ history tables
ORDER BY Priority, t.name;

-- C·∫≠p nh·∫≠t th√¥ng tin issues
UPDATE #TableStatus 
SET Issues = CASE 
    WHEN IsTemporal = 0 AND HasColumnstore = 0 THEN 'Missing temporal + columnstore'
    WHEN IsTemporal = 0 THEN 'Missing temporal'
    WHEN HasColumnstore = 0 THEN 'Missing columnstore'
    ELSE 'OK'
END;

-- Hi·ªÉn th·ªã b√°o c√°o tr·∫°ng th√°i
SELECT 
    TableName,
    CASE WHEN IsTemporal = 1 THEN '‚úÖ' ELSE '‚ùå' END AS Temporal,
    CASE WHEN HasColumnstore = 1 THEN '‚úÖ' ELSE '‚ùå' END AS Columnstore,
    HistoryTableName,
    RowCount,
    Issues,
    Priority
FROM #TableStatus 
ORDER BY Priority, TableName;

-- =====================================================
-- B∆Ø·ªöC 2: S·ª¨A CH·ªÆA IMPORTEDDATARECORDS V√Ä IMPORTEDDATAITEMS
-- =====================================================

PRINT '';
PRINT 'üîß S·ª≠a ch·ªØa ImportedDataRecords v√† ImportedDataItems...';

-- Fix ImportedDataRecords
IF EXISTS (SELECT 1 FROM #TableStatus WHERE TableName = 'ImportedDataRecords' AND IsTemporal = 0)
BEGIN
    PRINT 'üîß Chuy·ªÉn ƒë·ªïi ImportedDataRecords sang Temporal Table...';
    
    BEGIN TRY
        -- Disable system versioning if exists
        IF EXISTS (SELECT 1 FROM sys.tables WHERE name = 'ImportedDataRecords' AND temporal_type = 2)
        BEGIN
            ALTER TABLE [ImportedDataRecords] SET (SYSTEM_VERSIONING = OFF);
        END
        
        -- Add temporal columns if not exists
        IF NOT EXISTS (SELECT 1 FROM sys.columns WHERE name = 'SysStartTime' AND object_id = OBJECT_ID('ImportedDataRecords'))
        BEGIN
            ALTER TABLE [ImportedDataRecords] ADD 
                [SysStartTime] DATETIME2 GENERATED ALWAYS AS ROW START HIDDEN NOT NULL DEFAULT SYSUTCDATETIME(),
                [SysEndTime] DATETIME2 GENERATED ALWAYS AS ROW END HIDDEN NOT NULL DEFAULT CONVERT(DATETIME2, '9999-12-31 23:59:59.9999999');
        END
        
        -- Add period if not exists
        IF NOT EXISTS (SELECT 1 FROM sys.periods WHERE object_id = OBJECT_ID('ImportedDataRecords'))
        BEGIN
            ALTER TABLE [ImportedDataRecords] 
            ADD PERIOD FOR SYSTEM_TIME ([SysStartTime], [SysEndTime]);
        END
        
        -- Enable system versioning
        ALTER TABLE [ImportedDataRecords] 
        SET (SYSTEM_VERSIONING = ON (HISTORY_TABLE = [dbo].[ImportedDataRecords_History]));
        
        PRINT '   ‚úÖ ImportedDataRecords ƒë√£ ƒë∆∞·ª£c chuy·ªÉn ƒë·ªïi sang Temporal Table';
        
    END TRY
    BEGIN CATCH
        PRINT '   ‚ùå L·ªói chuy·ªÉn ƒë·ªïi ImportedDataRecords: ' + ERROR_MESSAGE();
    END CATCH
END

-- Fix ImportedDataItems
IF EXISTS (SELECT 1 FROM #TableStatus WHERE TableName = 'ImportedDataItems' AND IsTemporal = 0)
BEGIN
    PRINT 'üîß Chuy·ªÉn ƒë·ªïi ImportedDataItems sang Temporal Table...';
    
    BEGIN TRY
        -- Disable system versioning if exists
        IF EXISTS (SELECT 1 FROM sys.tables WHERE name = 'ImportedDataItems' AND temporal_type = 2)
        BEGIN
            ALTER TABLE [ImportedDataItems] SET (SYSTEM_VERSIONING = OFF);
        END
        
        -- Add temporal columns if not exists
        IF NOT EXISTS (SELECT 1 FROM sys.columns WHERE name = 'SysStartTime' AND object_id = OBJECT_ID('ImportedDataItems'))
        BEGIN
            ALTER TABLE [ImportedDataItems] ADD 
                [SysStartTime] DATETIME2 GENERATED ALWAYS AS ROW START HIDDEN NOT NULL DEFAULT SYSUTCDATETIME(),
                [SysEndTime] DATETIME2 GENERATED ALWAYS AS ROW END HIDDEN NOT NULL DEFAULT CONVERT(DATETIME2, '9999-12-31 23:59:59.9999999');
        END
        
        -- Add period if not exists
        IF NOT EXISTS (SELECT 1 FROM sys.periods WHERE object_id = OBJECT_ID('ImportedDataItems'))
        BEGIN
            ALTER TABLE [ImportedDataItems] 
            ADD PERIOD FOR SYSTEM_TIME ([SysStartTime], [SysEndTime]);
        END
        
        -- Enable system versioning
        ALTER TABLE [ImportedDataItems] 
        SET (SYSTEM_VERSIONING = ON (HISTORY_TABLE = [dbo].[ImportedDataItems_History]));
        
        PRINT '   ‚úÖ ImportedDataItems ƒë√£ ƒë∆∞·ª£c chuy·ªÉn ƒë·ªïi sang Temporal Table';
        
    END TRY
    BEGIN CATCH
        PRINT '   ‚ùå L·ªói chuy·ªÉn ƒë·ªïi ImportedDataItems: ' + ERROR_MESSAGE();
    END CATCH
END

-- =====================================================
-- B∆Ø·ªöC 3: T·∫†O COLUMNSTORE INDEXES CHO T·∫§T C·∫¢ B·∫¢NG C·∫¶N THI·∫æT
-- =====================================================

PRINT '';
PRINT 'üìä T·∫°o Columnstore Indexes cho c√°c b·∫£ng c·∫ßn thi·∫øt...';

DECLARE @TableToFix NVARCHAR(128), @HasCS BIT;
DECLARE fix_cursor CURSOR FOR
SELECT TableName, HasColumnstore 
FROM #TableStatus 
WHERE Issues != 'OK' AND TableName NOT LIKE '%_History';

OPEN fix_cursor;
FETCH NEXT FROM fix_cursor INTO @TableToFix, @HasCS;

WHILE @@FETCH_STATUS = 0
BEGIN
    PRINT 'üîß X·ª≠ l√Ω b·∫£ng: ' + @TableToFix;
    
    -- T·∫°o columnstore index n·∫øu ch∆∞a c√≥
    IF @HasCS = 0
    BEGIN
        BEGIN TRY
            DECLARE @CSIndexName NVARCHAR(128) = 'NCCI_' + @TableToFix + '_Analytics';
            DECLARE @CSIndexSQL NVARCHAR(MAX);
            
            -- Ki·ªÉm tra size c·ªßa b·∫£ng ƒë·ªÉ quy·∫øt ƒë·ªãnh lo·∫°i columnstore index
            DECLARE @RowCount BIGINT;
            SELECT @RowCount = RowCount FROM #TableStatus WHERE TableName = @TableToFix;
            
            IF @RowCount > 100000 OR @TableToFix LIKE '%RawData%' -- B·∫£ng l·ªõn d√πng clustered columnstore
            BEGIN
                SET @CSIndexSQL = 'CREATE CLUSTERED COLUMNSTORE INDEX [CCI_' + @TableToFix + '] ON [dbo].[' + @TableToFix + ']
                                  WITH (COMPRESSION_DELAY = 0, MAXDOP = 4);';
            END
            ELSE -- B·∫£ng nh·ªè d√πng nonclustered columnstore
            BEGIN
                SET @CSIndexSQL = 'CREATE NONCLUSTERED COLUMNSTORE INDEX [' + @CSIndexName + '] 
                                  ON [dbo].[' + @TableToFix + '] ([Id])
                                  WITH (COMPRESSION_DELAY = 0);';
            END
            
            EXEC sp_executesql @CSIndexSQL;
            PRINT '   ‚úÖ ƒê√£ t·∫°o Columnstore Index cho: ' + @TableToFix;
            
        END TRY
        BEGIN CATCH
            PRINT '   ‚ö†Ô∏è Kh√¥ng th·ªÉ t·∫°o Columnstore Index cho ' + @TableToFix + ': ' + ERROR_MESSAGE();
        END CATCH
    END
    
    -- T·∫°o columnstore cho history table n·∫øu c√≥
    DECLARE @HistoryTable NVARCHAR(128);
    SELECT @HistoryTable = HistoryTableName FROM #TableStatus WHERE TableName = @TableToFix;
    
    IF @HistoryTable IS NOT NULL
    BEGIN
        BEGIN TRY
            IF NOT EXISTS (SELECT 1 FROM sys.indexes WHERE name LIKE 'CCI_%' AND object_id = OBJECT_ID(@HistoryTable))
            BEGIN
                DECLARE @HistoryCSSQL NVARCHAR(MAX) = 'CREATE CLUSTERED COLUMNSTORE INDEX [CCI_' + @HistoryTable + '] 
                                                      ON [dbo].[' + @HistoryTable + ']
                                                      WITH (COMPRESSION_DELAY = 0, MAXDOP = 4);';
                EXEC sp_executesql @HistoryCSSQL;
                PRINT '   ‚úÖ ƒê√£ t·∫°o Columnstore Index cho: ' + @HistoryTable;
            END
            
        END TRY
        BEGIN CATCH
            PRINT '   ‚ö†Ô∏è Kh√¥ng th·ªÉ t·∫°o Columnstore Index cho ' + @HistoryTable + ': ' + ERROR_MESSAGE();
        END CATCH
    END
    
    FETCH NEXT FROM fix_cursor INTO @TableToFix, @HasCS;
END

CLOSE fix_cursor;
DEALLOCATE fix_cursor;

-- =====================================================
-- B∆Ø·ªöC 4: KI·ªÇM TRA L·∫†I V√Ä B√ÅO C√ÅO K·∫æT QU·∫¢
-- =====================================================

PRINT '';
PRINT 'üîç Ki·ªÉm tra l·∫°i tr·∫°ng th√°i sau khi s·ª≠a ch·ªØa...';

-- X√≥a v√† t·∫°o l·∫°i b·∫£ng t·∫°m
DROP TABLE #TableStatus;

CREATE TABLE #TableStatus (
    TableName NVARCHAR(128),
    IsTemporal BIT,
    HasColumnstore BIT,
    HistoryTableName NVARCHAR(128),
    RowCount BIGINT,
    Issues NVARCHAR(500),
    Priority INT
);

-- Ki·ªÉm tra l·∫°i
INSERT INTO #TableStatus (TableName, IsTemporal, HasColumnstore, HistoryTableName, RowCount, Issues, Priority)
SELECT 
    t.name AS TableName,
    CASE WHEN t.temporal_type = 2 THEN 1 ELSE 0 END AS IsTemporal,
    CASE WHEN EXISTS (
        SELECT 1 FROM sys.indexes i 
        WHERE i.object_id = t.object_id AND i.type IN (5,6)
    ) THEN 1 ELSE 0 END AS HasColumnstore,
    h.name AS HistoryTableName,
    ISNULL(p.rows, 0) AS RowCount,
    '' AS Issues,
    CASE 
        WHEN t.name LIKE 'ImportedData%' THEN 1
        WHEN t.name LIKE '%RawData%' THEN 2
        WHEN t.name LIKE '%History' THEN 3
        ELSE 4
    END AS Priority
FROM sys.tables t
LEFT JOIN sys.tables h ON t.history_table_id = h.object_id
LEFT JOIN sys.partitions p ON t.object_id = p.object_id AND p.index_id IN (0,1)
WHERE t.name NOT LIKE '%_History%'
ORDER BY Priority, t.name;

-- C·∫≠p nh·∫≠t issues
UPDATE #TableStatus 
SET Issues = CASE 
    WHEN IsTemporal = 0 AND HasColumnstore = 0 THEN '‚ùå Missing temporal + columnstore'
    WHEN IsTemporal = 0 THEN '‚ö†Ô∏è Missing temporal'
    WHEN HasColumnstore = 0 THEN '‚ö†Ô∏è Missing columnstore'
    ELSE '‚úÖ OK'
END;

-- B√°o c√°o cu·ªëi c√πng
PRINT '';
PRINT 'üìã B√ÅO C√ÅO TR·∫†NG TH√ÅI CU·ªêI C√ôNG:';
PRINT '===============================================================================';

SELECT 
    TableName,
    CASE WHEN IsTemporal = 1 THEN '‚úÖ Yes' ELSE '‚ùå No' END AS [Temporal Table],
    CASE WHEN HasColumnstore = 1 THEN '‚úÖ Yes' ELSE '‚ùå No' END AS [Columnstore Index],
    HistoryTableName AS [History Table],
    FORMAT(RowCount, 'N0') AS [Row Count],
    Issues AS [Status]
FROM #TableStatus 
ORDER BY Priority, TableName;

-- Th·ªëng k√™ t·ªïng quan
DECLARE @TotalTables INT, @TemporalTables INT, @ColumnstoreTables INT, @CompleteTables INT;

SELECT 
    @TotalTables = COUNT(*),
    @TemporalTables = SUM(CASE WHEN IsTemporal = 1 THEN 1 ELSE 0 END),
    @ColumnstoreTables = SUM(CASE WHEN HasColumnstore = 1 THEN 1 ELSE 0 END),
    @CompleteTables = SUM(CASE WHEN IsTemporal = 1 AND HasColumnstore = 1 THEN 1 ELSE 0 END)
FROM #TableStatus;

PRINT '';
PRINT 'üìä TH·ªêNG K√ä T·ªîNG QUAN:';
PRINT '‚Ä¢ T·ªïng s·ªë b·∫£ng: ' + CAST(@TotalTables AS NVARCHAR);
PRINT '‚Ä¢ B·∫£ng c√≥ Temporal: ' + CAST(@TemporalTables AS NVARCHAR) + '/' + CAST(@TotalTables AS NVARCHAR);
PRINT '‚Ä¢ B·∫£ng c√≥ Columnstore: ' + CAST(@ColumnstoreTables AS NVARCHAR) + '/' + CAST(@TotalTables AS NVARCHAR);
PRINT '‚Ä¢ B·∫£ng ho√†n ch·ªânh (Temporal + Columnstore): ' + CAST(@CompleteTables AS NVARCHAR) + '/' + CAST(@TotalTables AS NVARCHAR);
PRINT '';

IF @CompleteTables = @TotalTables
BEGIN
    PRINT 'üéâ T·∫§T C·∫¢ B·∫¢NG ƒê√É ƒê∆Ø·ª¢C C·∫§U H√åNH TEMPORAL + COLUMNSTORE HO√ÄN CH·ªàNH!';
END
ELSE
BEGIN
    PRINT '‚ö†Ô∏è V·∫´n c√≤n ' + CAST(@TotalTables - @CompleteTables AS NVARCHAR) + ' b·∫£ng c·∫ßn ƒë∆∞·ª£c ho√†n thi·ªán.';
    PRINT 'üí° Ch·∫°y l·∫°i script CompleteTemporalTablesSetup.sql ƒë·ªÉ t·∫°o c√°c b·∫£ng d·ªØ li·ªáu th√¥ c√≤n thi·∫øu.';
END

-- D·ªçn d·∫πp
DROP TABLE #TableStatus;

PRINT '';
PRINT '‚úÖ HO√ÄN TH√ÄNH KI·ªÇM TRA V√Ä S·ª¨A CH·ªÆA TEMPORAL TABLES';

GO
