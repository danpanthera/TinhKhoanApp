-- üöÄ SCRIPT CHUY·ªÇN ƒê·ªîI AN TO√ÄN T·ª™NG B·∫¢NG TH√ÄNH TEMPORAL TABLES
-- Author: AI Assistant - Ng√†y: 22/06/2025

USE TinhKhoanDB;
GO

PRINT 'üöÄ B·∫ÆT ƒê·∫¶U CHUY·ªÇN ƒê·ªîI AN TO√ÄN SANG TEMPORAL TABLES'
PRINT '=================================================='

-- B∆Ø·ªöC 1: X·ª¨ L√ù TRIGGER C·∫¢N TR·ªû
PRINT 'üîß B∆∞·ªõc 1: X·ª≠ l√Ω triggers c·∫£n tr·ªü...'

-- Backup v√† x√≥a trigger tr√™n Units
IF EXISTS (SELECT * FROM sys.triggers WHERE name = 'PreventNewUnitCreation')
BEGIN
    PRINT 'üìù Backup v√† x√≥a trigger PreventNewUnitCreation...'
    
    -- L∆∞u ƒë·ªãnh nghƒ©a trigger ƒë·ªÉ restore sau
    DECLARE @TriggerDef NVARCHAR(MAX)
    SELECT @TriggerDef = OBJECT_DEFINITION(OBJECT_ID('PreventNewUnitCreation'))
    
    -- T·∫°o b·∫£ng backup trigger definitions n·∫øu ch∆∞a c√≥
    IF NOT EXISTS (SELECT * FROM sys.tables WHERE name = 'TriggerBackup')
    BEGIN
        CREATE TABLE TriggerBackup (
            TriggerName NVARCHAR(128),
            TableName NVARCHAR(128),
            Definition NVARCHAR(MAX),
            BackupDate DATETIME2 DEFAULT GETDATE()
        )
    END
    
    -- Backup definition
    INSERT INTO TriggerBackup (TriggerName, TableName, Definition)
    VALUES ('PreventNewUnitCreation', 'Units', @TriggerDef)
    
    -- X√≥a trigger
    DROP TRIGGER PreventNewUnitCreation
    PRINT '‚úÖ ƒê√£ backup v√† x√≥a trigger PreventNewUnitCreation'
END

-- B∆Ø·ªöC 2: CHUY·ªÇN ƒê·ªîI C√ÅC B·∫¢NG CORE SYSTEM
PRINT ''
PRINT 'üîÑ B∆∞·ªõc 2: Chuy·ªÉn ƒë·ªïi c√°c b·∫£ng Core System...'

-- Chuy·ªÉn ƒë·ªïi Units
BEGIN TRY
    PRINT '‚öôÔ∏è Chuy·ªÉn ƒë·ªïi b·∫£ng Units...'
    
    -- Th√™m period columns
    ALTER TABLE Units ADD 
        ValidFrom DATETIME2 GENERATED ALWAYS AS ROW START HIDDEN NOT NULL DEFAULT SYSUTCDATETIME(),
        ValidTo DATETIME2 GENERATED ALWAYS AS ROW END HIDDEN NOT NULL DEFAULT CONVERT(DATETIME2, '9999-12-31 23:59:59.9999999'),
        PERIOD FOR SYSTEM_TIME (ValidFrom, ValidTo)
    
    -- K√≠ch ho·∫°t system versioning
    ALTER TABLE Units SET (SYSTEM_VERSIONING = ON (HISTORY_TABLE = dbo.UnitsHistory))
    
    -- T·∫°o columnstore index cho history table
    CREATE CLUSTERED COLUMNSTORE INDEX CCI_UnitsHistory ON dbo.UnitsHistory
    
    PRINT '‚úÖ Units chuy·ªÉn ƒë·ªïi th√†nh c√¥ng!'
END TRY
BEGIN CATCH
    PRINT '‚ùå L·ªói khi chuy·ªÉn ƒë·ªïi Units: ' + ERROR_MESSAGE()
END CATCH

-- Chuy·ªÉn ƒë·ªïi Positions  
BEGIN TRY
    PRINT '‚öôÔ∏è Chuy·ªÉn ƒë·ªïi b·∫£ng Positions...'
    
    ALTER TABLE Positions ADD 
        ValidFrom DATETIME2 GENERATED ALWAYS AS ROW START HIDDEN NOT NULL DEFAULT SYSUTCDATETIME(),
        ValidTo DATETIME2 GENERATED ALWAYS AS ROW END HIDDEN NOT NULL DEFAULT CONVERT(DATETIME2, '9999-12-31 23:59:59.9999999'),
        PERIOD FOR SYSTEM_TIME (ValidFrom, ValidTo)
    
    ALTER TABLE Positions SET (SYSTEM_VERSIONING = ON (HISTORY_TABLE = dbo.PositionsHistory))
    CREATE CLUSTERED COLUMNSTORE INDEX CCI_PositionsHistory ON dbo.PositionsHistory
    
    PRINT '‚úÖ Positions chuy·ªÉn ƒë·ªïi th√†nh c√¥ng!'
END TRY
BEGIN CATCH
    PRINT '‚ùå L·ªói khi chuy·ªÉn ƒë·ªïi Positions: ' + ERROR_MESSAGE()
END CATCH

-- Chuy·ªÉn ƒë·ªïi Roles
BEGIN TRY
    PRINT '‚öôÔ∏è Chuy·ªÉn ƒë·ªïi b·∫£ng Roles...'
    
    ALTER TABLE Roles ADD 
        ValidFrom DATETIME2 GENERATED ALWAYS AS ROW START HIDDEN NOT NULL DEFAULT SYSUTCDATETIME(),
        ValidTo DATETIME2 GENERATED ALWAYS AS ROW END HIDDEN NOT NULL DEFAULT CONVERT(DATETIME2, '9999-12-31 23:59:59.9999999'),
        PERIOD FOR SYSTEM_TIME (ValidFrom, ValidTo)
    
    ALTER TABLE Roles SET (SYSTEM_VERSIONING = ON (HISTORY_TABLE = dbo.RolesHistory))
    CREATE CLUSTERED COLUMNSTORE INDEX CCI_RolesHistory ON dbo.RolesHistory
    
    PRINT '‚úÖ Roles chuy·ªÉn ƒë·ªïi th√†nh c√¥ng!'
END TRY
BEGIN CATCH
    PRINT '‚ùå L·ªói khi chuy·ªÉn ƒë·ªïi Roles: ' + ERROR_MESSAGE()
END CATCH

-- B∆Ø·ªöC 3: CHUY·ªÇN ƒê·ªîI C√ÅC B·∫¢NG EMPLOYEES SYSTEM
PRINT ''
PRINT 'üë• B∆∞·ªõc 3: Chuy·ªÉn ƒë·ªïi b·∫£ng Employees System...'

-- Chuy·ªÉn ƒë·ªïi Employees
BEGIN TRY
    PRINT '‚öôÔ∏è Chuy·ªÉn ƒë·ªïi b·∫£ng Employees...'
    
    ALTER TABLE Employees ADD 
        ValidFrom DATETIME2 GENERATED ALWAYS AS ROW START HIDDEN NOT NULL DEFAULT SYSUTCDATETIME(),
        ValidTo DATETIME2 GENERATED ALWAYS AS ROW END HIDDEN NOT NULL DEFAULT CONVERT(DATETIME2, '9999-12-31 23:59:59.9999999'),
        PERIOD FOR SYSTEM_TIME (ValidFrom, ValidTo)
    
    ALTER TABLE Employees SET (SYSTEM_VERSIONING = ON (HISTORY_TABLE = dbo.EmployeesHistory))
    CREATE CLUSTERED COLUMNSTORE INDEX CCI_EmployeesHistory ON dbo.EmployeesHistory
    
    PRINT '‚úÖ Employees chuy·ªÉn ƒë·ªïi th√†nh c√¥ng!'
END TRY
BEGIN CATCH
    PRINT '‚ùå L·ªói khi chuy·ªÉn ƒë·ªïi Employees: ' + ERROR_MESSAGE()
END CATCH

-- B∆Ø·ªöC 4: CHUY·ªÇN ƒê·ªîI C√ÅC B·∫¢NG KPI SYSTEM
PRINT ''
PRINT 'üìä B∆∞·ªõc 4: Chuy·ªÉn ƒë·ªïi b·∫£ng KPI System...'

-- Chuy·ªÉn ƒë·ªïi KPIDefinitions
BEGIN TRY
    PRINT '‚öôÔ∏è Chuy·ªÉn ƒë·ªïi b·∫£ng KPIDefinitions...'
    
    ALTER TABLE KPIDefinitions ADD 
        ValidFrom DATETIME2 GENERATED ALWAYS AS ROW START HIDDEN NOT NULL DEFAULT SYSUTCDATETIME(),
        ValidTo DATETIME2 GENERATED ALWAYS AS ROW END HIDDEN NOT NULL DEFAULT CONVERT(DATETIME2, '9999-12-31 23:59:59.9999999'),
        PERIOD FOR SYSTEM_TIME (ValidFrom, ValidTo)
    
    ALTER TABLE KPIDefinitions SET (SYSTEM_VERSIONING = ON (HISTORY_TABLE = dbo.KPIDefinitionsHistory))
    CREATE CLUSTERED COLUMNSTORE INDEX CCI_KPIDefinitionsHistory ON dbo.KPIDefinitionsHistory
    
    PRINT '‚úÖ KPIDefinitions chuy·ªÉn ƒë·ªïi th√†nh c√¥ng!'
END TRY
BEGIN CATCH
    PRINT '‚ùå L·ªói khi chuy·ªÉn ƒë·ªïi KPIDefinitions: ' + ERROR_MESSAGE()
END CATCH

-- Chuy·ªÉn ƒë·ªïi KpiScoringRules
BEGIN TRY
    PRINT '‚öôÔ∏è Chuy·ªÉn ƒë·ªïi b·∫£ng KpiScoringRules...'
    
    ALTER TABLE KpiScoringRules ADD 
        ValidFrom DATETIME2 GENERATED ALWAYS AS ROW START HIDDEN NOT NULL DEFAULT SYSUTCDATETIME(),
        ValidTo DATETIME2 GENERATED ALWAYS AS ROW END HIDDEN NOT NULL DEFAULT CONVERT(DATETIME2, '9999-12-31 23:59:59.9999999'),
        PERIOD FOR SYSTEM_TIME (ValidFrom, ValidTo)
    
    ALTER TABLE KpiScoringRules SET (SYSTEM_VERSIONING = ON (HISTORY_TABLE = dbo.KpiScoringRulesHistory))
    CREATE CLUSTERED COLUMNSTORE INDEX CCI_KpiScoringRulesHistory ON dbo.KpiScoringRulesHistory
    
    PRINT '‚úÖ KpiScoringRules chuy·ªÉn ƒë·ªïi th√†nh c√¥ng!'
END TRY
BEGIN CATCH
    PRINT '‚ùå L·ªói khi chuy·ªÉn ƒë·ªïi KpiScoringRules: ' + ERROR_MESSAGE()
END CATCH

-- B∆Ø·ªöC 5: CHUY·ªÇN ƒê·ªîI C√ÅC B·∫¢NG FINANCIAL SYSTEM
PRINT ''
PRINT 'üí∞ B∆∞·ªõc 5: Chuy·ªÉn ƒë·ªïi b·∫£ng Financial System...'

-- Chuy·ªÉn ƒë·ªïi SalaryParameters
BEGIN TRY
    PRINT '‚öôÔ∏è Chuy·ªÉn ƒë·ªïi b·∫£ng SalaryParameters...'
    
    ALTER TABLE SalaryParameters ADD 
        ValidFrom DATETIME2 GENERATED ALWAYS AS ROW START HIDDEN NOT NULL DEFAULT SYSUTCDATETIME(),
        ValidTo DATETIME2 GENERATED ALWAYS AS ROW END HIDDEN NOT NULL DEFAULT CONVERT(DATETIME2, '9999-12-31 23:59:59.9999999'),
        PERIOD FOR SYSTEM_TIME (ValidFrom, ValidTo)
    
    ALTER TABLE SalaryParameters SET (SYSTEM_VERSIONING = ON (HISTORY_TABLE = dbo.SalaryParametersHistory))
    CREATE CLUSTERED COLUMNSTORE INDEX CCI_SalaryParametersHistory ON dbo.SalaryParametersHistory
    
    PRINT '‚úÖ SalaryParameters chuy·ªÉn ƒë·ªïi th√†nh c√¥ng!'
END TRY
BEGIN CATCH
    PRINT '‚ùå L·ªói khi chuy·ªÉn ƒë·ªïi SalaryParameters: ' + ERROR_MESSAGE()
END CATCH

-- Chuy·ªÉn ƒë·ªïi FinalPayouts
BEGIN TRY
    PRINT '‚öôÔ∏è Chuy·ªÉn ƒë·ªïi b·∫£ng FinalPayouts...'
    
    ALTER TABLE FinalPayouts ADD 
        ValidFrom DATETIME2 GENERATED ALWAYS AS ROW START HIDDEN NOT NULL DEFAULT SYSUTCDATETIME(),
        ValidTo DATETIME2 GENERATED ALWAYS AS ROW END HIDDEN NOT NULL DEFAULT CONVERT(DATETIME2, '9999-12-31 23:59:59.9999999'),
        PERIOD FOR SYSTEM_TIME (ValidFrom, ValidTo)
    
    ALTER TABLE FinalPayouts SET (SYSTEM_VERSIONING = ON (HISTORY_TABLE = dbo.FinalPayoutsHistory))
    CREATE CLUSTERED COLUMNSTORE INDEX CCI_FinalPayoutsHistory ON dbo.FinalPayoutsHistory
    
    PRINT '‚úÖ FinalPayouts chuy·ªÉn ƒë·ªïi th√†nh c√¥ng!'
END TRY
BEGIN CATCH
    PRINT '‚ùå L·ªói khi chuy·ªÉn ƒë·ªïi FinalPayouts: ' + ERROR_MESSAGE()
END CATCH

-- B∆Ø·ªöC 6: CHUY·ªÇN ƒê·ªîI C√ÅC B·∫¢NG KHOAN PERIODS
PRINT ''
PRINT 'üìÖ B∆∞·ªõc 6: Chuy·ªÉn ƒë·ªïi b·∫£ng Khoan Periods...'

-- Chuy·ªÉn ƒë·ªïi KhoanPeriods
BEGIN TRY
    PRINT '‚öôÔ∏è Chuy·ªÉn ƒë·ªïi b·∫£ng KhoanPeriods...'
    
    ALTER TABLE KhoanPeriods ADD 
        ValidFrom DATETIME2 GENERATED ALWAYS AS ROW START HIDDEN NOT NULL DEFAULT SYSUTCDATETIME(),
        ValidTo DATETIME2 GENERATED ALWAYS AS ROW END HIDDEN NOT NULL DEFAULT CONVERT(DATETIME2, '9999-12-31 23:59:59.9999999'),
        PERIOD FOR SYSTEM_TIME (ValidFrom, ValidTo)
    
    ALTER TABLE KhoanPeriods SET (SYSTEM_VERSIONING = ON (HISTORY_TABLE = dbo.KhoanPeriodsHistory))
    CREATE CLUSTERED COLUMNSTORE INDEX CCI_KhoanPeriodsHistory ON dbo.KhoanPeriodsHistory
    
    PRINT '‚úÖ KhoanPeriods chuy·ªÉn ƒë·ªïi th√†nh c√¥ng!'
END TRY
BEGIN CATCH
    PRINT '‚ùå L·ªói khi chuy·ªÉn ƒë·ªïi KhoanPeriods: ' + ERROR_MESSAGE()
END CATCH

-- B∆Ø·ªöC 7: KI·ªÇM TRA K·∫æT QU·∫¢
PRINT ''
PRINT 'üìä B√ÅO C√ÅO K·∫æT QU·∫¢ CHUY·ªÇN ƒê·ªîI'
PRINT '================================='

-- ƒê·∫øm s·ªë Temporal Tables sau chuy·ªÉn ƒë·ªïi
DECLARE @TotalTables INT, @TemporalTables INT, @NonTemporalTables INT
SELECT @TotalTables = COUNT(*) FROM sys.tables WHERE name NOT IN ('__EFMigrationsHistory', 'sysdiagrams', 'TriggerBackup')
SELECT @TemporalTables = COUNT(*) FROM sys.tables WHERE temporal_type = 2
SELECT @NonTemporalTables = @TotalTables - @TemporalTables

PRINT 'T·ªïng s·ªë tables: ' + CAST(@TotalTables AS VARCHAR(10))
PRINT 'ƒê√£ chuy·ªÉn ƒë·ªïi th√†nh Temporal Tables: ' + CAST(@TemporalTables AS VARCHAR(10))
PRINT 'Ch∆∞a chuy·ªÉn ƒë·ªïi: ' + CAST(@NonTemporalTables AS VARCHAR(10))
PRINT 'T·ª∑ l·ªá ho√†n th√†nh: ' + CAST((@TemporalTables * 100 / @TotalTables) AS VARCHAR(10)) + '%'

-- Li·ªát k√™ c√°c Temporal Tables ƒë√£ t·∫°o
PRINT ''
PRINT 'Danh s√°ch Temporal Tables ƒë√£ t·∫°o:'
SELECT 
    t.name AS TableName,
    h.name AS HistoryTableName
FROM sys.tables t
LEFT JOIN sys.tables h ON t.history_table_id = h.object_id
WHERE t.temporal_type = 2
ORDER BY t.name

PRINT ''
PRINT 'üéâ HO√ÄN TH√ÄNH GIAI ƒêO·∫†N 1 - CHUY·ªÇN ƒê·ªîI C√ÅC B·∫¢NG C∆† B·∫¢N!'
PRINT 'Th·ªùi gian: ' + CONVERT(VARCHAR, GETDATE(), 120)

GO
