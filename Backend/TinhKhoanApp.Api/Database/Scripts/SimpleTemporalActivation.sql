-- üéØ SCRIPT ƒê∆†N GI·∫¢N: CH·ªà K√çCH HO·∫†T TEMPORAL TABLES
-- Kh√¥ng t·∫°o Columnstore Index ƒë·ªÉ tr√°nh xung ƒë·ªôt
-- Ng√†y: 22/06/2025

USE TinhKhoanDB;
GO

PRINT 'üéØ K√çCH HO·∫†T TEMPORAL TABLES ƒê∆°N GI·∫¢N'
PRINT '=================================='

-- H√†m helper ƒë·ªÉ chuy·ªÉn ƒë·ªïi t·ª´ng b·∫£ng
DECLARE @tableName NVARCHAR(128)
DECLARE @sql NVARCHAR(MAX)

-- Danh s√°ch b·∫£ng c·∫ßn chuy·ªÉn ƒë·ªïi ∆∞u ti√™n
DECLARE table_cursor CURSOR FOR
SELECT name FROM sys.tables 
WHERE name IN (
    'Units', 'Positions', 'Roles', 'Employees',           -- Core tables
    'KPIDefinitions', 'KpiScoringRules',                  -- KPI system
    'SalaryParameters', 'FinalPayouts',                   -- Financial system
    'KhoanPeriods', 'EmployeeKhoanAssignments',           -- Assignment system
    'ImportedDataRecords', 'DashboardIndicators'         -- Data & Dashboard
)
    AND temporal_type = 0  -- Ch·ªâ b·∫£ng ch∆∞a l√† temporal
ORDER BY 
    CASE name
        WHEN 'Units' THEN 1
        WHEN 'Positions' THEN 2
        WHEN 'Roles' THEN 3
        WHEN 'Employees' THEN 4
        ELSE 10
    END

OPEN table_cursor
FETCH NEXT FROM table_cursor INTO @tableName

WHILE @@FETCH_STATUS = 0
BEGIN
    PRINT ''
    PRINT 'üîÑ X·ª≠ l√Ω b·∫£ng: ' + @tableName
    
    BEGIN TRY
        -- B∆∞·ªõc 1: Th√™m c·ªôt temporal n·∫øu ch∆∞a c√≥
        IF NOT EXISTS (SELECT * FROM sys.columns WHERE object_id = OBJECT_ID(@tableName) AND name = 'ValidFrom')
        BEGIN
            PRINT 'üìù Th√™m c·ªôt temporal...'
            SET @sql = 'ALTER TABLE ' + @tableName + ' ADD ' +
                      'ValidFrom DATETIME2 GENERATED ALWAYS AS ROW START HIDDEN NOT NULL DEFAULT SYSUTCDATETIME(), ' +
                      'ValidTo DATETIME2 GENERATED ALWAYS AS ROW END HIDDEN NOT NULL DEFAULT CONVERT(DATETIME2, ''9999-12-31 23:59:59.9999999''), ' +
                      'PERIOD FOR SYSTEM_TIME (ValidFrom, ValidTo)'
            EXEC sp_executesql @sql
            PRINT '‚úÖ ƒê√£ th√™m c·ªôt temporal'
        END
        ELSE
        BEGIN
            PRINT '‚ÑπÔ∏è C·ªôt temporal ƒë√£ t·ªìn t·∫°i'
            -- Ki·ªÉm tra xem c√≥ period kh√¥ng
            IF NOT EXISTS (SELECT * FROM sys.periods WHERE object_id = OBJECT_ID(@tableName))
            BEGIN
                PRINT 'üìù Th√™m period definition...'
                SET @sql = 'ALTER TABLE ' + @tableName + ' ADD PERIOD FOR SYSTEM_TIME (ValidFrom, ValidTo)'
                EXEC sp_executesql @sql
                PRINT '‚úÖ ƒê√£ th√™m period definition'
            END
        END
        
        -- B∆∞·ªõc 2: K√≠ch ho·∫°t System Versioning (KH√îNG t·∫°o Columnstore Index)
        PRINT 'üîß K√≠ch ho·∫°t System Versioning...'
        SET @sql = 'ALTER TABLE ' + @tableName + ' SET (SYSTEM_VERSIONING = ON (HISTORY_TABLE = dbo.' + @tableName + 'History))'
        EXEC sp_executesql @sql
        
        PRINT 'üéâ ' + @tableName + ' ƒë√£ tr·ªü th√†nh Temporal Table!'
        
    END TRY
    BEGIN CATCH
        PRINT '‚ùå L·ªói: ' + ERROR_MESSAGE()
    END CATCH
    
    FETCH NEXT FROM table_cursor INTO @tableName
END

CLOSE table_cursor
DEALLOCATE table_cursor

-- Ki·ªÉm tra k·∫øt qu·∫£
PRINT ''
PRINT 'üìä K·∫æT QU·∫¢ CHUY·ªÇN ƒê·ªîI'
PRINT '==================='

DECLARE @TotalTables INT, @TemporalTables INT
SELECT @TotalTables = COUNT(*) FROM sys.tables WHERE name NOT IN ('__EFMigrationsHistory', 'sysdiagrams', 'TriggerBackup')
SELECT @TemporalTables = COUNT(*) FROM sys.tables WHERE temporal_type = 2

PRINT 'T·ªïng s·ªë tables: ' + CAST(@TotalTables AS VARCHAR(10))
PRINT 'Temporal Tables: ' + CAST(@TemporalTables AS VARCHAR(10))
PRINT 'T·ª∑ l·ªá ho√†n th√†nh: ' + CAST((@TemporalTables * 100 / @TotalTables) AS VARCHAR(10)) + '%'

-- Li·ªát k√™ c√°c Temporal Tables
IF @TemporalTables > 0
BEGIN
    PRINT ''
    PRINT 'TEMPORAL TABLES ƒê√É T·∫†O:'
    SELECT 
        '‚úÖ ' + t.name + ' ‚Üí ' + h.name AS TemporalInfo
    FROM sys.tables t
    INNER JOIN sys.tables h ON t.history_table_id = h.object_id
    WHERE t.temporal_type = 2
    ORDER BY t.name
END

PRINT ''
PRINT 'üöÄ HO√ÄN TH√ÄNH!'
PRINT 'Th·ªùi gian: ' + CONVERT(VARCHAR, GETDATE(), 120)

GO
