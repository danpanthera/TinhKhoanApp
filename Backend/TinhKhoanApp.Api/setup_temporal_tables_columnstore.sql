-- ================================================================
-- üöÄ SETUP SQL SERVER TEMPORAL TABLES & COLUMNSTORE INDEXES
-- Script thi·∫øt l·∫≠p h·ªá th·ªëng l∆∞u tr·ªØ d·ªØ li·ªáu th√¥ hi·ªáu su·∫•t cao
-- Author: Agribank Lai Ch√¢u Dev Team  
-- Date: 2025-01-20
-- ================================================================

PRINT 'üè¶ AGRIBANK LAI CH√ÇU - THI·∫æT L·∫¨P TEMPORAL TABLES & COLUMNSTORE';
PRINT '================================================================';
PRINT '';

-- 1. T·∫†O C√ÅC B·∫¢NG D·ªÆ LI·ªÜU TH√î (N·∫æU CH∆ØA C√ì)
PRINT '1Ô∏è‚É£ T·∫†O C√ÅC B·∫¢NG D·ªÆ LI·ªÜU TH√î';
PRINT '============================';

-- B·∫£ng raw_data_imports (ch√≠nh)
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[raw_data_imports]') AND type in (N'U'))
BEGIN
    PRINT 'üìÑ T·∫°o b·∫£ng raw_data_imports...';
    CREATE TABLE [dbo].[raw_data_imports] (
        [id] INT IDENTITY(1,1) PRIMARY KEY,
        [data_type] NVARCHAR(50) NOT NULL,
        [file_name] NVARCHAR(255) NOT NULL,
        [file_size] BIGINT NOT NULL,
        [statement_date] DATE NOT NULL,
        [total_records] INT NOT NULL DEFAULT 0,
        [successful_records] INT NOT NULL DEFAULT 0,
        [failed_records] INT NOT NULL DEFAULT 0,
        [import_status] NVARCHAR(20) NOT NULL DEFAULT 'Processing',
        [error_message] NVARCHAR(MAX) NULL,
        [created_date] DATETIME NOT NULL DEFAULT GETDATE(),
        [created_by] NVARCHAR(100) NULL,
        [is_compressed] BIT NOT NULL DEFAULT 0,
        [compression_ratio] DECIMAL(5,2) NULL,
        [processing_time_ms] INT NULL
    );
    PRINT '‚úÖ ƒê√£ t·∫°o b·∫£ng raw_data_imports';
END
ELSE
BEGIN
    PRINT '‚úÖ B·∫£ng raw_data_imports ƒë√£ t·ªìn t·∫°i';
END

-- B·∫£ng raw_data_records (chi ti·∫øt)
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[raw_data_records]') AND type in (N'U'))
BEGIN
    PRINT 'üìÑ T·∫°o b·∫£ng raw_data_records...';
    CREATE TABLE [dbo].[raw_data_records] (
        [id] BIGINT IDENTITY(1,1) PRIMARY KEY,
        [raw_data_import_id] INT NOT NULL,
        [row_number] INT NOT NULL,
        [raw_data] NVARCHAR(MAX) NOT NULL,
        [parsed_data] NVARCHAR(MAX) NULL,
        [validation_status] NVARCHAR(20) NOT NULL DEFAULT 'Valid',
        [validation_errors] NVARCHAR(MAX) NULL,
        [processed_date] DATETIME NOT NULL DEFAULT GETDATE(),
        [hash_value] NVARCHAR(64) NULL,
        FOREIGN KEY ([raw_data_import_id]) REFERENCES [raw_data_imports]([id])
    );
    PRINT '‚úÖ ƒê√£ t·∫°o b·∫£ng raw_data_records';
END
ELSE
BEGIN
    PRINT '‚úÖ B·∫£ng raw_data_records ƒë√£ t·ªìn t·∫°i';
END

PRINT '';
PRINT '2Ô∏è‚É£ K√çCH HO·∫†T TEMPORAL TABLES';
PRINT '============================';

-- K√≠ch ho·∫°t temporal cho raw_data_imports
IF NOT EXISTS (
    SELECT * FROM sys.tables 
    WHERE name = 'raw_data_imports' AND temporal_type = 2
)
BEGIN
    PRINT '‚è∞ K√≠ch ho·∫°t temporal cho raw_data_imports...';
    
    -- Th√™m c·ªôt temporal n·∫øu ch∆∞a c√≥
    IF NOT EXISTS (SELECT * FROM sys.columns WHERE object_id = OBJECT_ID('raw_data_imports') AND name = 'ValidFrom')
    BEGIN
        ALTER TABLE [raw_data_imports] ADD
            [ValidFrom] DATETIME2 GENERATED ALWAYS AS ROW START HIDDEN NOT NULL DEFAULT SYSUTCDATETIME(),
            [ValidTo] DATETIME2 GENERATED ALWAYS AS ROW END HIDDEN NOT NULL DEFAULT CONVERT(DATETIME2, '9999-12-31 23:59:59.9999999'),
            PERIOD FOR SYSTEM_TIME ([ValidFrom], [ValidTo]);
    END
    
    -- K√≠ch ho·∫°t system versioning
    BEGIN TRY
        ALTER TABLE [raw_data_imports] 
        SET (SYSTEM_VERSIONING = ON (HISTORY_TABLE = [dbo].[raw_data_imports_history]));
        PRINT '‚úÖ ƒê√£ k√≠ch ho·∫°t temporal cho raw_data_imports';
    END TRY
    BEGIN CATCH
        PRINT '‚ö†Ô∏è  L·ªói k√≠ch ho·∫°t temporal cho raw_data_imports: ' + ERROR_MESSAGE();
    END CATCH
END
ELSE
BEGIN
    PRINT '‚úÖ Temporal ƒë√£ ƒë∆∞·ª£c k√≠ch ho·∫°t cho raw_data_imports';
END

-- K√≠ch ho·∫°t temporal cho raw_data_records
IF NOT EXISTS (
    SELECT * FROM sys.tables 
    WHERE name = 'raw_data_records' AND temporal_type = 2
)
BEGIN
    PRINT '‚è∞ K√≠ch ho·∫°t temporal cho raw_data_records...';
    
    -- Th√™m c·ªôt temporal n·∫øu ch∆∞a c√≥
    IF NOT EXISTS (SELECT * FROM sys.columns WHERE object_id = OBJECT_ID('raw_data_records') AND name = 'ValidFrom')
    BEGIN
        ALTER TABLE [raw_data_records] ADD
            [ValidFrom] DATETIME2 GENERATED ALWAYS AS ROW START HIDDEN NOT NULL DEFAULT SYSUTCDATETIME(),
            [ValidTo] DATETIME2 GENERATED ALWAYS AS ROW END HIDDEN NOT NULL DEFAULT CONVERT(DATETIME2, '9999-12-31 23:59:59.9999999'),
            PERIOD FOR SYSTEM_TIME ([ValidFrom], [ValidTo]);
    END
    
    -- K√≠ch ho·∫°t system versioning
    BEGIN TRY
        ALTER TABLE [raw_data_records] 
        SET (SYSTEM_VERSIONING = ON (HISTORY_TABLE = [dbo].[raw_data_records_history]));
        PRINT '‚úÖ ƒê√£ k√≠ch ho·∫°t temporal cho raw_data_records';
    END TRY
    BEGIN CATCH
        PRINT '‚ö†Ô∏è  L·ªói k√≠ch ho·∫°t temporal cho raw_data_records: ' + ERROR_MESSAGE();
    END CATCH
END
ELSE
BEGIN
    PRINT '‚úÖ Temporal ƒë√£ ƒë∆∞·ª£c k√≠ch ho·∫°t cho raw_data_records';
END

PRINT '';
PRINT '3Ô∏è‚É£ T·∫†O COLUMNSTORE INDEXES';
PRINT '==========================';

-- Columnstore index cho raw_data_imports
IF NOT EXISTS (
    SELECT * FROM sys.indexes 
    WHERE object_id = OBJECT_ID('raw_data_imports') 
    AND name = 'IX_raw_data_imports_columnstore'
)
BEGIN
    PRINT 'üìä T·∫°o columnstore index cho raw_data_imports...';
    BEGIN TRY
        CREATE NONCLUSTERED COLUMNSTORE INDEX [IX_raw_data_imports_columnstore]
        ON [dbo].[raw_data_imports] 
        (
            [data_type], 
            [statement_date], 
            [total_records], 
            [successful_records], 
            [failed_records], 
            [import_status],
            [created_date],
            [file_size],
            [processing_time_ms]
        );
        PRINT '‚úÖ ƒê√£ t·∫°o columnstore index cho raw_data_imports';
    END TRY
    BEGIN CATCH
        PRINT '‚ö†Ô∏è  L·ªói t·∫°o columnstore index cho raw_data_imports: ' + ERROR_MESSAGE();
    END CATCH
END
ELSE
BEGIN
    PRINT '‚úÖ Columnstore index ƒë√£ t·ªìn t·∫°i cho raw_data_imports';
END

-- Columnstore index cho raw_data_records (b·∫£ng l·ªõn)
IF NOT EXISTS (
    SELECT * FROM sys.indexes 
    WHERE object_id = OBJECT_ID('raw_data_records') 
    AND name = 'IX_raw_data_records_columnstore'
)
BEGIN
    PRINT 'üìä T·∫°o columnstore index cho raw_data_records...';
    BEGIN TRY
        CREATE NONCLUSTERED COLUMNSTORE INDEX [IX_raw_data_records_columnstore]
        ON [dbo].[raw_data_records] 
        (
            [raw_data_import_id], 
            [validation_status], 
            [processed_date],
            [row_number],
            [hash_value]
        );
        PRINT '‚úÖ ƒê√£ t·∫°o columnstore index cho raw_data_records';
    END TRY
    BEGIN CATCH
        PRINT '‚ö†Ô∏è  L·ªói t·∫°o columnstore index cho raw_data_records: ' + ERROR_MESSAGE();
    END CATCH
END
ELSE
BEGIN
    PRINT '‚úÖ Columnstore index ƒë√£ t·ªìn t·∫°i cho raw_data_records';
END

PRINT '';
PRINT '4Ô∏è‚É£ T·∫†O INDEXES T·ªêI ∆ØU HI·ªÜU SU·∫§T';
PRINT '==============================';

-- Index cho raw_data_imports
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID('raw_data_imports') AND name = 'IX_raw_data_imports_datatype_date')
BEGIN
    CREATE NONCLUSTERED INDEX [IX_raw_data_imports_datatype_date] 
    ON [raw_data_imports] ([data_type], [statement_date]);
    PRINT '‚úÖ ƒê√£ t·∫°o index IX_raw_data_imports_datatype_date';
END

IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID('raw_data_imports') AND name = 'IX_raw_data_imports_status')
BEGIN
    CREATE NONCLUSTERED INDEX [IX_raw_data_imports_status] 
    ON [raw_data_imports] ([import_status]) 
    INCLUDE ([total_records], [successful_records], [failed_records]);
    PRINT '‚úÖ ƒê√£ t·∫°o index IX_raw_data_imports_status';
END

-- Index cho raw_data_records
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID('raw_data_records') AND name = 'IX_raw_data_records_import_status')
BEGIN
    CREATE NONCLUSTERED INDEX [IX_raw_data_records_import_status] 
    ON [raw_data_records] ([raw_data_import_id], [validation_status]);
    PRINT '‚úÖ ƒê√£ t·∫°o index IX_raw_data_records_import_status';
END

IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID('raw_data_records') AND name = 'IX_raw_data_records_hash')
BEGIN
    CREATE NONCLUSTERED INDEX [IX_raw_data_records_hash] 
    ON [raw_data_records] ([hash_value]) 
    WHERE [hash_value] IS NOT NULL;
    PRINT '‚úÖ ƒê√£ t·∫°o index IX_raw_data_records_hash';
END

PRINT '';
PRINT '5Ô∏è‚É£ T·∫†O VIEWS T·ªêI ∆ØU TRUY V·∫§N';
PRINT '============================';

-- View t·ªïng h·ª£p th·ªëng k√™ import
IF OBJECT_ID('vw_import_statistics', 'V') IS NOT NULL
    DROP VIEW [vw_import_statistics];

PRINT 'üìä T·∫°o view vw_import_statistics...';
EXEC('
CREATE VIEW [vw_import_statistics] AS
SELECT 
    [data_type],
    [statement_date],
    COUNT(*) as [total_imports],
    SUM([total_records]) as [total_records],
    SUM([successful_records]) as [successful_records], 
    SUM([failed_records]) as [failed_records],
    AVG([processing_time_ms]) as [avg_processing_time],
    SUM([file_size]) as [total_file_size],
    MAX([created_date]) as [last_import_date]
FROM [raw_data_imports]
WHERE [import_status] = ''Completed''
GROUP BY [data_type], [statement_date]
');
PRINT '‚úÖ ƒê√£ t·∫°o view vw_import_statistics';

-- View l·ªãch s·ª≠ temporal 
IF OBJECT_ID('vw_import_history', 'V') IS NOT NULL
    DROP VIEW [vw_import_history];

PRINT 'üìö T·∫°o view vw_import_history...';
EXEC('
CREATE VIEW [vw_import_history] AS
SELECT 
    [id],
    [data_type],
    [file_name],
    [statement_date],
    [total_records],
    [import_status],
    [created_date],
    [ValidFrom],
    [ValidTo],
    ''Current'' as [Version_Type]
FROM [raw_data_imports]
UNION ALL
SELECT 
    [id],
    [data_type], 
    [file_name],
    [statement_date],
    [total_records],
    [import_status],
    [created_date],
    [ValidFrom],
    [ValidTo],
    ''History'' as [Version_Type]
FROM [raw_data_imports_history]
');
PRINT '‚úÖ ƒê√£ t·∫°o view vw_import_history';

PRINT '';
PRINT '6Ô∏è‚É£ C·∫¨P NH·∫¨T TH·ªêNG K√ä V√Ä T·ªêI ∆ØU';
PRINT '==============================';

-- C·∫≠p nh·∫≠t statistics cho c√°c b·∫£ng
PRINT 'üìà C·∫≠p nh·∫≠t statistics...';
UPDATE STATISTICS [raw_data_imports];
UPDATE STATISTICS [raw_data_records];

-- Thi·∫øt l·∫≠p auto-stats
ALTER DATABASE CURRENT SET AUTO_UPDATE_STATISTICS ON;
ALTER DATABASE CURRENT SET AUTO_CREATE_STATISTICS ON;

PRINT '‚úÖ ƒê√£ c·∫≠p nh·∫≠t statistics v√† t·ªëi ∆∞u database';

PRINT '';
PRINT '7Ô∏è‚É£ KI·ªÇM TRA K·∫æT QU·∫¢ THI·∫æT L·∫¨P';
PRINT '=============================';

-- Ki·ªÉm tra temporal tables
SELECT 
    t.name as [Table Name],
    CASE t.temporal_type 
        WHEN 2 THEN '‚úÖ Temporal Enabled'
        ELSE '‚ùå Not Temporal'
    END as [Temporal Status],
    h.name as [History Table]
FROM sys.tables t
LEFT JOIN sys.tables h ON t.history_table_id = h.object_id
WHERE t.name IN ('raw_data_imports', 'raw_data_records');

-- Ki·ªÉm tra columnstore indexes
SELECT 
    t.name as [Table Name],
    i.name as [Index Name],
    i.type_desc as [Index Type]
FROM sys.indexes i
INNER JOIN sys.tables t ON i.object_id = t.object_id
WHERE t.name IN ('raw_data_imports', 'raw_data_records')
AND i.type IN (5, 6); -- COLUMNSTORE

-- Ki·ªÉm tra views
SELECT name as [View Name]
FROM sys.views 
WHERE name IN ('vw_import_statistics', 'vw_import_history');

PRINT '';
PRINT '================================================================';
PRINT 'üéâ HO√ÄN TH√ÄNH THI·∫æT L·∫¨P TEMPORAL TABLES & COLUMNSTORE INDEXES!';
PRINT '';
PRINT '‚úÖ C√°c b·∫£ng ƒë√£ ƒë∆∞·ª£c c·∫•u h√¨nh temporal tables';
PRINT '‚úÖ Columnstore indexes ƒë√£ ƒë∆∞·ª£c t·∫°o ƒë·ªÉ t·ªëi ∆∞u hi·ªáu su·∫•t';
PRINT '‚úÖ Views v√† indexes ƒë√£ ƒë∆∞·ª£c thi·∫øt l·∫≠p';
PRINT '‚úÖ H·ªá th·ªëng s·∫µn s√†ng cho import d·ªØ li·ªáu th·∫≠t!';
PRINT '';
PRINT 'üìã C√ÅC T√çNH NƒÇNG ƒê√É C√ì:';
PRINT '   üïí L∆∞u tr·ªØ l·ªãch s·ª≠ thay ƒë·ªïi t·ª± ƒë·ªông (temporal tables)';
PRINT '   üìä Truy v·∫•n si√™u nhanh v·ªõi columnstore indexes';
PRINT '   üîç Views t·ªëi ∆∞u cho b√°o c√°o v√† th·ªëng k√™'; 
PRINT '   ‚ö° Indexes ƒë∆∞·ª£c t·ªëi ∆∞u cho c√°c truy v·∫•n th∆∞·ªùng d√πng';
PRINT '';
PRINT 'üöÄ S·∫¥N S√ÄNG IMPORT D·ªÆ LI·ªÜU TH·∫¨T!';
PRINT '================================================================';
