using Microsoft.EntityFrameworkCore;
using TinhKhoanApp.Api.Data;
using TinhKhoanApp.Api.Models.Entities;
using TinhKhoanApp.Api.Models.Common;
using TinhKhoanApp.Api.Repositories.Interfaces;
using TinhKhoanApp.Api.Repositories.Base;

namespace TinhKhoanApp.Api.Repositories
{
    /// <summary>
    /// DPDA Repository Implementation - Thẻ nộp đơn gửi tiết kiệm
    /// Theo pattern DP01Repository với 13 business columns từ CSV
    /// CSV-First: Business columns từ CSV là chuẩn cho tất cả layers
    /// </summary>
    public class DPDARepository : BaseRepository<DPDAEntity>, IDPDARepository
    {
        public DPDARepository(ApplicationDbContext context) : base(context)
        {
        }

        #region Paging Support

        /// <summary>
        /// Get DPDA with paging and optional search
        /// </summary>
        public async Task<(IEnumerable<DPDAEntity> entities, long totalCount)> GetPagedAsync(int pageNumber, int pageSize, string? searchTerm = null)
        {
            var query = _context.Set<DPDAEntity>().AsQueryable();

            // Apply search filter if provided
            if (!string.IsNullOrEmpty(searchTerm))
            {
                query = query.Where(x => 
                    x.MA_CHI_NHANH.Contains(searchTerm) ||
                    x.MA_KHACH_HANG.Contains(searchTerm) ||
                    x.TEN_KHACH_HANG.Contains(searchTerm) ||
                    x.SO_TAI_KHOAN.Contains(searchTerm) ||
                    x.SO_THE.Contains(searchTerm));
            }

            var totalCount = await query.LongCountAsync();
            
            var entities = await query
                .OrderByDescending(x => x.CreatedAt)
                .Skip((pageNumber - 1) * pageSize)
                .Take(pageSize)
                .ToListAsync();

            return (entities, totalCount);
        }

        #endregion

        #region Business Key Searches - CSV column names preserved

        /// <summary>
        /// Search DPDA by customer code (MA_KHACH_HANG)
        /// </summary>
        public async Task<IEnumerable<DPDAEntity>> GetByCustomerCodeAsync(string customerCode, int limit = 100)
        {
            return await _context.Set<DPDAEntity>()
                .Where(x => x.MA_KHACH_HANG == customerCode)
                .OrderByDescending(x => x.CreatedAt)
                .Take(limit)
                .ToListAsync();
        }

        /// <summary>
        /// Search DPDA by branch code (MA_CHI_NHANH)
        /// </summary>
        public async Task<IEnumerable<DPDAEntity>> GetByBranchCodeAsync(string branchCode, int limit = 100)
        {
            return await _context.Set<DPDAEntity>()
                .Where(x => x.MA_CHI_NHANH == branchCode)
                .OrderByDescending(x => x.CreatedAt)
                .Take(limit)
                .ToListAsync();
        }

        /// <summary>
        /// Search DPDA by account number (SO_TAI_KHOAN)
        /// </summary>
        public async Task<IEnumerable<DPDAEntity>> GetByAccountNumberAsync(string accountNumber, int limit = 100)
        {
            return await _context.Set<DPDAEntity>()
                .Where(x => x.SO_TAI_KHOAN == accountNumber)
                .OrderByDescending(x => x.CreatedAt)
                .Take(limit)
                .ToListAsync();
        }

        /// <summary>
        /// Search DPDA by card number (SO_THE)
        /// </summary>
        public async Task<IEnumerable<DPDAEntity>> GetByCardNumberAsync(string cardNumber, int limit = 100)
        {
            return await _context.Set<DPDAEntity>()
                .Where(x => x.SO_THE == cardNumber)
                .OrderByDescending(x => x.CreatedAt)
                .Take(limit)
                .ToListAsync();
        }

        #endregion

        #region Analytics Support

        /// <summary>
        /// Get DPDA count by branch (MA_CHI_NHANH)
        /// </summary>
        public async Task<Dictionary<string, long>> GetCountByBranchAsync(DateTime? asOfDate = null)
        {
            var query = _context.Set<DPDAEntity>().AsQueryable();
            
            if (asOfDate.HasValue)
            {
                query = query.Where(x => x.CreatedAt <= asOfDate.Value);
            }

            return await query
                .GroupBy(x => x.MA_CHI_NHANH)
                .Select(g => new { Branch = g.Key, Count = g.LongCount() })
                .ToDictionaryAsync(x => x.Branch, x => x.Count);
        }

        /// <summary>
        /// Get DPDA count by card type (LOAI_THE)
        /// </summary>
        public async Task<Dictionary<string, long>> GetCountByCardTypeAsync(DateTime? asOfDate = null)
        {
            var query = _context.Set<DPDAEntity>().AsQueryable();
            
            if (asOfDate.HasValue)
            {
                query = query.Where(x => x.CreatedAt <= asOfDate.Value);
            }

            return await query
                .GroupBy(x => x.LOAI_THE)
                .Select(g => new { CardType = g.Key, Count = g.LongCount() })
                .ToDictionaryAsync(x => x.CardType, x => x.Count);
        }

        /// <summary>
        /// Get DPDA count by status (TRANG_THAI)  
        /// </summary>
        public async Task<Dictionary<string, long>> GetCountByStatusAsync(DateTime? asOfDate = null)
        {
            var query = _context.Set<DPDAEntity>().AsQueryable();
            
            if (asOfDate.HasValue)
            {
                query = query.Where(x => x.CreatedAt <= asOfDate.Value);
            }

            return await query
                .GroupBy(x => x.TRANG_THAI)
                .Select(g => new { Status = g.Key, Count = g.LongCount() })
                .ToDictionaryAsync(x => x.Status, x => x.Count);
        }

        #endregion
    }
}