#!/usr/bin/env node

// üöÄ Script Node.js ƒë·ªÉ populate indicators cho 9 b·∫£ng KPI chi nh√°nh

const baseUrl = 'http://localhost:5055/api';

// Danh s√°ch ch·ªâ ti√™u gi·ªëng b·∫£ng ID=17
const indicators = [
  { name: 'T·ªïng d∆∞ n·ª£ BQ', maxScore: 30.00, unit: 'Tri·ªáu VND', order: 1 },
  { name: 'T·ª∑ l·ªá n·ª£ x·∫•u', maxScore: 15.00, unit: '%', order: 2 },
  { name: 'Ph√°t tri·ªÉn Kh√°ch h√†ng', maxScore: 10.00, unit: 'Kh√°ch h√†ng', order: 3 },
  { name: 'Thu n·ª£ ƒë√£ XLRR', maxScore: 10.00, unit: 'Tri·ªáu VND', order: 4 },
  { name: 'Th·ª±c hi·ªán nhi·ªám v·ª• theo ch∆∞∆°ng tr√¨nh c√¥ng t√°c', maxScore: 10.00, unit: '%', order: 5 },
  { name: 'Ch·∫•p h√†nh quy ch·∫ø, quy tr√¨nh nghi·ªáp v·ª•, vƒÉn h√≥a Agribank', maxScore: 10.00, unit: '%', order: 6 },
  { name: 'T·ªïng ngu·ªìn v·ªën huy ƒë·ªông BQ', maxScore: 10.00, unit: 'Tri·ªáu VND', order: 7 },
  { name: 'Ho√†n th√†nh ch·ªâ ti√™u giao kho√°n SPDV', maxScore: 5.00, unit: '%', order: 8 }
];

// Danh s√°ch 9 b·∫£ng chi nh√°nh (ID 24-32)
const branchTableIds = [24, 25, 26, 27, 28, 29, 30, 31, 32];

async function populateIndicators() {
  console.log('üîß B·∫Øt ƒë·∫ßu populate indicators cho 9 b·∫£ng KPI chi nh√°nh...');

  // Th·ª≠ g·ªçi API ƒë·ªÉ ki·ªÉm tra
  try {
    const response = await fetch(`${baseUrl}/KpiAssignment/tables`);
    if (!response.ok) {
      throw new Error(`HTTP ${response.status}: ${response.statusText}`);
    }
    console.log('‚úÖ API connection OK');
  } catch (error) {
    console.error('‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi API:', error.message);
    return;
  }

  // V√¨ API kh√¥ng c√≥ POST indicators, ta s·∫Ω t·∫°o d·ªØ li·ªáu tr·ª±c ti·∫øp b·∫±ng SQL th√¥ng qua console log
  let sqlScript = `
-- üè¢ Script SQL t·∫°o ch·ªâ ti√™u KPI cho 9 b·∫£ng chi nh√°nh
-- D·ª±a tr√™n m·∫´u b·∫£ng "Ph√≥ ph√≤ng Kh√°ch h√†ng CNL2" (ID=17)

-- X√≥a ch·ªâ ti√™u c≈© c·ªßa 9 b·∫£ng chi nh√°nh (ID 24-32)
DELETE FROM KpiIndicators WHERE KpiAssignmentTableId BETWEEN 24 AND 32;

`;

  // T·∫°o INSERT statements cho t·ª´ng b·∫£ng
  for (const tableId of branchTableIds) {
    sqlScript += `-- B·∫£ng ${tableId}\n`;
    for (const indicator of indicators) {
      sqlScript += `INSERT INTO KpiIndicators (KpiAssignmentTableId, IndicatorName, MaxScore, Unit, OrderIndex, ValueType, IsActive) VALUES (${tableId}, N'${indicator.name}', ${indicator.maxScore}, N'${indicator.unit}', ${indicator.order}, 'NUMBER', 1);\n`;
    }
    sqlScript += '\n';
  }

  // Th√™m ki·ªÉm tra k·∫øt qu·∫£
  sqlScript += `-- Ki·ªÉm tra k·∫øt qu·∫£
SELECT t.Id, t.TableName, COUNT(i.Id) as IndicatorCount
FROM KpiAssignmentTables t
LEFT JOIN KpiIndicators i ON t.Id = i.KpiAssignmentTableId
WHERE t.Id BETWEEN 24 AND 32
GROUP BY t.Id, t.TableName
ORDER BY t.Id;

PRINT N'‚úÖ Ho√†n th√†nh t·∫°o ch·ªâ ti√™u cho 9 b·∫£ng KPI chi nh√°nh';`;

  console.log('\nüîß SQL Script ƒë·ªÉ ch·∫°y tr√™n database:');
  console.log('='.repeat(80));
  console.log(sqlScript);
  console.log('='.repeat(80));

  // L∆∞u script v√†o file
  const fs = require('fs');
  const path = './populate_9_kpi_indicators_final.sql';
  fs.writeFileSync(path, sqlScript);
  console.log(`\nüìÅ Script ƒë√£ ƒë∆∞·ª£c l∆∞u v√†o: ${path}`);

  // G·ª£i √Ω c√°ch ch·∫°y
  console.log('\nüí° C√°ch ch·∫°y script:');
  console.log('1. Sao ch√©p script SQL ·ªü tr√™n');
  console.log('2. K·∫øt n·ªëi v√†o SQL Server Management Studio ho·∫∑c Azure Data Studio');
  console.log('3. Ch·ªçn database TinhKhoanDB');
  console.log('4. D√°n v√† ch·∫°y script SQL');
  console.log('5. Ho·∫∑c s·ª≠ d·ª•ng docker exec n·∫øu c√≥ sqlcmd:');
  console.log(`   docker exec -i azure_sql_edge_tinhkhoan sqlcmd -S localhost -U sa -P "YourStrongPassword123" -d TinhKhoanDB < ${path}`);

  // Ki·ªÉm tra k·∫øt qu·∫£ hi·ªán t·∫°i
  console.log('\nüîç Ki·ªÉm tra t√¨nh tr·∫°ng hi·ªán t·∫°i c·ªßa 9 b·∫£ng chi nh√°nh:');
  try {
    const response = await fetch(`${baseUrl}/KpiAssignment/tables`);
    const tables = await response.json();
    const branchTables = tables.filter(t => t.Id >= 24 && t.Id <= 32);

    branchTables.forEach(table => {
      console.log(`ID ${table.Id}: ${table.TableName} - ${table.Description} (${table.IndicatorCount} indicators)`);
    });
  } catch (error) {
    console.error('‚ùå L·ªói khi ki·ªÉm tra tables:', error.message);
  }
}

// Ch·∫°y script
populateIndicators().catch(console.error);
