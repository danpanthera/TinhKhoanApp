-- ==================================================
-- SCRIPT C·∫§U H√åNH TEMPORAL TABLES + COLUMNSTORE INDEXES - PHI√äN B·∫¢N CU·ªêI C√ôNG
-- X·ª¨ L√ù HO√ÄN TO√ÄN IDENTITY V√Ä CONSTRAINT ISSUES
-- ==================================================

USE TinhKhoanDB;
GO

-- ==================================================
-- PH·∫¶N 1: DANH S√ÅCH C√ÅC B·∫¢NG C·∫¶N C·∫§U H√åNH
-- ==================================================
DECLARE @RawDataTables TABLE (
    TableName NVARCHAR(50),
    FileType NVARCHAR(10)
);

INSERT INTO @RawDataTables VALUES
('7800_DT_KHKD1', 'Excel'),
('DB01', 'CSV'),
('DP01_New', 'CSV'),
('DPDA', 'CSV'),
('EI01', 'CSV'),
('GL01', 'CSV'),
('GL41', 'CSV'),
('KH03', 'CSV'),
('LN01', 'CSV'),
('LN02', 'CSV'),
('LN03', 'CSV'),
('RR01', 'CSV');

-- ==================================================
-- PH·∫¶N 2: X·ª¨ L√ù T·ª™NG B·∫¢NG
-- ==================================================
DECLARE @tableName NVARCHAR(50);
DECLARE @fileType NVARCHAR(10);
DECLARE @sql NVARCHAR(MAX);
DECLARE @historyTableName NVARCHAR(60);

DECLARE table_cursor CURSOR FOR
SELECT TableName, FileType FROM @RawDataTables;

OPEN table_cursor;
FETCH NEXT FROM table_cursor INTO @tableName, @fileType;

WHILE @@FETCH_STATUS = 0
BEGIN
    SET @historyTableName = @tableName + '_History';

    PRINT '=== C·∫•u h√¨nh b·∫£ng ' + @tableName + ' (' + @fileType + ' files) ===';

    -- B∆∞·ªõc 1: T·∫Øt system versioning n·∫øu ƒëang b·∫≠t
    IF EXISTS (SELECT * FROM sys.tables WHERE name = @tableName AND temporal_type = 2)
    BEGIN
        SET @sql = 'ALTER TABLE [' + @tableName + '] SET (SYSTEM_VERSIONING = OFF);';
        EXEC sp_executesql @sql;
        PRINT '  ‚úì ƒê√£ t·∫Øt system versioning';
    END

    -- B∆∞·ªõc 2: X√≥a history table c≈© n·∫øu c√≥
    IF EXISTS (SELECT * FROM sys.tables WHERE name = @historyTableName)
    BEGIN
        SET @sql = 'DROP TABLE [' + @historyTableName + '];';
        EXEC sp_executesql @sql;
        PRINT '  ‚úì ƒê√£ x√≥a history table c≈©';
    END

    -- B∆∞·ªõc 3: X√≥a system-time columns c≈© n·∫øu c√≥
    IF EXISTS (SELECT * FROM sys.columns WHERE object_id = OBJECT_ID(@tableName) AND name = 'SysStartTime')
    BEGIN
        SET @sql = 'ALTER TABLE [' + @tableName + '] DROP PERIOD FOR SYSTEM_TIME;';
        EXEC sp_executesql @sql;

        SET @sql = 'ALTER TABLE [' + @tableName + '] DROP COLUMN SysStartTime, SysEndTime;';
        EXEC sp_executesql @sql;
        PRINT '  ‚úì ƒê√£ x√≥a system-time columns c≈©';
    END

    -- B∆∞·ªõc 4: Th√™m system-time columns m·ªõi
    SET @sql = 'ALTER TABLE [' + @tableName + ']
                ADD SysStartTime DATETIME2 GENERATED ALWAYS AS ROW START HIDDEN DEFAULT GETUTCDATE(),
                    SysEndTime DATETIME2 GENERATED ALWAYS AS ROW END HIDDEN DEFAULT ''9999-12-31 23:59:59.9999999'',
                    PERIOD FOR SYSTEM_TIME (SysStartTime, SysEndTime);';
    EXEC sp_executesql @sql;
    PRINT '  ‚úì ƒê√£ th√™m system-time columns m·ªõi';

    -- B∆∞·ªõc 5: B·∫≠t system versioning v·ªõi history table m·ªõi
    SET @sql = 'ALTER TABLE [' + @tableName + ']
                SET (SYSTEM_VERSIONING = ON (HISTORY_TABLE = dbo.[' + @historyTableName + ']));';
    EXEC sp_executesql @sql;
    PRINT '  ‚úì ƒê√£ b·∫≠t system versioning v·ªõi history table m·ªõi';

    -- B∆∞·ªõc 6: X√≥a clustered index c≈© tr∆∞·ªõc khi t·∫°o columnstore (n·∫øu c√≥)
    DECLARE @indexName NVARCHAR(128);
    SELECT @indexName = i.name
    FROM sys.indexes i
    WHERE i.object_id = OBJECT_ID(@tableName)
        AND i.type_desc = 'CLUSTERED'
        AND i.name IS NOT NULL;

    IF @indexName IS NOT NULL
    BEGIN
        SET @sql = 'DROP INDEX [' + @indexName + '] ON [' + @tableName + '];';
        EXEC sp_executesql @sql;
        PRINT '  ‚úì ƒê√£ x√≥a clustered index c≈©: ' + @indexName;
    END

    -- B∆∞·ªõc 7: T·∫°o clustered columnstore index
    SET @sql = 'CREATE CLUSTERED COLUMNSTORE INDEX CCI_' + @tableName + ' ON [' + @tableName + '];';
    EXEC sp_executesql @sql;
    PRINT '  ‚úì ƒê√£ t·∫°o clustered columnstore index';

    PRINT '  üéâ Ho√†n th√†nh c·∫•u h√¨nh b·∫£ng ' + @tableName;
    PRINT '';

    FETCH NEXT FROM table_cursor INTO @tableName, @fileType;
END

CLOSE table_cursor;
DEALLOCATE table_cursor;

-- ==================================================
-- PH·∫¶N 3: B√ÅO C√ÅO K·∫æT QU·∫¢
-- ==================================================
PRINT '========================================================';
PRINT 'üéâ HO√ÄN TH√ÄNH C·∫§U H√åNH TEMPORAL TABLES + COLUMNSTORE';
PRINT '========================================================';
PRINT '';

-- B√°o c√°o chi ti·∫øt
SELECT
    t.name as [T√™n B·∫£ng],
    CASE
        WHEN t.temporal_type = 2 THEN '‚úÖ Temporal'
        ELSE '‚ùå Non-temporal'
    END as [Tr·∫°ng th√°i Temporal],
    CASE
        WHEN EXISTS (SELECT 1 FROM sys.indexes i WHERE i.object_id = t.object_id AND i.type_desc = 'CLUSTERED COLUMNSTORE')
        THEN '‚úÖ Columnstore'
        ELSE '‚ùå No Columnstore'
    END as [Tr·∫°ng th√°i Columnstore],
    ht.name as [History Table]
FROM sys.tables t
LEFT JOIN sys.tables ht ON t.history_table_id = ht.object_id
WHERE t.name IN ('7800_DT_KHKD1', 'DB01', 'DP01_New', 'DPDA', 'EI01', 'GL01', 'GL41', 'KH03', 'LN01', 'LN02', 'LN03', 'RR01')
ORDER BY t.name;

-- ƒê·∫øm s·ªë l∆∞·ª£ng
SELECT
    COUNT(*) as [T·ªïng s·ªë b·∫£ng],
    SUM(CASE WHEN temporal_type = 2 THEN 1 ELSE 0 END) as [S·ªë b·∫£ng Temporal],
    SUM(CASE WHEN EXISTS (SELECT 1 FROM sys.indexes i WHERE i.object_id = t.object_id AND i.type_desc = 'CLUSTERED COLUMNSTORE') THEN 1 ELSE 0 END) as [S·ªë b·∫£ng Columnstore]
FROM sys.tables t
WHERE t.name IN ('7800_DT_KHKD1', 'DB01', 'DP01_New', 'DPDA', 'EI01', 'GL01', 'GL41', 'KH03', 'LN01', 'LN02', 'LN03', 'RR01');

PRINT '';
PRINT 'üöÄ T·∫•t c·∫£ b·∫£ng d·ªØ li·ªáu th√¥ ƒë√£ s·∫µn s√†ng cho hi·ªáu nƒÉng t·ªëi ∆∞u!';
GO
