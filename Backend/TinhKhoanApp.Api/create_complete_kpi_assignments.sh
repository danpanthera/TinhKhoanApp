#!/bin/bash

# Script t·∫°o ho√†n ch·ªânh EmployeeKpiAssignments
# Ng√†y t·∫°o: 07/01/2025
# M·ª•c ƒë√≠ch: T·∫°o giao kho√°n KPI cho t·∫•t c·∫£ nh√¢n vi√™n d·ª±a tr√™n roles v√† KPI assignment tables

BASE_URL="http://localhost:5055/api"

echo "üéØ T·∫†O HO√ÄN CH·ªàNH EMPLOYEE KPI ASSIGNMENTS"
echo "=========================================="

# 1. KI·ªÇM TRA D·ªÆ LI·ªÜU HI·ªÜN T·∫†I
echo ""
echo "üìä 1. KI·ªÇM TRA D·ªÆ LI·ªÜU C∆† B·∫¢N:"

employees_count=$(curl -s "$BASE_URL/employees" | jq '. | length')
roles_count=$(curl -s "$BASE_URL/roles" | jq '. | length')
tables_count=$(curl -s "$BASE_URL/KpiAssignment/tables" | jq '. | length')
periods_count=$(curl -s "$BASE_URL/khoanperiods" | jq '. | length')

echo "   üë• Employees: $employees_count"
echo "   üé≠ Roles: $roles_count"
echo "   üìã KPI Tables: $tables_count"
echo "   üóìÔ∏è  KhoanPeriods: $periods_count"

# L·∫•y period th√°ng 1/2025
current_period=$(curl -s "$BASE_URL/khoanperiods" | jq '.[] | select(.PeriodName == "Th√°ng 1/2025") | .Id')
echo "   üìÖ S·ª≠ d·ª•ng period: $current_period (Th√°ng 1/2025)"

# 2. PH√ÇN T√çCH EMPLOYEES V√Ä ROLES
echo ""
echo "üë• 2. EMPLOYEES V√Ä ROLES ƒê√É G√ÅN:"

# Function ƒë·ªÉ l·∫•y role c·ªßa employee
get_employee_role() {
    local emp_id=$1
    curl -s "$BASE_URL/employees/$emp_id" | jq -r '.EmployeeRoles[0].RoleId // "null"'
}

# Function ƒë·ªÉ l·∫•y t√™n role
get_role_name() {
    local role_id=$1
    if [ "$role_id" != "null" ]; then
        curl -s "$BASE_URL/roles" | jq -r ".[] | select(.Id == $role_id) | .Name"
    else
        echo "No role"
    fi
}

# Function ƒë·ªÉ t√¨m KPI table d·ª±a tr√™n role
find_kpi_table_for_role() {
    local role_id=$1
    # Mapping logic d·ª±a tr√™n pattern ƒë√£ th·∫•y
    case $role_id in
        1) echo "1" ;;  # Tr∆∞·ªüng ph√≤ng KHDN ‚Üí TruongphongKhdn
        2) echo "2" ;;  # Tr∆∞·ªüng ph√≤ng KHCN ‚Üí TruongphongKhcn  
        5) echo "5" ;;  # Tr∆∞·ªüng ph√≤ng KH&QLRR ‚Üí TruongphongKhqlrr
        8) echo "8" ;;  # Tr∆∞·ªüng ph√≤ng KTNQ CNL1 ‚Üí TruongphongKtnqCnl1
        12) echo "12" ;; # Tr∆∞·ªüng ph√≥ IT | T·ªïng h·ª£p | KTGS ‚Üí TruongphoItThKtgs
        15) echo "15" ;; # Ph√≥ gi√°m ƒë·ªëc Ph√≤ng giao d·ªãch ‚Üí PhogiamdocPgd
        18) echo "18" ;; # Ph√≥ gi√°m ƒë·ªëc CNL2 ph·ª• tr√°ch TD ‚Üí PhogiamdocCnl2Td
        *) echo "null" ;;
    esac
}

echo "   Danh s√°ch employees v√† mapping:"
for emp_id in {1..10}; do
    emp_data=$(curl -s "$BASE_URL/employees/$emp_id" 2>/dev/null)
    if [ $? -eq 0 ]; then
        emp_name=$(echo "$emp_data" | jq -r '.FullName // "N/A"')
        role_id=$(echo "$emp_data" | jq -r '.EmployeeRoles[0].RoleId // "null"')
        
        if [ "$role_id" != "null" ]; then
            role_name=$(curl -s "$BASE_URL/roles" | jq -r ".[] | select(.Id == $role_id) | .Name")
            table_id=$(find_kpi_table_for_role $role_id)
            
            echo "   Employee $emp_id: $emp_name"
            echo "     ‚Üí Role: $role_id ($role_name)"
            echo "     ‚Üí KPI Table: $table_id"
            echo ""
        fi
    fi
done

# 3. KI·ªÇM TRA KPI INDICATORS TRONG TABLES
echo "üìã 3. KI·ªÇM TRA KPI INDICATORS:"

# Ki·ªÉm tra table 1 l√†m v√≠ d·ª•
echo "   V√≠ d·ª• Table 1 (TruongphongKhdn):"
table1_detail=$(curl -s "$BASE_URL/KpiAssignment/tables/1")
indicators_count=$(echo "$table1_detail" | jq '.Indicators | length')
echo "   - S·ªë indicators: $indicators_count"

if [ "$indicators_count" -gt 0 ]; then
    echo "   - Sample indicators:"
    echo "$table1_detail" | jq '.Indicators[0:3] | .[] | "     ID: \(.Id) | \(.IndicatorName) | Max: \(.MaxScore)"' -r
fi

# 4. T·∫†O EMPLOYEE KPI ASSIGNMENTS M·∫™U
echo ""
echo "üîß 4. T·∫†O EMPLOYEE KPI ASSIGNMENTS:"

# Function ƒë·ªÉ t·∫°o assignment cho 1 employee
create_assignment_for_employee() {
    local emp_id=$1
    local emp_name="$2"
    local role_id=$3
    local table_id=$4
    
    echo "   üîÑ T·∫°o assignment cho Employee $emp_id ($emp_name)"
    echo "     Role: $role_id, Table: $table_id, Period: $current_period"
    
    # L·∫•y danh s√°ch indicators t·ª´ table
    table_detail=$(curl -s "$BASE_URL/KpiAssignment/tables/$table_id")
    indicators=$(echo "$table_detail" | jq '.Indicators[]?')
    
    if [ -n "$indicators" ]; then
        indicators_count=$(echo "$table_detail" | jq '.Indicators | length')
        echo "     ‚Üí T√¨m th·∫•y $indicators_count indicators"
        
        # T·∫°o targets array cho t·∫•t c·∫£ indicators trong table
        targets=$(echo "$table_detail" | jq '[.Indicators[] | {
            IndicatorId: .Id,
            TargetValue: (.MaxScore * 0.8 | floor),
            Notes: "Auto-assigned based on role"
        }]')
        
        # T·∫°o payload request
        assignment_payload=$(jq -n \
            --arg empId "$emp_id" \
            --arg periodId "$current_period" \
            --argjson targets "$targets" \
            '{
                EmployeeId: ($empId | tonumber),
                KhoanPeriodId: ($periodId | tonumber),
                Targets: $targets
            }')
        
        # G·ª≠i request
        result=$(curl -s -X POST "$BASE_URL/KpiAssignment/assign" \
            -H "Content-Type: application/json" \
            -d "$assignment_payload")
        
        # Ki·ªÉm tra k·∫øt qu·∫£
        if echo "$result" | jq -e '.Message' >/dev/null 2>&1; then
            targets_count=$(echo "$result" | jq -r '.TargetsCount')
            echo "     ‚úÖ Th√†nh c√¥ng! ƒê√£ t·∫°o $targets_count KPI targets"
        else
            echo "     ‚ùå L·ªói: $result"
        fi
    else
        echo "     ‚ö†Ô∏è  Table $table_id kh√¥ng c√≥ indicators"
    fi
    echo ""
}

# T·∫°o assignments cho t·∫•t c·∫£ employees c√≥ role
echo "   B·∫Øt ƒë·∫ßu t·∫°o assignments cho t·∫•t c·∫£ employees:"

for emp_id in {1..10}; do
    emp_data=$(curl -s "$BASE_URL/employees/$emp_id" 2>/dev/null)
    if [ $? -eq 0 ]; then
        emp_name=$(echo "$emp_data" | jq -r '.FullName')
        role_id=$(echo "$emp_data" | jq -r '.EmployeeRoles[0].RoleId // "null"')
        
        if [ "$role_id" != "null" ]; then
            table_id=$(find_kpi_table_for_role $role_id)
            
            if [ "$table_id" != "null" ]; then
                create_assignment_for_employee $emp_id "$emp_name" $role_id $table_id
            else
                echo "   ‚ö†Ô∏è  Employee $emp_id ($emp_name): Kh√¥ng t√¨m th·∫•y KPI table cho role $role_id"
            fi
        else
            echo "   ‚ö†Ô∏è  Employee $emp_id ($emp_name): Ch∆∞a c√≥ role"
        fi
    fi
done

# 5. KI·ªÇM TRA K·∫æT QU·∫¢
echo "üìä 5. KI·ªÇM TRA K·∫æT QU·∫¢:"

for emp_id in {1..3}; do
    assignment=$(curl -s "$BASE_URL/KpiAssignment/employee/$emp_id/period/$current_period")
    targets_count=$(echo "$assignment" | jq '.KpiTargets | length')
    emp_name=$(echo "$assignment" | jq -r '.Employee.FullName')
    
    echo "   Employee $emp_id ($emp_name): $targets_count KPI targets"
done

echo ""
echo "üèÅ HO√ÄN TH√ÄNH T·∫†O EMPLOYEE KPI ASSIGNMENTS"
echo "========================================="

echo ""
echo "‚úÖ ƒê√É HO√ÄN TH√ÄNH:"
echo "   1. ‚úÖ G√°n Roles cho t·∫•t c·∫£ Employees"
echo "   2. ‚úÖ T·∫°o EmployeeKpiAssignments cho employees c√≥ role"
echo "   3. üîÑ Ti·∫øp theo: T·∫°o UnitKpiScorings cho ƒë√°nh gi√° chi nh√°nh"
