using System.Globalization;

namespace TinhKhoanApp.Api.Utils
{
    /// <summary>
    /// üî¢ Utility class cho ƒë·ªãnh d·∫°ng s·ªë theo chu·∫©n Vi·ªát Nam
    /// Quy ∆∞·ªõc: D·∫•u "," cho ngƒÉn c√°ch h√†ng ngh√¨n, d·∫•u "." cho th·∫≠p ph√¢n
    /// </summary>
    public static class NumberFormatter
    {
        // CultureInfo cho ƒë·ªãnh d·∫°ng Vi·ªát Nam
        private static readonly CultureInfo VietnameseCulture = new CultureInfo("vi-VN");

        /// <summary>
        /// Format s·ªë th√†nh chu·ªói v·ªõi ƒë·ªãnh d·∫°ng Vi·ªát Nam (d·∫•u ph·∫©y ngƒÉn c√°ch ngh√¨n, d·∫•u ch·∫•m th·∫≠p ph√¢n)
        /// </summary>
        /// <param name="value">Gi√° tr·ªã s·ªë c·∫ßn format</param>
        /// <param name="decimalPlaces">S·ªë ch·ªØ s·ªë sau d·∫•u th·∫≠p ph√¢n (m·∫∑c ƒë·ªãnh: 0)</param>
        /// <returns>Chu·ªói ƒë√£ format theo chu·∫©n Vi·ªát Nam</returns>
        public static string FormatNumber(decimal value, int decimalPlaces = 0)
        {
            string format = decimalPlaces > 0 ? $"N{decimalPlaces}" : "N0";
            return value.ToString(format, VietnameseCulture);
        }

        /// <summary>
        /// Format s·ªë th√†nh chu·ªói v·ªõi ƒë·ªãnh d·∫°ng Vi·ªát Nam
        /// </summary>
        /// <param name="value">Gi√° tr·ªã s·ªë c·∫ßn format</param>
        /// <param name="decimalPlaces">S·ªë ch·ªØ s·ªë sau d·∫•u th·∫≠p ph√¢n (m·∫∑c ƒë·ªãnh: 0)</param>
        /// <returns>Chu·ªói ƒë√£ format theo chu·∫©n Vi·ªát Nam</returns>
        public static string FormatNumber(double value, int decimalPlaces = 0)
        {
            string format = decimalPlaces > 0 ? $"N{decimalPlaces}" : "N0";
            return value.ToString(format, VietnameseCulture);
        }

        /// <summary>
        /// Format s·ªë ti·ªÅn v·ªõi ƒë∆°n v·ªã (tri·ªáu VND, t·ª∑ VND)
        /// </summary>
        /// <param name="value">Gi√° tr·ªã ti·ªÅn t·ªá (VND)</param>
        /// <param name="showUnit">C√≥ hi·ªÉn th·ªã ƒë∆°n v·ªã kh√¥ng</param>
        /// <returns>Chu·ªói ti·ªÅn t·ªá ƒë√£ format</returns>
        public static string FormatCurrency(decimal value, bool showUnit = true)
        {
            string formattedValue = "";
            string unit = "";

            if (Math.Abs(value) >= 1_000_000_000) // T·ª∑ VND
            {
                formattedValue = FormatNumber(value / 1_000_000_000m, 2);
                unit = " t·ª∑ VND";
            }
            else if (Math.Abs(value) >= 1_000_000) // Tri·ªáu VND
            {
                formattedValue = FormatNumber(value / 1_000_000m, 2);
                unit = " tri·ªáu VND";
            }
            else if (Math.Abs(value) >= 1_000) // Ngh√¨n VND
            {
                formattedValue = FormatNumber(value / 1_000m, 2);
                unit = " ngh√¨n VND";
            }
            else // VND
            {
                formattedValue = FormatNumber(value, 0);
                unit = " VND";
            }

            return showUnit ? formattedValue + unit : formattedValue;
        }

        /// <summary>
        /// Format ph·∫ßn trƒÉm theo chu·∫©n Vi·ªát Nam
        /// </summary>
        /// <param name="value">Gi√° tr·ªã ph·∫ßn trƒÉm (0-100)</param>
        /// <param name="decimalPlaces">S·ªë ch·ªØ s·ªë sau d·∫•u th·∫≠p ph√¢n (m·∫∑c ƒë·ªãnh: 2)</param>
        /// <returns>Chu·ªói ph·∫ßn trƒÉm ƒë√£ format</returns>
        public static string FormatPercentage(decimal value, int decimalPlaces = 2)
        {
            string format = $"N{decimalPlaces}";
            return value.ToString(format, VietnameseCulture) + "%";
        }

        /// <summary>
        /// Parse chu·ªói ƒë√£ format th√†nh s·ªë
        /// </summary>
        /// <param name="formattedValue">Chu·ªói ƒë√£ format theo chu·∫©n Vi·ªát Nam</param>
        /// <returns>Gi√° tr·ªã s·ªë</returns>
        public static decimal ParseFormattedNumber(string formattedValue)
        {
            if (string.IsNullOrWhiteSpace(formattedValue))
                return 0;

            // Lo·∫°i b·ªè t·∫•t c·∫£ k√Ω t·ª± kh√¥ng ph·∫£i s·ªë, d·∫•u ph·∫©y v√† d·∫•u ch·∫•m
            string cleanValue = formattedValue.Trim();

            // Lo·∫°i b·ªè c√°c ƒë∆°n v·ªã ti·ªÅn t·ªá
            cleanValue = cleanValue.Replace(" VND", "")
                                  .Replace(" tri·ªáu", "")
                                  .Replace(" t·ª∑", "")
                                  .Replace(" ngh√¨n", "")
                                  .Replace("%", "")
                                  .Trim();

            if (decimal.TryParse(cleanValue, NumberStyles.Number, VietnameseCulture, out decimal result))
            {
                return result;
            }

            return 0;
        }

        /// <summary>
        /// Validate input ch·ªâ cho ph√©p k√Ω t·ª± s·ªë, d·∫•u ph·∫©y v√† d·∫•u ch·∫•m
        /// </summary>
        /// <param name="input">Chu·ªói input</param>
        /// <returns>Chu·ªói ƒë√£ clean</returns>
        public static string SanitizeNumberInput(string input)
        {
            if (string.IsNullOrEmpty(input))
                return "";

            // Ch·ªâ cho ph√©p: s·ªë (0-9), d·∫•u ph·∫©y (,), d·∫•u ch·∫•m (.), d·∫•u √¢m (-)
            return System.Text.RegularExpressions.Regex.Replace(input, @"[^\d,.\-]", "");
        }

        /// <summary>
        /// L·∫•y CultureInfo Vi·ªát Nam
        /// </summary>
        public static CultureInfo GetVietnameseCulture()
        {
            return VietnameseCulture;
        }
    }
}
