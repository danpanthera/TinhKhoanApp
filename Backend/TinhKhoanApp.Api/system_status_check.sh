#!/bin/bash

# ====================================
# KI·ªÇM TRA T·ªîNG QUAN H·ªÜ TH·ªêNG - SYSTEM STATUS CHECK
# ====================================

echo "üìä KI·ªÇM TRA T·ªîNG QUAN H·ªÜ TH·ªêNG TINHKHOAN"
echo "========================================="

BASE_URL="http://localhost:5055/api"

echo "üîç 1. KI·ªÇM TRA C√ÅC TH√ÄNH PH·∫¶N C·ªêT L√ïI:"
echo "-------------------------------------"

# Roles
ROLES_COUNT=$(curl -s "${BASE_URL}/Roles" | jq '. | length')
echo "‚úÖ Roles (Vai tr√≤): $ROLES_COUNT/23 (m·ª•c ti√™u)"

# Positions
POSITIONS_COUNT=$(curl -s "${BASE_URL}/Positions" | jq '. | length')
echo "‚úÖ Positions (Ch·ª©c v·ª•): $POSITIONS_COUNT"

# Units
UNITS_COUNT=$(curl -s "${BASE_URL}/Units" | jq '. | length')
echo "‚úÖ Units (ƒê∆°n v·ªã): $UNITS_COUNT"

# Employees
EMPLOYEES_COUNT=$(curl -s "${BASE_URL}/Employees" | jq '. | length')
echo "‚úÖ Employees (Nh√¢n vi√™n): $EMPLOYEES_COUNT"

echo ""
echo "üóìÔ∏è 2. KI·ªÇM TRA K·ª≤ KHO√ÅN:"
echo "------------------------"

# KhoanPeriods
PERIODS_COUNT=$(curl -s "${BASE_URL}/KhoanPeriods" | jq '. | length')
echo "‚úÖ KhoanPeriods (K·ª≥ kho√°n): $PERIODS_COUNT"

if [ "$PERIODS_COUNT" -gt 0 ]; then
    echo "   üìã C√°c k·ª≥ kho√°n hi·ªán t·∫°i:"
    curl -s "${BASE_URL}/KhoanPeriods" | jq -r '.[:5] | .[] | "   - \(.Name) (\(.Type)) - \(.Status)"'
    if [ "$PERIODS_COUNT" -gt 5 ]; then
        echo "   ... v√† $(($PERIODS_COUNT - 5)) k·ª≥ kh√°c"
    fi
fi

echo ""
echo "üéØ 3. KI·ªÇM TRA H·ªÜ TH·ªêNG KPI:"
echo "---------------------------"

# KPI Definitions
KPI_DEFINITIONS_COUNT=$(curl -s "${BASE_URL}/KPIDefinitions" | jq '. | length')
echo "‚úÖ KPI Definitions (ƒê·ªãnh nghƒ©a KPI): $KPI_DEFINITIONS_COUNT"

# KPI Assignment Tables
KPI_TABLES_COUNT=$(curl -s "${BASE_URL}/KpiAssignmentTables" | jq '. | length')
echo "‚úÖ KPI Assignment Tables (B·∫£ng giao KPI): $KPI_TABLES_COUNT/32 (m·ª•c ti√™u)"

# KPI Indicators
KPI_INDICATORS_COUNT=$(curl -s "${BASE_URL}/KpiIndicators" | jq '. | length')
echo "‚úÖ KPI Indicators (Ch·ªâ ti√™u KPI): $KPI_INDICATORS_COUNT"

echo ""
echo "üìà 4. KI·ªÇM TRA T√çNH NƒÇNG CRUD:"
echo "-----------------------------"

# Test GET endpoints
echo "üîó API Endpoints:"
endpoints=("Roles" "Positions" "Units" "Employees" "KhoanPeriods" "KPIDefinitions" "KpiAssignmentTables")

for endpoint in "${endpoints[@]}"; do
    status_code=$(curl -s -o /dev/null -w "%{http_code}" "${BASE_URL}/$endpoint")
    if [ "$status_code" -eq 200 ]; then
        echo "   ‚úÖ $endpoint: Ho·∫°t ƒë·ªông ($status_code)"
    else
        echo "   ‚ùå $endpoint: L·ªói ($status_code)"
    fi
done

echo ""
echo "üéâ T·ªîNG K·∫æT:"
echo "============"

# T√≠nh t·ªïng ƒëi·ªÉm
total_checks=0
passed_checks=0

# Check roles
if [ "$ROLES_COUNT" -eq 23 ]; then
    echo "‚úÖ Roles: HO√ÄN TH√ÄNH (23/23)"
    ((passed_checks++))
else
    echo "‚ö†Ô∏è Roles: C·∫ßn ki·ªÉm tra ($ROLES_COUNT/23)"
fi
((total_checks++))

# Check positions
if [ "$POSITIONS_COUNT" -gt 0 ]; then
    echo "‚úÖ Positions: HO√ÄN TH√ÄNH ($POSITIONS_COUNT)"
    ((passed_checks++))
else
    echo "‚ùå Positions: Ch∆∞a c√≥ d·ªØ li·ªáu"
fi
((total_checks++))

# Check employees
if [ "$EMPLOYEES_COUNT" -gt 0 ]; then
    echo "‚úÖ Employees: HO√ÄN TH√ÄNH ($EMPLOYEES_COUNT)"
    ((passed_checks++))
else
    echo "‚ùå Employees: Ch∆∞a c√≥ d·ªØ li·ªáu"
fi
((total_checks++))

# Check periods
if [ "$PERIODS_COUNT" -gt 0 ]; then
    echo "‚úÖ KhoanPeriods: HO√ÄN TH√ÄNH ($PERIODS_COUNT k·ª≥)"
    ((passed_checks++))
else
    echo "‚ùå KhoanPeriods: Ch∆∞a c√≥ d·ªØ li·ªáu"
fi
((total_checks++))

# Check KPI system
if [ "$KPI_TABLES_COUNT" -eq 32 ] && [ "$KPI_DEFINITIONS_COUNT" -gt 0 ]; then
    echo "‚úÖ KPI System: HO√ÄN TH√ÄNH ($KPI_TABLES_COUNT b·∫£ng, $KPI_DEFINITIONS_COUNT ƒë·ªãnh nghƒ©a)"
    ((passed_checks++))
else
    echo "‚ö†Ô∏è KPI System: M·ªôt ph·∫ßn ($KPI_TABLES_COUNT/32 b·∫£ng, $KPI_DEFINITIONS_COUNT ƒë·ªãnh nghƒ©a)"
fi
((total_checks++))

echo ""
echo "üìä K·∫øt qu·∫£: $passed_checks/$total_checks th√†nh ph·∫ßn ho·∫°t ƒë·ªông t·ªët"

percentage=$((passed_checks * 100 / total_checks))
if [ "$percentage" -ge 80 ]; then
    echo "üéâ H·ªá th·ªëng ƒë√£ s·∫µn s√†ng ($percentage%)"
elif [ "$percentage" -ge 60 ]; then
    echo "‚ö†Ô∏è H·ªá th·ªëng c·∫ßn m·ªôt s·ªë ƒëi·ªÅu ch·ªânh ($percentage%)"
else
    echo "‚ùå H·ªá th·ªëng c·∫ßn kh·∫Øc ph·ª•c nhi·ªÅu v·∫•n ƒë·ªÅ ($percentage%)"
fi

echo ""
echo "üöÄ C√ÅC CH·ª®C NƒÇNG ƒê√É S·∫¥N S√ÄNG:"
echo "- ‚úÖ Qu·∫£n l√Ω 23 vai tr√≤ chu·∫©n"
echo "- ‚úÖ CRUD Positions (Ch·ª©c v·ª•)"
echo "- ‚úÖ CRUD KhoanPeriods (K·ª≥ kho√°n)"
echo "- ‚úÖ H·ªá th·ªëng KPI v·ªõi 32 b·∫£ng c·∫•u h√¨nh"
echo "- ‚úÖ Frontend hi·ªÉn th·ªã Units v√† d·ªØ li·ªáu c∆° b·∫£n"
