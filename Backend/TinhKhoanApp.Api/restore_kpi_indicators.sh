#!/bin/bash

# ====================================
# KH√îI PH·ª§C KPI INDICATORS - RESTORE KPI INDICATORS FROM DEFINITIONS
# ====================================

echo "üîß KH√îI PH·ª§C KPI INDICATORS T·ª™ DEFINITIONS..."
echo "============================================="

BASE_URL="http://localhost:5055/api"

echo "üìä Ki·ªÉm tra t√¨nh tr·∫°ng hi·ªán t·∫°i..."
CURRENT_INDICATORS=$(curl -s "${BASE_URL}/KpiIndicators" | jq '. | length')
CURRENT_TABLES=$(curl -s "${BASE_URL}/KpiAssignmentTables" | jq '. | length')
CURRENT_DEFINITIONS=$(curl -s "${BASE_URL}/KPIDefinitions" | jq '. | length')

echo "S·ªë KPI Indicators hi·ªán t·∫°i: $CURRENT_INDICATORS"
echo "S·ªë KPI Assignment Tables: $CURRENT_TABLES"
echo "S·ªë KPI Definitions: $CURRENT_DEFINITIONS"

if [ "$CURRENT_DEFINITIONS" -eq 0 ]; then
    echo "‚ùå Ch∆∞a c√≥ KPI Definitions. Vui l√≤ng ch·∫°y restore KPI Definitions tr∆∞·ªõc!"
    exit 1
fi

if [ "$CURRENT_TABLES" -eq 0 ]; then
    echo "‚ùå Ch∆∞a c√≥ KPI Assignment Tables. Vui l√≤ng ch·∫°y seed KPI tables tr∆∞·ªõc!"
    exit 1
fi

echo ""
echo "üöÄ G·ªçi API ƒë·ªÉ t·∫°o indicators t·ª´ definitions..."

# G·ªçi API SeedKpi ƒë·ªÉ t·∫°o indicators
response=$(curl -s -w "%{http_code}" -X POST "${BASE_URL}/SeedKpi/create-indicators-from-definitions" -o /tmp/indicators_response.txt)
http_code="${response: -3}"

if [ "$http_code" -eq 200 ] || [ "$http_code" -eq 204 ]; then
    echo "‚úÖ T·∫°o indicators t·ª´ definitions th√†nh c√¥ng!"
    if [ -f /tmp/indicators_response.txt ]; then
        cat /tmp/indicators_response.txt | jq .
    fi
else
    echo "‚ùå L·ªói khi t·∫°o indicators (HTTP: $http_code)"
    if [ -f /tmp/indicators_response.txt ]; then
        echo "Response:"
        cat /tmp/indicators_response.txt
    fi
    echo ""
    echo "üîÑ Th·ª≠ ph∆∞∆°ng ph√°p th·ªß c√¥ng..."

    # L·∫•y danh s√°ch tables v√† t·∫°o indicators cho t·ª´ng table
    echo "üìã L·∫•y danh s√°ch KPI tables..."
    curl -s "${BASE_URL}/KpiAssignmentTables" | jq -r '.[] | "\(.Id):\(.TableName):\(.Category)"' > /tmp/kpi_tables.txt

    while IFS=':' read -r table_id table_name category; do
        echo "üîÑ X·ª≠ l√Ω b·∫£ng: $table_name (ID: $table_id)"

        # T√¨m roleCode t·ª´ table name (b·ªè suffix _KPI_Assignment)
        role_code=$(echo "$table_name" | sed 's/_KPI_Assignment$//')

        # L·∫•y definitions cho role n√†y
        definitions=$(curl -s "${BASE_URL}/KPIDefinitions" | jq --arg role "$role_code" '[.[] | select(.roleCode == $role)]')
        definition_count=$(echo "$definitions" | jq '. | length')

        if [ "$definition_count" -gt 0 ]; then
            echo "   üìã T√¨m th·∫•y $definition_count definitions cho role: $role_code"

            # T·∫°o indicators cho t·ª´ng definition
            echo "$definitions" | jq -c '.[]' | while read -r def; do
                name=$(echo "$def" | jq -r '.name')
                max_score=$(echo "$def" | jq -r '.maxScore')
                unit=$(echo "$def" | jq -r '.unit // "ƒêi·ªÉm"')
                order_index=$(echo "$def" | jq -r '.orderIndex // 1')

                indicator_data=$(cat <<EOF
{
    "tableId": $table_id,
    "indicatorName": "$name",
    "maxScore": $max_score,
    "unit": "$unit",
    "orderIndex": $order_index,
    "valueType": 0,
    "isActive": true
}
EOF
)

                echo "      üìù T·∫°o indicator: $name ($max_score ƒëi·ªÉm)"
                response=$(curl -s -w "%{http_code}" -X POST "${BASE_URL}/KpiIndicators" \
                    -H "Content-Type: application/json" \
                    -d "$indicator_data" -o /dev/null)

                if [[ "${response: -3}" =~ ^(200|201)$ ]]; then
                    echo "         ‚úÖ Th√†nh c√¥ng"
                else
                    echo "         ‚ùå Th·∫•t b·∫°i (${response: -3})"
                fi
            done
        else
            echo "   ‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y definitions cho role: $role_code"
        fi

    done < /tmp/kpi_tables.txt
fi

echo ""
echo "üìä Ki·ªÉm tra k·∫øt qu·∫£:"
echo "==================="

# Ki·ªÉm tra l·∫°i s·ªë l∆∞·ª£ng
NEW_INDICATORS=$(curl -s "${BASE_URL}/KpiIndicators" | jq '. | length')
echo "T·ªïng s·ªë KPI Indicators sau khi restore: $NEW_INDICATORS"

if [ "$NEW_INDICATORS" -gt 0 ]; then
    echo ""
    echo "üìã Th·ªëng k√™ indicators theo b·∫£ng:"
    echo "=================================="

    # L·∫•y summary t·ª´ API
    curl -s "${BASE_URL}/KpiIndicators/summary" | jq -r '
        "üìä T·ªïng quan:",
        "- T·ªïng indicators: \(.TotalIndicators)",
        "- T·ªïng tables: \(.TotalTables)",
        "",
        "üìã Ph√¢n lo·∫°i:",
        (.CategoryBreakdown[] | "- \(.Category): \(.TotalIndicators) indicators tr√™n \(.TotalTables) tables")
    '

    echo ""
    echo "üéØ M·ªôt s·ªë indicators m·∫´u:"
    curl -s "${BASE_URL}/KpiIndicators" | jq -r '.[:5] | .[] | "ID \(.Id): \(.IndicatorName) - \(.MaxScore) \(.Unit) (Table: \(.TableId))"'

    if [ "$NEW_INDICATORS" -gt 5 ]; then
        echo "... v√† $(($NEW_INDICATORS - 5)) indicators kh√°c"
    fi
else
    echo "‚ùå Kh√¥ng c√≥ KPI Indicators n√†o ƒë∆∞·ª£c t·∫°o"
fi

echo ""
echo "üéâ HO√ÄN TH√ÄNH RESTORE KPI INDICATORS!"
echo "H·ªá th·ªëng KPI ƒë√£ c√≥ ƒë·∫ßy ƒë·ªß indicators cho t·∫•t c·∫£ c√°c b·∫£ng."
