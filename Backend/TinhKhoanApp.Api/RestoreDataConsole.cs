using Microsoft.EntityFrameworkCore;
using TinhKhoanApp.Api.Data;

// Read and execute restore_original_data.sql
var configuration = new ConfigurationBuilder()
    .SetBasePath(Directory.GetCurrentDirectory())
    .AddJsonFile("appsettings.json")
    .AddJsonFile("appsettings.Development.json", optional: true)
    .Build();

var connectionString = configuration.GetConnectionString("DefaultConnection");

var optionsBuilder = new DbContextOptionsBuilder<ApplicationDbContext>();
optionsBuilder.UseSqlServer(connectionString);

using var context = new ApplicationDbContext(optionsBuilder.Options);

try
{
    Console.WriteLine("üîÑ B·∫Øt ƒë·∫ßu kh√¥i ph·ª•c d·ªØ li·ªáu g·ªëc...");

    // ƒê·ªçc script SQL
    var sqlScript = await File.ReadAllTextAsync("restore_original_data.sql");

    // Execute SQL script
    await context.Database.ExecuteSqlRawAsync(sqlScript);

    // Verify results
    var unitsCount = await context.Units.CountAsync(u => !u.IsDeleted);
    var positionsCount = await context.Positions.CountAsync();
    var employeesCount = await context.Employees.CountAsync(e => e.IsActive);

    Console.WriteLine("‚úÖ ƒê√£ kh√¥i ph·ª•c d·ªØ li·ªáu g·ªëc th√†nh c√¥ng!");
    Console.WriteLine($"   - ƒê∆°n v·ªã: {unitsCount} records");
    Console.WriteLine($"   - Ch·ª©c v·ª•: {positionsCount} records");
    Console.WriteLine($"   - Nh√¢n vi√™n: {employeesCount} records");
}
catch (Exception ex)
{
    Console.WriteLine($"‚ùå L·ªói khi kh√¥i ph·ª•c d·ªØ li·ªáu: {ex.Message}");
    Console.WriteLine($"Chi ti·∫øt: {ex}");
}
