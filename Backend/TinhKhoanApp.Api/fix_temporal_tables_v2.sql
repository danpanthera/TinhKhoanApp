-- Script s·ª≠a ch·ªØa temporal tables v√† t·ªëi ∆∞u hi·ªáu nƒÉng
-- ƒê·∫£m b·∫£o t·∫•t c·∫£ b·∫£ng c√≥ c·∫•u h√¨nh temporal ƒë√∫ng c√°ch

USE [TinhKhoanDB];
GO

PRINT 'üîß B·∫Øt ƒë·∫ßu s·ª≠a ch·ªØa temporal tables...';

-- S·ª≠a ch·ªØa b·∫£ng ImportedDataRecords
PRINT 'üìä Ki·ªÉm tra v√† s·ª≠a ch·ªØa ImportedDataRecords...';

IF EXISTS (SELECT 1 FROM sys.tables WHERE name = 'ImportedDataRecords')
BEGIN
    -- T·∫Øt temporal n·∫øu ƒëang c√≥ v·∫•n ƒë·ªÅ
    IF EXISTS (SELECT 1 FROM sys.tables WHERE name = 'ImportedDataRecords_History')
    BEGIN
        BEGIN TRY
            ALTER TABLE [ImportedDataRecords] SET (SYSTEM_VERSIONING = OFF);
            DROP TABLE [ImportedDataRecords_History];
            PRINT '‚úÖ ƒê√£ t·∫Øt temporal c≈© c√≥ v·∫•n ƒë·ªÅ';
        END TRY
        BEGIN CATCH
            PRINT '‚ö†Ô∏è Kh√¥ng th·ªÉ t·∫Øt temporal: ' + ERROR_MESSAGE();
        END CATCH
    END
    
    -- Th√™m c·ªôt temporal n·∫øu ch∆∞a c√≥
    IF NOT EXISTS (SELECT 1 FROM sys.columns WHERE name = 'SysStartTime' AND object_id = OBJECT_ID('ImportedDataRecords'))
    BEGIN
        ALTER TABLE [ImportedDataRecords] ADD 
            [SysStartTime] datetime2 GENERATED ALWAYS AS ROW START NOT NULL DEFAULT SYSUTCDATETIME(),
            [SysEndTime] datetime2 GENERATED ALWAYS AS ROW END NOT NULL DEFAULT CONVERT(datetime2, '9999-12-31 23:59:59.9999999'),
            PERIOD FOR SYSTEM_TIME ([SysStartTime], [SysEndTime]);
        PRINT '‚úÖ ƒê√£ th√™m c·ªôt temporal cho ImportedDataRecords';
    END
    
    -- Th√™m c·ªôt CompressionRatio n·∫øu ch∆∞a c√≥
    IF NOT EXISTS (SELECT 1 FROM sys.columns WHERE name = 'CompressionRatio' AND object_id = OBJECT_ID('ImportedDataRecords'))
    BEGIN
        ALTER TABLE [ImportedDataRecords] ADD [CompressionRatio] float NOT NULL DEFAULT 0.0;
        PRINT '‚úÖ ƒê√£ th√™m c·ªôt CompressionRatio';
    END
    
    -- B·∫≠t temporal versioning
    BEGIN TRY
        ALTER TABLE [ImportedDataRecords] SET (SYSTEM_VERSIONING = ON (HISTORY_TABLE = [dbo].[ImportedDataRecords_History]));
        PRINT '‚úÖ ƒê√£ b·∫≠t temporal versioning cho ImportedDataRecords';
    END TRY
    BEGIN CATCH
        PRINT '‚ö†Ô∏è Kh√¥ng th·ªÉ b·∫≠t temporal versioning: ' + ERROR_MESSAGE();
    END CATCH
END

-- S·ª≠a ch·ªØa b·∫£ng ImportedDataItems  
PRINT 'üìä Ki·ªÉm tra v√† s·ª≠a ch·ªØa ImportedDataItems...';

IF EXISTS (SELECT 1 FROM sys.tables WHERE name = 'ImportedDataItems')
BEGIN
    -- T·∫Øt temporal n·∫øu ƒëang c√≥ v·∫•n ƒë·ªÅ
    IF EXISTS (SELECT 1 FROM sys.tables WHERE name = 'ImportedDataItems_History')
    BEGIN
        BEGIN TRY
            ALTER TABLE [ImportedDataItems] SET (SYSTEM_VERSIONING = OFF);
            DROP TABLE [ImportedDataItems_History];
            PRINT '‚úÖ ƒê√£ t·∫Øt temporal c≈© c√≥ v·∫•n ƒë·ªÅ';
        END TRY
        BEGIN CATCH
            PRINT '‚ö†Ô∏è Kh√¥ng th·ªÉ t·∫Øt temporal: ' + ERROR_MESSAGE();
        END CATCH
    END
    
    -- Th√™m c·ªôt temporal n·∫øu ch∆∞a c√≥
    IF NOT EXISTS (SELECT 1 FROM sys.columns WHERE name = 'SysStartTime' AND object_id = OBJECT_ID('ImportedDataItems'))
    BEGIN
        ALTER TABLE [ImportedDataItems] ADD 
            [SysStartTime] datetime2 GENERATED ALWAYS AS ROW START NOT NULL DEFAULT SYSUTCDATETIME(),
            [SysEndTime] datetime2 GENERATED ALWAYS AS ROW END NOT NULL DEFAULT CONVERT(datetime2, '9999-12-31 23:59:59.9999999'),
            PERIOD FOR SYSTEM_TIME ([SysStartTime], [SysEndTime]);
        PRINT '‚úÖ ƒê√£ th√™m c·ªôt temporal cho ImportedDataItems';
    END
    
    -- B·∫≠t temporal versioning
    BEGIN TRY
        ALTER TABLE [ImportedDataItems] SET (SYSTEM_VERSIONING = ON (HISTORY_TABLE = [dbo].[ImportedDataItems_History]));
        PRINT '‚úÖ ƒê√£ b·∫≠t temporal versioning cho ImportedDataItems';
    END TRY
    BEGIN CATCH
        PRINT '‚ö†Ô∏è Kh√¥ng th·ªÉ b·∫≠t temporal versioning: ' + ERROR_MESSAGE();
    END CATCH
END

-- T·∫°o indexes cho hi·ªáu nƒÉng
PRINT 'üìà T·∫°o indexes t·ªëi ∆∞u hi·ªáu nƒÉng...';

-- Index cho ImportedDataRecords
IF NOT EXISTS (SELECT 1 FROM sys.indexes WHERE name = 'IX_ImportedDataRecords_StatementDate' AND object_id = OBJECT_ID('ImportedDataRecords'))
BEGIN
    CREATE INDEX [IX_ImportedDataRecords_StatementDate] ON [ImportedDataRecords] ([StatementDate]);
    PRINT '‚úÖ ƒê√£ t·∫°o index StatementDate cho ImportedDataRecords';
END

IF NOT EXISTS (SELECT 1 FROM sys.indexes WHERE name = 'IX_ImportedDataRecords_Category_ImportDate' AND object_id = OBJECT_ID('ImportedDataRecords'))
BEGIN
    CREATE INDEX [IX_ImportedDataRecords_Category_ImportDate] ON [ImportedDataRecords] ([Category], [ImportDate]);
    PRINT '‚úÖ ƒê√£ t·∫°o index Category_ImportDate cho ImportedDataRecords';
END

-- Index cho ImportedDataItems
IF NOT EXISTS (SELECT 1 FROM sys.indexes WHERE name = 'IX_ImportedDataItems_ProcessedDate' AND object_id = OBJECT_ID('ImportedDataItems'))
BEGIN
    CREATE INDEX [IX_ImportedDataItems_ProcessedDate] ON [ImportedDataItems] ([ProcessedDate]);
    PRINT '‚úÖ ƒê√£ t·∫°o index ProcessedDate cho ImportedDataItems';
END

IF NOT EXISTS (SELECT 1 FROM sys.indexes WHERE name = 'IX_ImportedDataItems_RecordId' AND object_id = OBJECT_ID('ImportedDataItems'))
BEGIN
    CREATE INDEX [IX_ImportedDataItems_RecordId] ON [ImportedDataItems] ([ImportedDataRecordId]);
    PRINT '‚úÖ ƒê√£ t·∫°o index RecordId cho ImportedDataItems';
END

-- T·∫°o Columnstore Index cho analytics (ch·ªâ n·∫øu c√≥ d·ªØ li·ªáu)
IF EXISTS (SELECT 1 FROM [ImportedDataItems]) AND 
   NOT EXISTS (SELECT 1 FROM sys.indexes WHERE name = 'IX_ImportedDataItems_Columnstore' AND object_id = OBJECT_ID('ImportedDataItems'))
BEGIN
    BEGIN TRY
        CREATE NONCLUSTERED COLUMNSTORE INDEX [IX_ImportedDataItems_Columnstore]
        ON [ImportedDataItems] ([ImportedDataRecordId], [ProcessedDate])
        WHERE [ProcessedDate] >= '2024-01-01';
        PRINT '‚úÖ ƒê√£ t·∫°o Columnstore Index cho analytics';
    END TRY
    BEGIN CATCH
        PRINT '‚ö†Ô∏è Kh√¥ng th·ªÉ t·∫°o Columnstore Index: ' + ERROR_MESSAGE();
    END CATCH
END

-- Ki·ªÉm tra k·∫øt qu·∫£ cu·ªëi c√πng
PRINT 'üîç Ki·ªÉm tra tr·∫°ng th√°i temporal tables...';

SELECT 
    t.name AS TableName,
    CASE t.temporal_type 
        WHEN 0 THEN 'Non-temporal'
        WHEN 1 THEN 'History table'
        WHEN 2 THEN 'System-versioned temporal'
    END AS TemporalType,
    h.name AS HistoryTableName
FROM sys.tables t
LEFT JOIN sys.tables h ON t.history_table_id = h.object_id
WHERE t.name IN ('ImportedDataRecords', 'ImportedDataItems')
ORDER BY t.name;

PRINT '‚úÖ Ho√†n th√†nh s·ª≠a ch·ªØa temporal tables v√† t·ªëi ∆∞u hi·ªáu nƒÉng!';
