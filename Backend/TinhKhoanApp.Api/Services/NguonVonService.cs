using Microsoft.EntityFrameworkCore;
using TinhKhoanApp.Api.Data;
using TinhKhoanApp.Api.Models.NguonVon;
using TinhKhoanApp.Api.Services.Interfaces;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace TinhKhoanApp.Api.Services
{
    /// <summary>
    /// Service t√≠nh to√°n ngu·ªìn v·ªën t·ª´ b·∫£ng DP01
    /// </summary>
    public class NguonVonService : INguonVonService
    {
        private readonly ApplicationDbContext _context;
        private readonly ILogger<NguonVonService> _logger;

        // Mapping m√£ chi nh√°nh theo y√™u c·∫ßu
        private readonly Dictionary<string, string> _branchMapping = new Dictionary<string, string>
        {
            { "HoiSo", "7800" },           // H·ªôi s·ªü
            { "CnBinhLu", "7801" },        // Chi nh√°nh B√¨nh L∆∞ (Tam ƒê∆∞·ªùng c≈©)
            { "CnPhongTho", "7802" },      // Chi nh√°nh Phong Th·ªï
            { "CnSinHo", "7803" },         // Chi nh√°nh S√¨n H·ªì
            { "CnBumTo", "7804" },         // Chi nh√°nh Bum T·ªü (M∆∞·ªùng T√® c≈©)
            { "CnThanUyen", "7805" },      // Chi nh√°nh Than Uy√™n
            { "CnDoanKet", "7806" },       // Chi nh√°nh ƒêo√†n K·∫øt (Th√†nh Ph·ªë c≈©)
            { "CnTanUyen", "7807" },       // Chi nh√°nh T√¢n Uy√™n
            { "CnNamHang", "7808" }        // Chi nh√°nh N·∫≠m H√†ng (N·∫≠m Nh√πn c≈©)
        };

        // Mapping PGD theo y√™u c·∫ßu
        private readonly Dictionary<string, (string branchCode, string pgdCode)> _pgdMapping = new Dictionary<string, (string, string)>
        {
            { "CnPhongThoPgdSo5", ("7802", "01") },    // CN Phong Th·ªï - PGD S·ªë 5 (M∆∞·ªùng So c≈©)
            { "CnThanUyenPgdSo6", ("7805", "01") },    // CN Than Uy√™n - PGD S·ªë 6 (M∆∞·ªùng Than c≈©)
            { "CnDoanKetPgdSo1", ("7806", "01") },     // CN ƒêo√†n K·∫øt - PGD S·ªë 1
            { "CnDoanKetPgdSo2", ("7806", "02") },     // CN ƒêo√†n K·∫øt - PGD S·ªë 2
            { "CnTanUyenPgdSo3", ("7807", "01") }      // CN T√¢n Uy√™n - PGD S·ªë 3
        };

        public NguonVonService(ApplicationDbContext context, ILogger<NguonVonService> logger)
        {
            _context = context;
            _logger = logger;
        }

        /// <summary>
        /// X√°c ƒë·ªãnh ng√†y target d·ª±a tr√™n lo·∫°i input
        /// </summary>
        public DateTime DetermineTargetDate(DateTime inputDate, string dateType)
        {
            switch (dateType?.ToLower())
            {
                case "year":
                    // N·∫øu input l√† nƒÉm th√¨ l·∫•y ng√†y cu·ªëi nƒÉm (31/12/yyyy)
                    return new DateTime(inputDate.Year, 12, 31);

                case "month":
                    // N·∫øu input l√† th√°ng th√¨ l·∫•y ng√†y cu·ªëi th√°ng
                    var daysInMonth = DateTime.DaysInMonth(inputDate.Year, inputDate.Month);
                    return new DateTime(inputDate.Year, inputDate.Month, daysInMonth);

                case "day":
                default:
                    // N·∫øu input l√† ng√†y c·ª• th·ªÉ th√¨ l·∫•y ng√†y ƒë√≥
                    return inputDate.Date;
            }
        }

        /// <summary>
        /// T√≠nh to√°n ngu·ªìn v·ªën theo ƒë∆°n v·ªã v√† ng√†y
        /// </summary>
        public async Task<NguonVonResult> CalculateNguonVonAsync(string unitCode, DateTime targetDate)
        {
            try
            {
                _logger.LogInformation("üìä B·∫Øt ƒë·∫ßu t√≠nh to√°n ngu·ªìn v·ªën cho ƒë∆°n v·ªã: {Unit}, ng√†y: {Date}", unitCode, targetDate.ToString("dd/MM/yyyy"));

                // N·∫øu ch·ªçn "T·∫•t c·∫£ ƒë∆°n v·ªã" th√¨ t√≠nh t·ªïng cho to√†n t·ªânh
                if (unitCode == "ALL" || unitCode == "TatCaDonVi")
                {
                    return await CalculateAllUnitsAsync(targetDate);
                }

                // T√≠nh cho ƒë∆°n v·ªã c·ª• th·ªÉ (chi nh√°nh ho·∫∑c PGD)
                return await CalculateSingleUnitAsync(unitCode, targetDate);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "‚ùå L·ªói khi t√≠nh to√°n ngu·ªìn v·ªën cho {Unit}", unitCode);
                throw;
            }
        }

        /// <summary>
        /// T√≠nh ngu·ªìn v·ªën cho m·ªôt ƒë∆°n v·ªã c·ª• th·ªÉ
        /// </summary>
        private async Task<NguonVonResult> CalculateSingleUnitAsync(string unitCode, DateTime targetDate)
        {
            // X√°c ƒë·ªãnh m√£ chi nh√°nh v√† PGD
            string maCN = null;
            string maPGD = null;

            // Ki·ªÉm tra xem c√≥ ph·∫£i l√† PGD kh√¥ng
            if (_pgdMapping.ContainsKey(unitCode))
            {
                var pgdInfo = _pgdMapping[unitCode];
                maCN = pgdInfo.branchCode;
                maPGD = pgdInfo.pgdCode;
                _logger.LogInformation("üè¶ T√≠nh cho PGD: {Unit} -> CN: {Branch}, PGD: {PGD}", unitCode, maCN, maPGD);
            }
            else if (_branchMapping.ContainsKey(unitCode))
            {
                maCN = _branchMapping[unitCode];
                _logger.LogInformation("üè¢ T√≠nh cho Chi nh√°nh: {Unit} -> M√£: {Branch}", unitCode, maCN);
            }
            else
            {
                throw new ArgumentException($"Kh√¥ng t√¨m th·∫•y m√£ ƒë∆°n v·ªã: {unitCode}");
            }

            // Query d·ªØ li·ªáu t·ª´ DP01 theo ng√†y v√† chi nh√°nh
            var query = _context.DP01s
                .Where(d => d.NgayDL == targetDate.ToString("dd/MM/yyyy") && d.MA_CN == maCN);

            // N·∫øu l√† PGD th√¨ l·ªçc th√™m theo MA_PGD
            if (!string.IsNullOrEmpty(maPGD))
            {
                query = query.Where(d => d.MA_PGD == maPGD);
            }

            // L·ªçc t√†i kho·∫£n theo ƒëi·ªÅu ki·ªán: b·ªè ƒëi 40*, 41*, 427*, 211108
            query = query.Where(d =>
                !d.TAI_KHOAN_HACH_TOAN.StartsWith("40") &&
                !d.TAI_KHOAN_HACH_TOAN.StartsWith("41") &&
                !d.TAI_KHOAN_HACH_TOAN.StartsWith("427") &&
                d.TAI_KHOAN_HACH_TOAN != "211108"
            );

            // T√≠nh t·ªïng CURRENT_BALANCE
            var totalBalance = await query.SumAsync(d => d.CURRENT_BALANCE ?? 0);
            var recordCount = await query.CountAsync();

            _logger.LogInformation("üí∞ K·∫øt qu·∫£ t√≠nh to√°n: {Balance:N0} VND t·ª´ {Count} b·∫£n ghi", totalBalance, recordCount);

            // N·∫øu kh√¥ng c√≥ d·ªØ li·ªáu th√¨ ki·ªÉm tra xem c√≥ b·∫£n ghi n√†o kh√¥ng
            if (totalBalance == 0 && recordCount == 0)
            {
                var hasAnyData = await _context.DP01s
                    .AnyAsync(d => d.NgayDL == targetDate.ToString("dd/MM/yyyy") && d.MA_CN == maCN);

                if (!hasAnyData)
                {
                    _logger.LogWarning("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu cho ng√†y {Date} v√† m√£ CN {Branch}", targetDate.ToString("dd/MM/yyyy"), maCN);
                    return null; // Kh√¥ng c√≥ d·ªØ li·ªáu cho ng√†y n√†y
                }
            }

            return new NguonVonResult
            {
                UnitCode = unitCode,
                UnitName = GetUnitName(unitCode),
                TotalBalance = totalBalance,
                CalculatedDate = targetDate,
                RecordCount = recordCount
            };
        }

        /// <summary>
        /// T√≠nh ngu·ªìn v·ªën cho t·∫•t c·∫£ ƒë∆°n v·ªã (to√†n t·ªânh)
        /// </summary>
        private async Task<NguonVonResult> CalculateAllUnitsAsync(DateTime targetDate)
        {
            _logger.LogInformation("üåç T√≠nh to√°n ngu·ªìn v·ªën to√†n t·ªânh (m√£ 7800-7808)");

            // L·∫•y t·∫•t c·∫£ m√£ chi nh√°nh (7800-7808)
            var allBranchCodes = _branchMapping.Values.ToList();

            // Query t·ªïng cho t·∫•t c·∫£ chi nh√°nh
            var query = _context.DP01s
                .Where(d => d.NgayDL == targetDate.ToString("dd/MM/yyyy") && allBranchCodes.Contains(d.MA_CN))
                .Where(d =>
                    !d.TAI_KHOAN_HACH_TOAN.StartsWith("40") &&
                    !d.TAI_KHOAN_HACH_TOAN.StartsWith("41") &&
                    !d.TAI_KHOAN_HACH_TOAN.StartsWith("427") &&
                    d.TAI_KHOAN_HACH_TOAN != "211108"
                );

            var totalBalance = await query.SumAsync(d => d.CURRENT_BALANCE ?? 0);
            var recordCount = await query.CountAsync();

            _logger.LogInformation("üí∞ T·ªïng ngu·ªìn v·ªën to√†n t·ªânh: {Balance:N0} VND t·ª´ {Count} b·∫£n ghi", totalBalance, recordCount);

            // Ki·ªÉm tra xem c√≥ d·ªØ li·ªáu kh√¥ng
            if (totalBalance == 0 && recordCount == 0)
            {
                var hasAnyData = await _context.DP01s
                    .AnyAsync(d => d.NgayDL == targetDate.ToString("dd/MM/yyyy") && allBranchCodes.Contains(d.MA_CN));

                if (!hasAnyData)
                {
                    _logger.LogWarning("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu to√†n t·ªânh cho ng√†y {Date}", targetDate.ToString("dd/MM/yyyy"));
                    return null; // Kh√¥ng c√≥ d·ªØ li·ªáu cho ng√†y n√†y
                }
            }

            return new NguonVonResult
            {
                UnitCode = "ALL",
                UnitName = "T·∫•t c·∫£ ƒë∆°n v·ªã (To√†n t·ªânh)",
                TotalBalance = totalBalance,
                CalculatedDate = targetDate,
                RecordCount = recordCount
            };
        }

        /// <summary>
        /// L·∫•y chi ti·∫øt ngu·ªìn v·ªën ƒë·ªÉ debug
        /// </summary>
        public async Task<NguonVonDetails> GetNguonVonDetailsAsync(string unitCode, DateTime targetDate)
        {
            // T√≠nh to√°n t·ªïng k·∫øt
            var result = await CalculateNguonVonAsync(unitCode, targetDate);

            if (result == null)
            {
                return new NguonVonDetails
                {
                    Message = "Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu cho ng√†y ch·ªâ ƒë·ªãnh",
                    HasData = false
                };
            }

            // L·∫•y chi ti·∫øt c√°c t√†i kho·∫£n (top 20 c√≥ s·ªë d∆∞ l·ªõn nh·∫•t)
            string maCN = null;
            string maPGD = null;

            if (_pgdMapping.ContainsKey(unitCode))
            {
                var pgdInfo = _pgdMapping[unitCode];
                maCN = pgdInfo.branchCode;
                maPGD = pgdInfo.pgdCode;
            }
            else if (_branchMapping.ContainsKey(unitCode))
            {
                maCN = _branchMapping[unitCode];
            }
            else if (unitCode == "ALL")
            {
                // X·ª≠ l√Ω t·∫•t c·∫£ ƒë∆°n v·ªã
                var allBranchCodes = _branchMapping.Values.ToList();
                var accountDetails = await _context.DP01s
                    .Where(d => d.NgayDL == targetDate.ToString("dd/MM/yyyy") && allBranchCodes.Contains(d.MA_CN))
                    .Where(d =>
                        !d.TAI_KHOAN_HACH_TOAN.StartsWith("40") &&
                        !d.TAI_KHOAN_HACH_TOAN.StartsWith("41") &&
                        !d.TAI_KHOAN_HACH_TOAN.StartsWith("427") &&
                        d.TAI_KHOAN_HACH_TOAN != "211108"
                    )
                    .GroupBy(d => d.TAI_KHOAN_HACH_TOAN)
                    .Select(g => new AccountDetail
                    {
                        AccountCode = g.Key,
                        TotalBalance = g.Sum(x => x.CURRENT_BALANCE ?? 0),
                        RecordCount = g.Count()
                    })
                    .OrderByDescending(a => a.TotalBalance)
                    .Take(20)
                    .ToListAsync();

                return new NguonVonDetails
                {
                    Summary = result,
                    TopAccounts = accountDetails,
                    HasData = true,
                    Message = "Th√†nh c√¥ng"
                };
            }

            // L·∫•y chi ti·∫øt cho ƒë∆°n v·ªã c·ª• th·ªÉ
            if (!string.IsNullOrEmpty(maCN))
            {
                var query = _context.DP01s
                    .Where(d => d.NgayDL == targetDate.ToString("dd/MM/yyyy") && d.MA_CN == maCN)
                    .Where(d =>
                        !d.TAI_KHOAN_HACH_TOAN.StartsWith("40") &&
                        !d.TAI_KHOAN_HACH_TOAN.StartsWith("41") &&
                        !d.TAI_KHOAN_HACH_TOAN.StartsWith("427") &&
                        d.TAI_KHOAN_HACH_TOAN != "211108"
                    );

                // N·∫øu l√† PGD th√¨ l·ªçc th√™m
                if (!string.IsNullOrEmpty(maPGD))
                {
                    query = query.Where(d => d.MA_PGD == maPGD);
                }

                var accountDetails = await query
                    .GroupBy(d => d.TAI_KHOAN_HACH_TOAN)
                    .Select(g => new AccountDetail
                    {
                        AccountCode = g.Key,
                        TotalBalance = g.Sum(x => x.CURRENT_BALANCE ?? 0),
                        RecordCount = g.Count()
                    })
                    .OrderByDescending(a => a.TotalBalance)
                    .Take(20)
                    .ToListAsync();

                return new NguonVonDetails
                {
                    Summary = result,
                    TopAccounts = accountDetails,
                    HasData = true,
                    Message = "Th√†nh c√¥ng"
                };
            }

            return new NguonVonDetails
            {
                Summary = result,
                TopAccounts = new List<AccountDetail>(),
                HasData = true,
                Message = "Th√†nh c√¥ng"
            };
        }

        /// <summary>
        /// L·∫•y t√™n ƒë∆°n v·ªã t·ª´ m√£
        /// </summary>
        private string GetUnitName(string unitCode)
        {
            var unitNames = new Dictionary<string, string>
            {
                { "HoiSo", "H·ªôi s·ªü" },
                { "CnBinhLu", "Chi nh√°nh B√¨nh L∆∞" },
                { "CnPhongTho", "Chi nh√°nh Phong Th·ªï" },
                { "CnSinHo", "Chi nh√°nh S√¨n H·ªì" },
                { "CnBumTo", "Chi nh√°nh Bum T·ªü" },
                { "CnThanUyen", "Chi nh√°nh Than Uy√™n" },
                { "CnDoanKet", "Chi nh√°nh ƒêo√†n K·∫øt" },
                { "CnTanUyen", "Chi nh√°nh T√¢n Uy√™n" },
                { "CnNamHang", "Chi nh√°nh N·∫≠m H√†ng" },
                { "CnPhongThoPgdSo5", "CN Phong Th·ªï - PGD S·ªë 5" },
                { "CnThanUyenPgdSo6", "CN Than Uy√™n - PGD S·ªë 6" },
                { "CnDoanKetPgdSo1", "CN ƒêo√†n K·∫øt - PGD S·ªë 1" },
                { "CnDoanKetPgdSo2", "CN ƒêo√†n K·∫øt - PGD S·ªë 2" },
                { "CnTanUyenPgdSo3", "CN T√¢n Uy√™n - PGD S·ªë 3" },
                { "ALL", "T·∫•t c·∫£ ƒë∆°n v·ªã (To√†n t·ªânh)" }
            };

            return unitNames.ContainsKey(unitCode) ? unitNames[unitCode] : unitCode;
        }
    }
}
