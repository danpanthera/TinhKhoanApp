using System;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;
using TinhKhoanApp.Api.Data;
using System.Text.Json;

namespace TinhKhoanApp.Api.Services
{
    /// <summary>
    /// Service t√≠nh to√°n 6 ch·ªâ ti√™u ch√≠nh theo quy ∆∞·ªõc m·ªõi
    /// CN Lai Ch√¢u (9999) = t·ªïng c·ªßa 9 CN c√≤n l·∫°i (7800-7808)
    /// </summary>
    public interface IBranchCalculationService
    {
        Task<decimal> CalculateNguonVonByBranch(string branchId, DateTime? date = null);
        Task<decimal> CalculateDuNoByBranch(string branchId, DateTime? date = null);
        Task<decimal> CalculateNoXauByBranch(string branchId, DateTime? date = null);
        Task<decimal> CalculateThuHoiXLRRByBranch(string branchId, DateTime? date = null);
        Task<decimal> CalculateThuDichVuByBranch(string branchId, DateTime? date = null);
        Task<decimal> CalculateLoiNhuanByBranch(string branchId, DateTime? date = null);
    }

    public class BranchCalculationService : IBranchCalculationService
    {
        private readonly ApplicationDbContext _context;
        private readonly ILogger<BranchCalculationService> _logger;

        public BranchCalculationService(
            ApplicationDbContext context,
            ILogger<BranchCalculationService> logger)
        {
            _context = context;
            _logger = logger;
        }

        /// <summary>
        /// 1. Ngu·ªìn v·ªën - t·ª´ b·∫£ng DP01 (Mock data)
        /// </summary>
        public async Task<decimal> CalculateNguonVonByBranch(string branchId, DateTime? date = null)
        {
            try
            {
                _logger.LogInformation("B·∫Øt ƒë·∫ßu t√≠nh Ngu·ªìn v·ªën cho chi nh√°nh {BranchId}", branchId);

                if (branchId == "CnLaiChau")
                {
                    // CN Lai Ch√¢u = t·ªïng c·ªßa 9 CN (7800-7808)
                    var totalNguonVon = 0m;
                    var branchCodes = new[] { "7800", "7801", "7802", "7803", "7804", "7805", "7806", "7807", "7808" };

                    foreach (var code in branchCodes)
                    {
                        var branchValue = await CalculateNguonVonForSingleBranch(code, null, date);
                        totalNguonVon += branchValue;
                    }

                    _logger.LogInformation("T·ªïng Ngu·ªìn v·ªën CN Lai Ch√¢u: {Total}", totalNguonVon);
                    return totalNguonVon;
                }
                else
                {
                    // Chi nh√°nh ƒë∆°n l·∫ª ho·∫∑c PGD
                    var branchCode = GetBranchCode(branchId);
                    var pgdCode = GetPgdCode(branchId);

                    return await CalculateNguonVonForSingleBranch(branchCode, pgdCode, date);
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "L·ªói t√≠nh Ngu·ªìn v·ªën cho chi nh√°nh {BranchId}", branchId);
                return 0m;
            }
        }

        private async Task<decimal> CalculateNguonVonForSingleBranch(string branchCode, string? pgdCode, DateTime? date)
        {
            try
            {
                // L·∫•y d·ªØ li·ªáu th·ª±c t·ª´ b·∫£ng DP01 theo ng√†y c·ª• th·ªÉ
                var dp01Data = await GetDP01DataForBranch(branchCode, pgdCode, date);

                if (dp01Data.Any())
                {
                    var totalNguonVon = CalculateNguonVonFromDP01(dp01Data, branchCode, pgdCode);
                    _logger.LogInformation("Ngu·ªìn v·ªën th·ª±c t·∫ø t·ª´ DP01 ng√†y {Date} - Chi nh√°nh {BranchCode} PGD {PgdCode}: {Total}",
                        date?.ToString("dd/MM/yyyy") ?? "latest", branchCode, pgdCode ?? "ALL", totalNguonVon);
                    return totalNguonVon;
                }
                else
                {
                    // N·∫øu kh√¥ng c√≥ d·ªØ li·ªáu th·ª±c cho ng√†y ƒë√≥
                    var dateStr = date?.ToString("dd/MM/yyyy") ?? "latest";
                    _logger.LogWarning("‚ùå Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu DP01 cho ng√†y {Date}, chi nh√°nh {BranchCode}", dateStr, branchCode);
                    throw new InvalidOperationException($"Kh√¥ng c√≥ d·ªØ li·ªáu ngu·ªìn v·ªën cho ng√†y {dateStr}, chi nh√°nh {branchCode}");
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "L·ªói t√≠nh Ngu·ªìn v·ªën cho chi nh√°nh {BranchCode} ng√†y {Date}", branchCode, date?.ToString("dd/MM/yyyy"));
                throw;
            }
        }

        /// <summary>
        /// 2. D∆∞ n·ª£ - t·ª´ b·∫£ng LN01 (Mock data)
        /// </summary>
        public async Task<decimal> CalculateDuNoByBranch(string branchId, DateTime? date = null)
        {
            try
            {
                _logger.LogInformation("B·∫Øt ƒë·∫ßu t√≠nh D∆∞ n·ª£ cho chi nh√°nh {BranchId}", branchId);

                if (branchId == "CnLaiChau")
                {
                    // CN Lai Ch√¢u = t·ªïng to√†n t·ªânh
                    var branchCodes = new[] { "7800", "7801", "7802", "7803", "7804", "7805", "7806", "7807", "7808" };
                    var totalDuNo = 0m;

                    foreach (var code in branchCodes)
                    {
                        var branchValue = await CalculateDuNoForSingleBranch(code, null, date);
                        totalDuNo += branchValue;
                    }

                    _logger.LogInformation("T·ªïng D∆∞ n·ª£ CN Lai Ch√¢u: {Total}", totalDuNo);
                    return totalDuNo;
                }
                else
                {
                    var branchCode = GetBranchCode(branchId);
                    var trctCode = GetTrctCode(branchId);

                    return await CalculateDuNoForSingleBranch(branchCode, trctCode, date);
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "L·ªói t√≠nh D∆∞ n·ª£ cho chi nh√°nh {BranchId}", branchId);
                return 0m;
            }
        }

        private async Task<decimal> CalculateDuNoForSingleBranch(string branchCode, string? trctCode, DateTime? date)
        {
            try
            {
                // TODO: Implement real LN01 data calculation when available
                // For now, using improved mock data that's proportional to branch size

                await Task.Delay(50); // Simulate async operation

                // Base amounts for different branch sizes (in VND)
                var mockData = branchCode switch
                {
                    "7800" => trctCode switch
                    {
                        "01" => 45.2m * 1_000_000_000,  // PGD 1: ~45.2 t·ª∑
                        "02" => 38.7m * 1_000_000_000,  // PGD 2: ~38.7 t·ª∑
                        _ => 187.6m * 1_000_000_000     // H·ªôi S·ªü total: ~187.6 t·ª∑
                    },
                    "7801" => 156.3m * 1_000_000_000,   // CN Tam ƒê∆∞·ªùng: ~156.3 t·ª∑
                    "7802" => 134.8m * 1_000_000_000,   // CN Phong Th·ªï: ~134.8 t·ª∑
                    "7803" => 98.2m * 1_000_000_000,    // CN Sin H·ªì: ~98.2 t·ª∑
                    "7804" => 76.4m * 1_000_000_000,    // CN M∆∞·ªùng T√®: ~76.4 t·ª∑
                    "7805" => 143.7m * 1_000_000_000,   // CN Than Uy√™n: ~143.7 t·ª∑
                    "7806" => 165.5m * 1_000_000_000,   // CN Th√†nh Ph·ªë: ~165.5 t·ª∑
                    "7807" => 124.9m * 1_000_000_000,   // CN T√¢n Uy√™n: ~124.9 t·ª∑
                    "7808" => 89.1m * 1_000_000_000,    // CN N·∫≠m Nh√πn: ~89.1 t·ª∑
                    _ => 120.0m * 1_000_000_000         // Default: ~120 t·ª∑
                };

                _logger.LogInformation("üí≥ D∆∞ n·ª£ t√≠n d·ª•ng (mock) - Chi nh√°nh {BranchCode} TRCT {TrctCode}: {Total:F2} t·ª∑",
                    branchCode, trctCode ?? "ALL", mockData / 1_000_000_000);

                return mockData;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "L·ªói t√≠nh D∆∞ n·ª£ cho chi nh√°nh {BranchCode}", branchCode);
                return 0m;
            }
        }

        /// <summary>
        /// 3. N·ª£ x·∫•u - t·ª´ b·∫£ng LN01 (Mock data)
        /// </summary>
        public async Task<decimal> CalculateNoXauByBranch(string branchId, DateTime? date = null)
        {
            try
            {
                _logger.LogInformation("B·∫Øt ƒë·∫ßu t√≠nh N·ª£ x·∫•u cho chi nh√°nh {BranchId}", branchId);

                if (branchId == "CnLaiChau")
                {
                    // CN Lai Ch√¢u = t·ª∑ l·ªá to√†n t·ªânh
                    var branchCodes = new[] { "7800", "7801", "7802", "7803", "7804", "7805", "7806", "7807", "7808" };
                    var totalDuNo = 0m;
                    var totalDuNoXau = 0m;

                    foreach (var code in branchCodes)
                    {
                        var duNo = await CalculateDuNoForSingleBranch(code, null, date);
                        var noXauRate = await CalculateNoXauForSingleBranch(code, null, date);

                        totalDuNo += duNo;
                        totalDuNoXau += duNo * (noXauRate / 100);
                    }

                    var tyLe = totalDuNo > 0 ? (totalDuNoXau / totalDuNo) * 100 : 0;
                    _logger.LogInformation("T·ª∑ l·ªá n·ª£ x·∫•u CN Lai Ch√¢u: {Rate}%", tyLe);
                    return tyLe;
                }
                else
                {
                    var branchCode = GetBranchCode(branchId);
                    var trctCode = GetTrctCode(branchId);

                    return await CalculateNoXauForSingleBranch(branchCode, trctCode, date);
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "L·ªói t√≠nh N·ª£ x·∫•u cho chi nh√°nh {BranchId}", branchId);
                return 0m;
            }
        }

        private async Task<decimal> CalculateNoXauForSingleBranch(string branchCode, string? trctCode, DateTime? date)
        {
            try
            {
                // TODO: Implement real LN01 data calculation when available
                // NPL rate should be realistic (typically 0.5% - 3% for different branches)

                await Task.Delay(50); // Simulate async operation

                var mockNplRate = branchCode switch
                {
                    "7800" => trctCode switch
                    {
                        "01" => 1.15m,  // PGD 1: 1.15%
                        "02" => 1.35m,  // PGD 2: 1.35%
                        _ => 0.85m      // H·ªôi S·ªü: 0.85%
                    },
                    "7801" => 0.76m,    // CN Tam ƒê∆∞·ªùng: 0.76%
                    "7802" => 1.42m,    // CN Phong Th·ªï: 1.42%
                    "7803" => 2.18m,    // CN Sin H·ªì: 2.18%
                    "7804" => 1.67m,    // CN M∆∞·ªùng T√®: 1.67%
                    "7805" => 1.23m,    // CN Than Uy√™n: 1.23%
                    "7806" => 0.94m,    // CN Th√†nh Ph·ªë: 0.94%
                    "7807" => 1.56m,    // CN T√¢n Uy√™n: 1.56%
                    "7808" => 2.05m,    // CN N·∫≠m Nh√πn: 2.05%
                    _ => 1.50m          // Default: 1.50%
                };

                _logger.LogInformation("‚ö†Ô∏è T·ª∑ l·ªá n·ª£ x·∫•u (mock) - Chi nh√°nh {BranchCode} TRCT {TrctCode}: {Rate:F2}%",
                    branchCode, trctCode ?? "ALL", mockNplRate);

                return mockNplRate;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "L·ªói t√≠nh N·ª£ x·∫•u cho chi nh√°nh {BranchCode}", branchCode);
                return 1.50m; // Default NPL rate
            }
        }

        // C√°c ch·ªâ ti√™u kh√°c s·∫Ω ƒë∆∞·ª£c implement t∆∞∆°ng t·ª±
        public async Task<decimal> CalculateThuHoiXLRRByBranch(string branchId, DateTime? date = null)
        {
            try
            {
                _logger.LogInformation("B·∫Øt ƒë·∫ßu t√≠nh Thu h·ªìi XLRR cho chi nh√°nh {BranchId}", branchId);

                if (branchId == "CnLaiChau")
                {
                    // CN Lai Ch√¢u = t·ªïng to√†n t·ªânh
                    var branchCodes = new[] { "7800", "7801", "7802", "7803", "7804", "7805", "7806", "7807", "7808" };
                    var totalThuHoi = 0m;

                    foreach (var code in branchCodes)
                    {
                        var branchValue = await CalculateThuHoiXLRRForSingleBranch(code, null, date);
                        totalThuHoi += branchValue;
                    }

                    _logger.LogInformation("T·ªïng Thu h·ªìi XLRR CN Lai Ch√¢u: {Total:F2} t·ª∑", totalThuHoi / 1_000_000_000);
                    return totalThuHoi;
                }
                else
                {
                    var branchCode = GetBranchCode(branchId);
                    var trctCode = GetTrctCode(branchId);
                    return await CalculateThuHoiXLRRForSingleBranch(branchCode, trctCode, date);
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "L·ªói t√≠nh Thu h·ªìi XLRR cho chi nh√°nh {BranchId}", branchId);
                return 0m;
            }
        }

        private async Task<decimal> CalculateThuHoiXLRRForSingleBranch(string branchCode, string? trctCode, DateTime? date)
        {
            try
            {
                // TODO: Implement real XLRR recovery data calculation when available
                await Task.Delay(50);

                var mockData = branchCode switch
                {
                    "7800" => trctCode switch
                    {
                        "01" => 3.2m * 1_000_000_000,   // PGD 1: ~3.2 t·ª∑
                        "02" => 2.8m * 1_000_000_000,   // PGD 2: ~2.8 t·ª∑
                        _ => 12.4m * 1_000_000_000      // H·ªôi S·ªü total: ~12.4 t·ª∑
                    },
                    "7801" => 8.7m * 1_000_000_000,     // CN Tam ƒê∆∞·ªùng: ~8.7 t·ª∑
                    "7802" => 6.9m * 1_000_000_000,     // CN Phong Th·ªï: ~6.9 t·ª∑
                    "7803" => 4.8m * 1_000_000_000,     // CN Sin H·ªì: ~4.8 t·ª∑
                    "7804" => 3.6m * 1_000_000_000,     // CN M∆∞·ªùng T√®: ~3.6 t·ª∑
                    "7805" => 7.2m * 1_000_000_000,     // CN Than Uy√™n: ~7.2 t·ª∑
                    "7806" => 9.8m * 1_000_000_000,     // CN Th√†nh Ph·ªë: ~9.8 t·ª∑
                    "7807" => 6.3m * 1_000_000_000,     // CN T√¢n Uy√™n: ~6.3 t·ª∑
                    "7808" => 4.1m * 1_000_000_000,     // CN N·∫≠m Nh√πn: ~4.1 t·ª∑
                    _ => 5.0m * 1_000_000_000           // Default: ~5 t·ª∑
                };

                _logger.LogInformation("üè¶ Thu h·ªìi XLRR (mock) - Chi nh√°nh {BranchCode} TRCT {TrctCode}: {Total:F2} t·ª∑",
                    branchCode, trctCode ?? "ALL", mockData / 1_000_000_000);

                return mockData;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "L·ªói t√≠nh Thu h·ªìi XLRR cho chi nh√°nh {BranchCode}", branchCode);
                return 0m;
            }
        }

        public async Task<decimal> CalculateThuDichVuByBranch(string branchId, DateTime? date = null)
        {
            try
            {
                _logger.LogInformation("B·∫Øt ƒë·∫ßu t√≠nh Thu d·ªãch v·ª• cho chi nh√°nh {BranchId}", branchId);

                if (branchId == "CnLaiChau")
                {
                    // CN Lai Ch√¢u = t·ªïng to√†n t·ªânh
                    var branchCodes = new[] { "7800", "7801", "7802", "7803", "7804", "7805", "7806", "7807", "7808" };
                    var totalThuDichVu = 0m;

                    foreach (var code in branchCodes)
                    {
                        var branchValue = await CalculateThuDichVuForSingleBranch(code, null, date);
                        totalThuDichVu += branchValue;
                    }

                    _logger.LogInformation("T·ªïng Thu d·ªãch v·ª• CN Lai Ch√¢u: {Total:F2} t·ª∑", totalThuDichVu / 1_000_000_000);
                    return totalThuDichVu;
                }
                else
                {
                    var branchCode = GetBranchCode(branchId);
                    var trctCode = GetTrctCode(branchId);
                    return await CalculateThuDichVuForSingleBranch(branchCode, trctCode, date);
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "L·ªói t√≠nh Thu d·ªãch v·ª• cho chi nh√°nh {BranchId}", branchId);
                return 0m;
            }
        }

        private async Task<decimal> CalculateThuDichVuForSingleBranch(string branchCode, string? trctCode, DateTime? date)
        {
            try
            {
                // TODO: Implement real service income data calculation when available
                await Task.Delay(50);

                var mockData = branchCode switch
                {
                    "7800" => trctCode switch
                    {
                        "01" => 8.5m * 1_000_000_000,   // PGD 1: ~8.5 t·ª∑
                        "02" => 7.2m * 1_000_000_000,   // PGD 2: ~7.2 t·ª∑
                        _ => 28.9m * 1_000_000_000      // H·ªôi S·ªü total: ~28.9 t·ª∑
                    },
                    "7801" => 22.6m * 1_000_000_000,    // CN Tam ƒê∆∞·ªùng: ~22.6 t·ª∑
                    "7802" => 18.3m * 1_000_000_000,    // CN Phong Th·ªï: ~18.3 t·ª∑
                    "7803" => 14.2m * 1_000_000_000,    // CN Sin H·ªì: ~14.2 t·ª∑
                    "7804" => 11.5m * 1_000_000_000,    // CN M∆∞·ªùng T√®: ~11.5 t·ª∑
                    "7805" => 20.4m * 1_000_000_000,    // CN Than Uy√™n: ~20.4 t·ª∑
                    "7806" => 26.7m * 1_000_000_000,    // CN Th√†nh Ph·ªë: ~26.7 t·ª∑
                    "7807" => 19.8m * 1_000_000_000,    // CN T√¢n Uy√™n: ~19.8 t·ª∑
                    "7808" => 13.1m * 1_000_000_000,    // CN N·∫≠m Nh√πn: ~13.1 t·ª∑
                    _ => 15.0m * 1_000_000_000          // Default: ~15 t·ª∑
                };

                _logger.LogInformation("üè¶ Thu d·ªãch v·ª• (mock) - Chi nh√°nh {BranchCode} TRCT {TrctCode}: {Total:F2} t·ª∑",
                    branchCode, trctCode ?? "ALL", mockData / 1_000_000_000);

                return mockData;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "L·ªói t√≠nh Thu d·ªãch v·ª• cho chi nh√°nh {BranchCode}", branchCode);
                return 0m;
            }
        }

        public async Task<decimal> CalculateLoiNhuanByBranch(string branchId, DateTime? date = null)
        {
            try
            {
                _logger.LogInformation("B·∫Øt ƒë·∫ßu t√≠nh L·ª£i nhu·∫≠n cho chi nh√°nh {BranchId}", branchId);

                if (branchId == "CnLaiChau")
                {
                    // CN Lai Ch√¢u = t·ªïng to√†n t·ªânh
                    var branchCodes = new[] { "7800", "7801", "7802", "7803", "7804", "7805", "7806", "7807", "7808" };
                    var totalLoiNhuan = 0m;

                    foreach (var code in branchCodes)
                    {
                        var branchValue = await CalculateLoiNhuanForSingleBranch(code, null, date);
                        totalLoiNhuan += branchValue;
                    }

                    _logger.LogInformation("T·ªïng L·ª£i nhu·∫≠n CN Lai Ch√¢u: {Total:F2} t·ª∑", totalLoiNhuan / 1_000_000_000);
                    return totalLoiNhuan;
                }
                else
                {
                    var branchCode = GetBranchCode(branchId);
                    var trctCode = GetTrctCode(branchId);
                    return await CalculateLoiNhuanForSingleBranch(branchCode, trctCode, date);
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "L·ªói t√≠nh L·ª£i nhu·∫≠n cho chi nh√°nh {BranchId}", branchId);
                return 0m;
            }
        }

        private async Task<decimal> CalculateLoiNhuanForSingleBranch(string branchCode, string? trctCode, DateTime? date)
        {
            try
            {
                // TODO: Implement real profit calculation when available
                await Task.Delay(50);

                var mockData = branchCode switch
                {
                    "7800" => trctCode switch
                    {
                        "01" => 45.8m * 1_000_000_000,  // PGD 1: ~45.8 t·ª∑
                        "02" => 38.2m * 1_000_000_000,  // PGD 2: ~38.2 t·ª∑
                        _ => 156.4m * 1_000_000_000     // H·ªôi S·ªü total: ~156.4 t·ª∑
                    },
                    "7801" => 124.7m * 1_000_000_000,   // CN Tam ƒê∆∞·ªùng: ~124.7 t·ª∑
                    "7802" => 108.2m * 1_000_000_000,   // CN Phong Th·ªï: ~108.2 t·ª∑
                    "7803" => 89.6m * 1_000_000_000,    // CN Sin H·ªì: ~89.6 t·ª∑
                    "7804" => 67.8m * 1_000_000_000,    // CN M∆∞·ªùng T√®: ~67.8 t·ª∑
                    "7805" => 118.9m * 1_000_000_000,   // CN Than Uy√™n: ~118.9 t·ª∑
                    "7806" => 142.3m * 1_000_000_000,   // CN Th√†nh Ph·ªë: ~142.3 t·ª∑
                    "7807" => 105.6m * 1_000_000_000,   // CN T√¢n Uy√™n: ~105.6 t·ª∑
                    "7808" => 78.4m * 1_000_000_000,    // CN N·∫≠m Nh√πn: ~78.4 t·ª∑
                    _ => 90.0m * 1_000_000_000          // Default: ~90 t·ª∑
                };

                _logger.LogInformation("üíµ L·ª£i nhu·∫≠n (mock) - Chi nh√°nh {BranchCode} TRCT {TrctCode}: {Total:F2} t·ª∑",
                    branchCode, trctCode ?? "ALL", mockData / 1_000_000_000);

                return mockData;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "L·ªói t√≠nh L·ª£i nhu·∫≠n cho chi nh√°nh {BranchCode}", branchCode);
                return 0m;
            }
        }

        /// <summary>
        /// Mapping BranchId th√†nh m√£ chi nh√°nh
        /// </summary>
        private string GetBranchCode(string branchId)
        {
            return branchId switch
            {
                "HoiSo" => "7800",
                "CnTamDuong" => "7801",
                "CnPhongTho" => "7802",
                "CnSinHo" => "7803",
                "CnMuongTe" => "7804",
                "CnThanUyen" => "7805",
                "CnThanhPho" => "7806",
                "CnTanUyen" => "7807",
                "CnNamNhun" => "7808",
                "CnPhongThoPgdMuongSo" => "7802",
                "CnThanUyenPgdMuongThan" => "7805",
                "CnThanhPhoPgdSo1" => "7806",
                "CnThanhPhoPgdSo2" => "7806",
                "CnTanUyenPgdSo3" => "7807",
                _ => "7800" // Default H·ªôi S·ªü
            };
        }

        /// <summary>
        /// Mapping BranchId th√†nh m√£ PGD cho DP01
        /// </summary>
        private string? GetPgdCode(string branchId)
        {
            return branchId switch
            {
                "CnPhongThoPgdMuongSo" => "01",
                "CnThanUyenPgdMuongThan" => "01",
                "CnThanhPhoPgdSo1" => "01",
                "CnThanhPhoPgdSo2" => "02",
                "CnTanUyenPgdSo3" => "01",
                _ => null // Chi nh√°nh ch√≠nh, kh√¥ng c√≥ PGD
            };
        }

        /// <summary>
        /// Mapping BranchId th√†nh m√£ TRCTCD cho LN01
        /// </summary>
        private string? GetTrctCode(string branchId)
        {
            return branchId switch
            {
                "CnPhongThoPgdMuongSo" => "01",
                "CnThanUyenPgdMuongThan" => "01",
                "CnThanhPhoPgdSo1" => "01",
                "CnThanhPhoPgdSo2" => "02",
                "CnTanUyenPgdSo3" => "01",
                _ => null // Chi nh√°nh ch√≠nh, kh√¥ng c√≥ TRCTCD
            };
        }

        /// <summary>
        /// L·∫•y d·ªØ li·ªáu DP01 t·ª´ database theo chi nh√°nh v√† PGD
        /// </summary>
        private async Task<List<dynamic>> GetDP01DataForBranch(string branchCode, string? pgdCode, DateTime? date = null)
        {
            try
            {
                _logger.LogInformation("üîç T√¨m d·ªØ li·ªáu DP01 cho chi nh√°nh {BranchCode}, PGD {PgdCode}, ng√†y {Date}",
                    branchCode, pgdCode ?? "NULL", date?.ToString("dd/MM/yyyy") ?? "latest");

                // X√¢y d·ª±ng query cho ImportedDataRecords c√≥ category DP01
                var query = _context.ImportedDataRecords.Where(x => x.Category == "DP01");

                // L·ªçc theo ng√†y n·∫øu c√≥ tham s·ªë date
                if (date.HasValue)
                {
                    // T√¨m d·ªØ li·ªáu cho ng√†y c·ª• th·ªÉ
                    query = query.Where(x => x.StatementDate.HasValue && x.StatementDate.Value.Date == date.Value.Date);
                }
                else
                {
                    // N·∫øu kh√¥ng c√≥ tham s·ªë date, l·∫•y ng√†y g·∫ßn nh·∫•t
                    var latestDate = await _context.ImportedDataRecords
                        .Where(x => x.Category == "DP01" && x.StatementDate.HasValue)
                        .MaxAsync(x => x.StatementDate);

                    if (latestDate.HasValue)
                    {
                        query = query.Where(x => x.StatementDate.HasValue && x.StatementDate.Value.Date == latestDate.Value.Date);
                        _logger.LogInformation("üìÖ S·ª≠ d·ª•ng ng√†y g·∫ßn nh·∫•t: {LatestDate}", latestDate.Value.ToString("dd/MM/yyyy"));
                    }
                }

                var dp01Records = await query.ToListAsync();

                _logger.LogInformation("üìÑ T√¨m th·∫•y {Count} records DP01 trong database cho ƒëi·ªÅu ki·ªán l·ªçc", dp01Records.Count);

                if (!dp01Records.Any())
                {
                    var dateStr = date?.ToString("dd/MM/yyyy") ?? "ng√†y g·∫ßn nh·∫•t";
                    _logger.LogWarning("‚ùå Kh√¥ng t√¨m th·∫•y records DP01 n√†o cho {DateStr}", dateStr);
                    return new List<dynamic>();
                }

                var allItems = new List<dynamic>();
                int processedRecords = 0;
                int totalItems = 0;
                int matchedItems = 0;

                foreach (var record in dp01Records)
                {
                    processedRecords++;
                    _logger.LogInformation("üîß X·ª≠ l√Ω record {Index}/{Total}: {FileName}", processedRecords, dp01Records.Count, record.FileName);

                    var items = await _context.ImportedDataItems
                        .Where(x => x.ImportedDataRecordId == record.Id)
                        .Select(x => x.RawData)
                        .ToListAsync();

                    totalItems += items.Count;
                    _logger.LogInformation("üìä Record {FileName} c√≥ {ItemCount} items", record.FileName, items.Count);

                    foreach (var rawData in items)
                    {
                        try
                        {
                            var jsonDoc = JsonDocument.Parse(rawData);
                            var root = jsonDoc.RootElement;

                            // Ki·ªÉm tra MA_CN v√† MA_PGD
                            var maCn = root.TryGetProperty("MA_CN", out var maCnProp) ? maCnProp.GetString() : "";
                            var maPgd = root.TryGetProperty("MA_PGD", out var maPgdProp) ? maPgdProp.GetString() : "";
                            var taiKhoanHachToan = root.TryGetProperty("TAI_KHOAN_HACH_TOAN", out var tkProp) ? tkProp.GetString() : "";

                            // Parse CURRENT_BALANCE - c√≥ th·ªÉ l√† string ho·∫∑c number
                            decimal currentBalance = 0;
                            if (root.TryGetProperty("CURRENT_BALANCE", out var balanceProp))
                            {
                                if (balanceProp.ValueKind == JsonValueKind.Number)
                                {
                                    currentBalance = balanceProp.GetDecimal();
                                }
                                else if (balanceProp.ValueKind == JsonValueKind.String)
                                {
                                    decimal.TryParse(balanceProp.GetString(), out currentBalance);
                                }
                            }

                            // L·ªçc theo chi nh√°nh v√† PGD - s·ª≠ d·ª•ng logic ƒë∆°n gi·∫£n h∆°n ƒë·ªÉ kh·ªõp v·ªõi direct calculation
                            bool pgdMatch = string.IsNullOrEmpty(pgdCode) || maPgd == pgdCode;

                            if (maCn == branchCode && pgdMatch && !string.IsNullOrEmpty(taiKhoanHachToan))
                            {
                                matchedItems++;
                                allItems.Add(new
                                {
                                    MA_CN = maCn,
                                    MA_PGD = maPgd,
                                    TAI_KHOAN_HACH_TOAN = taiKhoanHachToan,
                                    CURRENT_BALANCE = currentBalance
                                });

                                // Log 3 items ƒë·∫ßu ƒë·ªÉ debug
                                if (matchedItems <= 3)
                                {
                                    _logger.LogInformation("‚úÖ Match #{Index}: MA_CN={MaCn}, MA_PGD={MaPgd}, TK={TK}, Balance={Balance}",
                                        matchedItems, maCn, maPgd, taiKhoanHachToan, currentBalance);
                                }
                            }
                        }
                        catch (JsonException ex)
                        {
                            _logger.LogWarning("‚ùå JSON parse error: {Error}", ex.Message);
                        }
                    }
                }

                _logger.LogInformation("üìà K·∫øt qu·∫£: T·ªïng {TotalItems} items, Matched {MatchedItems} items cho {BranchCode}",
                    totalItems, matchedItems, branchCode);

                return allItems;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "üí• L·ªói khi l·∫•y d·ªØ li·ªáu DP01 cho chi nh√°nh {BranchCode}", branchCode);
                return new List<dynamic>();
            }
        }

        /// <summary>
        /// T√≠nh to√°n Ngu·ªìn v·ªën t·ª´ d·ªØ li·ªáu DP01 v·ªõi ƒëi·ªÅu ki·ªán lo·∫°i tr·ª´
        /// Lo·∫°i tr·ª´: TK c√≥ 2 ch·ªØ s·ªë ƒë·∫ßu l√† "40", "41", c√≥ 3 ch·ªØ s·ªë ƒë·∫ßu l√† "427", v√† TK "211108"
        /// </summary>
        private decimal CalculateNguonVonFromDP01(List<dynamic> dp01Data, string branchCode, string? pgdCode)
        {
            decimal totalNguonVon = 0;
            int excludedCount = 0;
            int includedCount = 0;

            foreach (var item in dp01Data)
            {
                var taiKhoan = Convert.ToString(item.TAI_KHOAN_HACH_TOAN) ?? "";
                var balance = Convert.ToDecimal(item.CURRENT_BALANCE);

                // Ki·ªÉm tra t√†i kho·∫£n lo·∫°i tr·ª´: 40*, 41*, 427*, v√† 211108
                bool isExcluded = taiKhoan.StartsWith("40") ||
                                  taiKhoan.StartsWith("41") ||
                                  taiKhoan.StartsWith("427") ||
                                  taiKhoan == "211108";

                if (isExcluded)
                {
                    excludedCount++;
                }
                else
                {
                    includedCount++;
                    totalNguonVon += balance;
                }
            }

            _logger.LogInformation("T√≠nh Ngu·ªìn v·ªën t·ª´ DP01 - Chi nh√°nh {BranchCode} PGD {PgdCode}: " +
                "T·ªïng {Total}, Bao g·ªìm {IncludedCount} TK, Lo·∫°i tr·ª´ {ExcludedCount} TK",
                branchCode, pgdCode ?? "ALL", totalNguonVon, includedCount, excludedCount);

            return totalNguonVon;
        }

    }
}
