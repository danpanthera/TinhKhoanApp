using System.Globalization;
using System.Text.RegularExpressions;
using Microsoft.Extensions.Logging;

namespace TinhKhoanApp.Api.Services
{
    /// <summary>
    /// üîß SERVICE CHU·∫®N H√ìA: Extract th√¥ng tin t·ª´ filename theo format MaCN_LoaiFile_Ngay.ext
    /// ƒê·∫£m b·∫£o ƒë·ªìng nh·∫•t c√°ch l·∫•y th√¥ng tin cho t·∫•t c·∫£ b·∫£ng d·ªØ li·ªáu th√¥
    /// </summary>
    public interface IFileNameParsingService
    {
        /// <summary>
        /// Extract m√£ chi nh√°nh t·ª´ filename - Format: 7800_LN01_20241231.csv
        /// </summary>
        string? ExtractBranchCode(string fileName);

        /// <summary>
        /// Extract lo·∫°i d·ªØ li·ªáu t·ª´ filename - Format: 7800_LN01_20241231.csv ‚Üí LN01
        /// </summary>
        string? ExtractDataTypeFromFilename(string fileName);

        /// <summary>
        /// Extract ng√†y sao k√™ t·ª´ filename - Format: 7800_LN01_20241231.csv ‚Üí 2024-12-31
        /// </summary>
        DateTime? ExtractStatementDate(string fileName);

        /// <summary>
        /// Validate filename c√≥ ƒë√∫ng format chu·∫©n hay kh√¥ng
        /// </summary>
        bool IsValidFormat(string fileName);

        /// <summary>
        /// Parse to√†n b·ªô th√¥ng tin t·ª´ filename
        /// </summary>
        FileNameParseResult ParseFileName(string fileName);
    }

    public class FileNameParseResult
    {
        public bool IsValid { get; set; }
        public string? BranchCode { get; set; }
        public string? DataType { get; set; }
        public DateTime? StatementDate { get; set; }
        public string? Extension { get; set; }
        public string? ErrorMessage { get; set; }
    }

    public class FileNameParsingService : IFileNameParsingService
    {
        private readonly ILogger<FileNameParsingService> _logger;

        // üìã Danh s√°ch ƒë·ªãnh nghƒ©a lo·∫°i d·ªØ li·ªáu - ƒê·ªíNG B·ªò T·∫§T C·∫¢ LO·∫†I
        private static readonly Dictionary<string, string> DataTypeDefinitions = new()
        {
            { "LN01", "D·ªØ li·ªáu LOAN - Danh m·ª•c t√≠n d·ª•ng" },

            { "LN03", "D·ªØ li·ªáu N·ª£ XLRR - N·ª£ x·ª≠ l√Ω r·ªßi ro" },
            { "DP01", "D·ªØ li·ªáu Ti·ªÅn g·ª≠i - Huy ƒë·ªông v·ªën" },
            { "EI01", "D·ªØ li·ªáu mobile banking - Giao d·ªãch ƒëi·ªán t·ª≠" },
            { "GL01", "D·ªØ li·ªáu b√∫t to√°n GDV - Giao d·ªãch vi√™n" },
            { "DPDA", "D·ªØ li·ªáu sao k√™ ph√°t h√†nh th·∫ª - Th·∫ª t√≠n d·ª•ng/ghi n·ª£" },

            { "BC57", "Sao k√™ L√£i d·ª± thu - D·ª± ph√≤ng l√£i" },
            { "RR01", "Sao k√™ d∆∞ n·ª£ g·ªëc, l√£i XLRR - R·ªßi ro t√≠n d·ª•ng" },
            { "GL41", "B·∫£ng c√¢n ƒë·ªëi - B√°o c√°o t√†i ch√≠nh" }
        };

        public FileNameParsingService(ILogger<FileNameParsingService> logger)
        {
            _logger = logger;
        }

        public string? ExtractBranchCode(string fileName)
        {
            try
            {
                _logger.LogInformation("üîç Extracting branch code from filename: {FileName}", fileName);

                // Strategy 1: Format chu·∫©n MaCN_LoaiFile_Ngay.ext (7800_LN01_20241231.csv)
                var standardMatch = Regex.Match(fileName, @"^(78\d{2})_[A-Z0-9_]+_\d{8}\.(csv|xlsx?)", RegexOptions.IgnoreCase);
                if (standardMatch.Success)
                {
                    var branchCode = standardMatch.Groups[1].Value;
                    _logger.LogInformation("‚úÖ Standard format - Branch code: {BranchCode}", branchCode);
                    return branchCode;
                }

                // Strategy 2: Fallback - t√¨m m√£ chi nh√°nh b·∫•t k·ª≥ ƒë√¢u trong filename (78xx)
                var fallbackMatch = Regex.Match(fileName, @"(78\d{2})");
                if (fallbackMatch.Success)
                {
                    var branchCode = fallbackMatch.Groups[1].Value;
                    _logger.LogWarning("‚ö†Ô∏è Non-standard format but found branch code: {BranchCode}", branchCode);
                    return branchCode;
                }

                _logger.LogWarning("‚ùå Kh√¥ng t√¨m th·∫•y m√£ chi nh√°nh trong: {FileName}, s·ª≠ d·ª•ng default 7800", fileName);
                return "7800";
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "‚ùå L·ªói extract branch code t·ª´: {FileName}", fileName);
                return "7800";
            }
        }

        public string? ExtractDataTypeFromFilename(string fileName)
        {
            try
            {
                _logger.LogInformation("üîç Extracting data type from filename: {FileName}", fileName);

                // Strategy 1: Format chu·∫©n MaCN_LoaiFile_Ngay.ext
                var standardMatch = Regex.Match(fileName, @"^78\d{2}_([A-Z0-9_]+)_\d{8}\.(csv|xlsx?)", RegexOptions.IgnoreCase);
                if (standardMatch.Success)
                {
                    var dataType = standardMatch.Groups[1].Value.ToUpper();
                    _logger.LogInformation("‚úÖ Standard format - Data type: {DataType}", dataType);
                    return dataType;
                }

                // Strategy 2: Fallback - t√¨m trong c√°c lo·∫°i ƒë√£ ƒë·ªãnh nghƒ©a
                var definedTypes = DataTypeDefinitions.Keys.ToArray();
                foreach (var type in definedTypes)
                {
                    if (fileName.Contains(type, StringComparison.OrdinalIgnoreCase))
                    {
                        _logger.LogWarning("‚ö†Ô∏è Non-standard format but found data type: {DataType}", type);
                        return type;
                    }
                }

                _logger.LogWarning("‚ùå Kh√¥ng t√¨m th·∫•y lo·∫°i d·ªØ li·ªáu trong: {FileName}", fileName);
                return null;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "‚ùå L·ªói extract data type t·ª´: {FileName}", fileName);
                return null;
            }
        }

        public DateTime? ExtractStatementDate(string fileName)
        {
            try
            {
                _logger.LogInformation("üîç Extracting statement date from filename: {FileName}", fileName);

                // Strategy 1: Format chu·∫©n MaCN_LoaiFile_Ngay.ext (20241231)
                var standardMatch = Regex.Match(fileName, @"^78\d{2}_[A-Z0-9_]+_(\d{8})\.(csv|xlsx?)", RegexOptions.IgnoreCase);
                if (standardMatch.Success)
                {
                    var dateStr = standardMatch.Groups[1].Value;
                    if (DateTime.TryParseExact(dateStr, "yyyyMMdd", null, DateTimeStyles.None, out DateTime date))
                    {
                        _logger.LogInformation("‚úÖ Standard format - Statement date: {Date}", date.ToString("yyyy-MM-dd"));
                        return date;
                    }
                }

                // Strategy 2: Fallback - t√¨m pattern yyyyMMdd b·∫•t k·ª≥ ƒë√¢u
                var fallbackMatch = Regex.Match(fileName, @"(\d{8})");
                if (fallbackMatch.Success)
                {
                    var dateStr = fallbackMatch.Groups[1].Value;
                    if (DateTime.TryParseExact(dateStr, "yyyyMMdd", null, DateTimeStyles.None, out DateTime date))
                    {
                        _logger.LogWarning("‚ö†Ô∏è Non-standard format but found date: {Date}", date.ToString("yyyy-MM-dd"));
                        return date;
                    }
                }

                _logger.LogWarning("‚ùå Kh√¥ng t√¨m th·∫•y ng√†y h·ª£p l·ªá trong: {FileName}, s·ª≠ d·ª•ng ng√†y hi·ªán t·∫°i", fileName);
                return DateTime.Now.Date;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "‚ùå L·ªói extract statement date t·ª´: {FileName}", fileName);
                return DateTime.Now.Date;
            }
        }

        public bool IsValidFormat(string fileName)
        {
            try
            {
                // Ki·ªÉm tra format chu·∫©n: MaCN_LoaiFile_Ngay.ext
                var pattern = @"^(78\d{2})_([A-Z0-9_]+)_(\d{8})\.(csv|xlsx?)$";
                var match = Regex.Match(fileName, pattern, RegexOptions.IgnoreCase);

                if (match.Success)
                {
                    // Ki·ªÉm tra m√£ chi nh√°nh h·ª£p l·ªá (7800-7808)
                    var branchCode = match.Groups[1].Value;
                    if (int.TryParse(branchCode, out int branchNum) && branchNum >= 7800 && branchNum <= 7808)
                    {
                        // Ki·ªÉm tra lo·∫°i d·ªØ li·ªáu c√≥ trong danh s√°ch ƒë·ªãnh nghƒ©a
                        var dataType = match.Groups[2].Value.ToUpper();
                        if (DataTypeDefinitions.ContainsKey(dataType))
                        {
                            // Ki·ªÉm tra ng√†y h·ª£p l·ªá
                            var dateStr = match.Groups[3].Value;
                            if (DateTime.TryParseExact(dateStr, "yyyyMMdd", null, DateTimeStyles.None, out _))
                            {
                                return true;
                            }
                        }
                    }
                }

                return false;
            }
            catch
            {
                return false;
            }
        }

        public FileNameParseResult ParseFileName(string fileName)
        {
            var result = new FileNameParseResult();

            try
            {
                _logger.LogInformation("üîç Parsing complete filename: {FileName}", fileName);

                // Ki·ªÉm tra format chu·∫©n tr∆∞·ªõc
                result.IsValid = IsValidFormat(fileName);

                // Extract th√¥ng tin d√π c√≥ h·ª£p l·ªá hay kh√¥ng
                result.BranchCode = ExtractBranchCode(fileName);
                result.DataType = ExtractDataTypeFromFilename(fileName);
                result.StatementDate = ExtractStatementDate(fileName);
                result.Extension = Path.GetExtension(fileName).TrimStart('.').ToLower();

                if (!result.IsValid)
                {
                    result.ErrorMessage = "File name kh√¥ng ƒë√∫ng format chu·∫©n MaCN_LoaiFile_Ngay.ext";
                    _logger.LogWarning("‚ö†Ô∏è Non-standard filename format: {FileName}", fileName);
                }
                else
                {
                    _logger.LogInformation("‚úÖ Valid filename format: {FileName}", fileName);
                }

                return result;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "‚ùå L·ªói parse filename: {FileName}", fileName);
                result.IsValid = false;
                result.ErrorMessage = $"L·ªói parse filename: {ex.Message}";
                return result;
            }
        }
    }
}
