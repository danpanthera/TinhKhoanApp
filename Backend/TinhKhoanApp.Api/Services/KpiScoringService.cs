using TinhKhoanApp.Api.Models;
using Microsoft.EntityFrameworkCore;
using TinhKhoanApp.Api.Data;

namespace TinhKhoanApp.Api.Services
{
    // Service x·ª≠ l√Ω ch·∫•m ƒëi·ªÉm KPI v·ªõi logic ph√¢n lo·∫°i ch√≠nh x√°c
    public interface IKpiScoringService
    {
        Task<KpiScoringResult> UpdateManualScoreAsync(int targetId, decimal actualValue);
        Task<KpiScoringResult> BulkImportQuantitativeScoresAsync(List<QuantitativeScoreDto> scores);
        Task<KpiScoringResult> CalculateRatioKpiAsync(int targetId, decimal numerator, decimal denominator);
        KpiInputType GetKpiInputType(KpiIndicator indicator);
    }

    public class KpiScoringService : IKpiScoringService
    {
        private readonly ApplicationDbContext _context;
        private readonly ILogger<KpiScoringService> _logger;

        public KpiScoringService(ApplicationDbContext context, ILogger<KpiScoringService> logger)
        {
            _context = context;
            _logger = logger;
        }

        // üéØ Ph√¢n lo·∫°i KPI ƒë·ªÉ x·ª≠ l√Ω ƒë√∫ng scoring method
        public KpiInputType GetKpiInputType(KpiIndicator indicator)
        {
            // ƒê·ªãnh l∆∞·ª£ng tuy·ªát ƒë·ªëi: ValueType = NUMBER
            if (indicator.ValueType == KpiValueType.NUMBER)
            {
                return KpiInputType.QUANTITATIVE_ABSOLUTE;
            }

            // C·∫£ 2 lo·∫°i c√≤n l·∫°i ƒë·ªÅu c√≥ ValueType = PERCENTAGE
            if (indicator.ValueType == KpiValueType.PERCENTAGE)
            {
                // üìä Ki·ªÉm tra xem c√≥ ph·∫£i l√† t·ª∑ l·ªá t√≠nh to√°n kh√¥ng
                var calculatedRatioKpis = new[] { "TYLENOXAU", "PHATTRIENKHACHHANG" };
                var indicatorCode = GetKpiCodeByName(indicator.IndicatorName);
                
                if (calculatedRatioKpis.Contains(indicatorCode))
                {
                    return KpiInputType.QUANTITATIVE_RATIO; // C·∫ßn t√≠nh t·ª´ c√¥ng th·ª©c
                }
                else
                {
                    return KpiInputType.QUALITATIVE; // Ch·∫•m tay
                }
            }

            return KpiInputType.QUALITATIVE; // Default
        }

        // üîç Helper method ƒë·ªÉ l·∫•y m√£ KPI t·ª´ t√™n (c√≥ th·ªÉ c·∫ßn c·∫£i thi·ªán)
        private string GetKpiCodeByName(string indicatorName)
        {
            var ratioKeywords = new Dictionary<string, string>
            {
                { "T·ª∑ l·ªá n·ª£ x·∫•u", "TYLENOXAU" },
                { "Ph√°t tri·ªÉn kh√°ch h√†ng m·ªõi", "PHATTRIENKHACHHANG" }
            };

            foreach (var keyword in ratioKeywords)
            {
                if (indicatorName.Contains(keyword.Key))
                {
                    return keyword.Value;
                }
            }

            return "UNKNOWN";
        }

        // üìù Ch·∫•m ƒëi·ªÉm th·ªß c√¥ng cho KPI ƒë·ªãnh t√≠nh
        public async Task<KpiScoringResult> UpdateManualScoreAsync(int targetId, decimal actualValue)
        {
            var result = new KpiScoringResult();

            try
            {
                var target = await _context.EmployeeKpiTargets
                    .Include(t => t.Indicator)
                    .FirstOrDefaultAsync(t => t.Id == targetId);

                if (target == null)
                {
                    result.Success = false;
                    result.ErrorMessage = "Kh√¥ng t√¨m th·∫•y KPI target";
                    return result;
                }

                // Ki·ªÉm tra lo·∫°i KPI
                var inputType = GetKpiInputType(target.Indicator);
                if (inputType != KpiInputType.QUALITATIVE)
                {
                    result.Success = false;
                    result.ErrorMessage = "KPI n√†y kh√¥ng ƒë∆∞·ª£c ph√©p ch·∫•m ƒëi·ªÉm th·ªß c√¥ng";
                    return result;
                }

                // Validate gi√° tr·ªã nh·∫≠p v√†o
                if (actualValue < 0 || actualValue > 100)
                {
                    result.Success = false;
                    result.ErrorMessage = "Gi√° tr·ªã ph·∫£i t·ª´ 0-100%";
                    return result;
                }

                // C·∫≠p nh·∫≠t ƒëi·ªÉm
                target.ActualValue = actualValue;
                target.Score = CalculateScore(actualValue, target);
                target.UpdatedDate = DateTime.UtcNow;

                await _context.SaveChangesAsync();

                result.Success = true;
                result.UpdatedTarget = target;
                return result;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "L·ªói khi c·∫≠p nh·∫≠t ƒëi·ªÉm th·ªß c√¥ng cho target {TargetId}", targetId);
                result.Success = false;
                result.ErrorMessage = ex.Message;
                return result;
            }
        }

        // üìä Import h√†ng lo·∫°t cho KPI ƒë·ªãnh l∆∞·ª£ng tuy·ªát ƒë·ªëi
        public async Task<KpiScoringResult> BulkImportQuantitativeScoresAsync(List<QuantitativeScoreDto> scores)
        {
            var result = new KpiScoringResult();
            var successCount = 0;
            var errorMessages = new List<string>();

            try
            {
                foreach (var scoreDto in scores)
                {
                    var target = await _context.EmployeeKpiTargets
                        .Include(t => t.Indicator)
                        .FirstOrDefaultAsync(t => t.Id == scoreDto.TargetId);

                    if (target == null)
                    {
                        errorMessages.Add($"Kh√¥ng t√¨m th·∫•y target ID {scoreDto.TargetId}");
                        continue;
                    }

                    // Ki·ªÉm tra lo·∫°i KPI
                    var inputType = GetKpiInputType(target.Indicator);
                    if (inputType != KpiInputType.QUANTITATIVE_ABSOLUTE)
                    {
                        errorMessages.Add($"Target ID {scoreDto.TargetId} kh√¥ng ph·∫£i ƒë·ªãnh l∆∞·ª£ng tuy·ªát ƒë·ªëi");
                        continue;
                    }

                    // C·∫≠p nh·∫≠t gi√° tr·ªã v√† t√≠nh ƒëi·ªÉm
                    target.ActualValue = scoreDto.ActualValue;
                    target.Score = CalculateScore(scoreDto.ActualValue, target);
                    target.UpdatedDate = DateTime.UtcNow;

                    successCount++;
                }

                await _context.SaveChangesAsync();

                result.Success = true;
                result.SuccessCount = successCount;
                result.ErrorMessages = errorMessages;
                return result;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "L·ªói khi import h√†ng lo·∫°t ƒëi·ªÉm KPI");
                result.Success = false;
                result.ErrorMessage = ex.Message;
                return result;
            }
        }

        // üßÆ T√≠nh to√°n KPI t·ª∑ l·ªá t·ª´ t·ª≠ s·ªë v√† m·∫´u s·ªë
        public async Task<KpiScoringResult> CalculateRatioKpiAsync(int targetId, decimal numerator, decimal denominator)
        {
            var result = new KpiScoringResult();

            try
            {
                var target = await _context.EmployeeKpiTargets
                    .Include(t => t.Indicator)
                    .FirstOrDefaultAsync(t => t.Id == targetId);

                if (target == null)
                {
                    result.Success = false;
                    result.ErrorMessage = "Kh√¥ng t√¨m th·∫•y KPI target";
                    return result;
                }

                // Ki·ªÉm tra lo·∫°i KPI
                var inputType = GetKpiInputType(target.Indicator);
                if (inputType != KpiInputType.QUANTITATIVE_RATIO)
                {
                    result.Success = false;
                    result.ErrorMessage = "KPI n√†y kh√¥ng ph·∫£i lo·∫°i t·ª∑ l·ªá t√≠nh to√°n";
                    return result;
                }

                // Validate m·∫´u s·ªë
                if (denominator == 0)
                {
                    result.Success = false;
                    result.ErrorMessage = "M·∫´u s·ªë kh√¥ng ƒë∆∞·ª£c b·∫±ng 0";
                    return result;
                }

                // T√≠nh t·ª∑ l·ªá ph·∫ßn trƒÉm
                var ratioPercentage = (numerator / denominator) * 100;
                
                // C·∫≠p nh·∫≠t k·∫øt qu·∫£
                target.ActualValue = Math.Round(ratioPercentage, 2); // L√†m tr√≤n 2 ch·ªØ s·ªë th·∫≠p ph√¢n
                target.Score = CalculateScore(target.ActualValue.Value, target);
                target.UpdatedDate = DateTime.UtcNow;
                target.Notes = $"T√≠nh t·ª´: {numerator:N2} / {denominator:N2} = {ratioPercentage:N2}%";

                await _context.SaveChangesAsync();

                result.Success = true;
                result.UpdatedTarget = target;
                return result;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "L·ªói khi t√≠nh to√°n KPI t·ª∑ l·ªá cho target {TargetId}", targetId);
                result.Success = false;
                result.ErrorMessage = ex.Message;
                return result;
            }
        }

        // üéØ Logic t√≠nh ƒëi·ªÉm chung cho t·∫•t c·∫£ c√°c lo·∫°i KPI
        private decimal CalculateScore(decimal actualValue, EmployeeKpiTarget target)
        {
            if (!target.TargetValue.HasValue || target.TargetValue.Value == 0)
                return 0;

            decimal ratio;
            var inputType = GetKpiInputType(target.Indicator);

            if (inputType == KpiInputType.QUALITATIVE || inputType == KpiInputType.QUANTITATIVE_RATIO)
            {
                // V·ªõi KPI ƒë·ªãnh t√≠nh v√† t·ª∑ l·ªá %: ActualValue ƒë√£ l√† % (0-100)
                ratio = actualValue / 100;
            }
            else
            {
                // V·ªõi KPI ƒë·ªãnh l∆∞·ª£ng tuy·ªát ƒë·ªëi: T√≠nh t·ª∑ l·ªá ho√†n th√†nh
                ratio = actualValue / target.TargetValue.Value;
            }

            // √Åp d·ª•ng cap ·ªü MaxScore
            var score = Math.Min(ratio * target.Indicator.MaxScore, target.Indicator.MaxScore);
            
            return Math.Round(score, 2); // L√†m tr√≤n 2 ch·ªØ s·ªë th·∫≠p ph√¢n
        }
    }

    // üìã DTOs v√† Enums
    public enum KpiInputType
    {
        QUALITATIVE,           // ƒê·ªãnh t√≠nh - ch·∫•m tay
        QUANTITATIVE_RATIO,    // ƒê·ªãnh l∆∞·ª£ng t·ª∑ l·ªá - t√≠nh to√°n
        QUANTITATIVE_ABSOLUTE  // ƒê·ªãnh l∆∞·ª£ng tuy·ªát ƒë·ªëi - import
    }

    public class KpiScoringResult
    {
        public bool Success { get; set; }
        public string? ErrorMessage { get; set; }
        public List<string> ErrorMessages { get; set; } = new();
        public int SuccessCount { get; set; }
        public EmployeeKpiTarget? UpdatedTarget { get; set; }
    }

    public class QuantitativeScoreDto
    {
        public int TargetId { get; set; }
        public decimal ActualValue { get; set; }
        public string? Notes { get; set; }
    }
}
