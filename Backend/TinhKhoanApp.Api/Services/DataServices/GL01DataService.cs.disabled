using System.Linq.Expressions;
using Microsoft.EntityFrameworkCore;
using TinhKhoanApp.Api.Models.DataTables;
using TinhKhoanApp.Api.Models.DTOs;
using TinhKhoanApp.Api.Repositories;

namespace TinhKhoanApp.Api.Services.DataServices
{
    /// <summary>
    /// GL01 Data Service - triển khai IGL01DataService
    /// </summary>
    public class GL01DataService : IGL01DataService
    {
        private readonly IGL01Repository _gl01Repository;
        private readonly ILogger<GL01DataService> _logger;

        public GL01DataService(
            IGL01Repository gl01Repository,
            ILogger<GL01DataService> logger)
        {
            _gl01Repository = gl01Repository;
            _logger = logger;
        }

        /// <inheritdoc/>
        public async Task<IEnumerable<GL01PreviewDto>> GetGL01PreviewAsync(int count = 10)
        {
            try
            {
                var records = await _gl01Repository.GetRecentAsync(count);
                return MapToGL01PreviewDtos(records);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error retrieving GL01 preview data");
                return Enumerable.Empty<GL01PreviewDto>();
            }
        }

        /// <inheritdoc/>
        public async Task<GL01DetailDto?> GetGL01DetailAsync(long id)
        {
            try
            {
                var record = await _gl01Repository.GetByIdAsync((int)id);
                if (record == null)
                    return null;

                return MapToGL01DetailDto(record);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error retrieving GL01 detail for ID {Id}", id);
                return null;
            }
        }

        /// <inheritdoc/>
        public async Task<IEnumerable<GL01PreviewDto>> GetGL01ByDateAsync(DateTime date, int maxResults = 100)
        {
            try
            {
                var records = await _gl01Repository.GetByDateAsync(date);
                return MapToGL01PreviewDtos(records.Take(maxResults));
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error retrieving GL01 data for date {Date}", date);
                return Enumerable.Empty<GL01PreviewDto>();
            }
        }

        /// <inheritdoc/>
        public async Task<IEnumerable<GL01PreviewDto>> GetGL01ByUnitCodeAsync(string unitCode, int maxResults = 100)
        {
            try
            {
                var records = await _gl01Repository.GetByUnitCodeAsync(unitCode, maxResults);
                return MapToGL01PreviewDtos(records);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error retrieving GL01 data for unit code {UnitCode}", unitCode);
                return Enumerable.Empty<GL01PreviewDto>();
            }
        }

        /// <inheritdoc/>
        public async Task<IEnumerable<GL01PreviewDto>> GetGL01ByAccountCodeAsync(string accountCode, int maxResults = 100)
        {
            try
            {
                var records = await _gl01Repository.GetByAccountCodeAsync(accountCode, maxResults);
                return MapToGL01PreviewDtos(records);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error retrieving GL01 data for account code {AccountCode}", accountCode);
                return Enumerable.Empty<GL01PreviewDto>();
            }
        }

        /// <inheritdoc/>
        public async Task<GL01SummaryDto> GetGL01SummaryByUnitAsync(string unitCode, DateTime? date = null)
        {
            try
            {
                decimal totalDebit = await _gl01Repository.GetTotalTransactionsByUnitAsync(unitCode, "DR", date);
                decimal totalCredit = await _gl01Repository.GetTotalTransactionsByUnitAsync(unitCode, "CR", date);

                Expression<Func<GL01, bool>> predicate = gl01 => gl01.POST_BR == unitCode;
                if (date.HasValue)
                {
                    predicate = gl01 => gl01.POST_BR == unitCode && gl01.NGAY_DL.Date == date.Value.Date;
                }

                int totalRecords = await _gl01Repository.CountAsync(predicate);
                int debitCount = await _gl01Repository.CountAsync(predicate.And(gl01 => gl01.DR_CR == "DR"));
                int creditCount = await _gl01Repository.CountAsync(predicate.And(gl01 => gl01.DR_CR == "CR"));

                return new GL01SummaryDto
                {
                    TotalTransactions = totalRecords,
                    TotalDebitTransactions = debitCount,
                    TotalCreditTransactions = creditCount,
                    TotalDebitAmount = totalDebit,
                    TotalCreditAmount = totalCredit,
                    Date = date,
                    UnitCode = unitCode
                };
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error retrieving GL01 summary for unit {UnitCode}", unitCode);
                return new GL01SummaryDto();
            }
        }

        /// <inheritdoc/>
        public async Task<GL01SummaryDto> GetGL01SummaryByDateAsync(DateTime date)
        {
            try
            {
                decimal totalDebit = await _gl01Repository.GetTotalTransactionsByDateAsync(date, "DR");
                decimal totalCredit = await _gl01Repository.GetTotalTransactionsByDateAsync(date, "CR");

                Expression<Func<GL01, bool>> predicate = gl01 => gl01.NGAY_DL.Date == date.Date;
                int totalRecords = await _gl01Repository.CountAsync(predicate);
                int debitCount = await _gl01Repository.CountAsync(predicate.And(gl01 => gl01.DR_CR_FLG == "DR"));
                int creditCount = await _gl01Repository.CountAsync(predicate.And(gl01 => gl01.DR_CR_FLG == "CR"));

                return new GL01SummaryDto
                {
                    TotalTransactions = totalRecords,
                    TotalDebitTransactions = debitCount,
                    TotalCreditTransactions = creditCount,
                    TotalDebitAmount = totalDebit,
                    TotalCreditAmount = totalCredit,
                    Date = date,
                    UnitCode = null
                };
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error retrieving GL01 summary for date {Date}", date);
                return new GL01SummaryDto();
            }
        }

        /// <inheritdoc/>
        public async Task<PagedApiResponse<GL01PreviewDto>> SearchGL01Async(
            string? keyword,
            string? unitCode,
            string? accountCode,
            string? transactionType,
            DateTime? fromDate,
            DateTime? toDate,
            int page = 1,
            int pageSize = 20)
        {
            try
            {
                Expression<Func<GL01, bool>> predicate = PreparePredicate(keyword, unitCode, accountCode, transactionType, fromDate, toDate);

                var totalCount = await _gl01Repository.CountAsync(predicate);
                var records = await _gl01Repository.GetPagedAsync(
                    predicate,
                    page,
                    pageSize,
                    gl01 => gl01.CREATED_DATE ?? DateTime.MinValue,
                    false);

                return new PagedApiResponse<GL01PreviewDto>
                {
                    Results = MapToGL01PreviewDtos(records),
                    CurrentPage = page,
                    PageSize = pageSize,
                    TotalCount = totalCount,
                    TotalPages = (int)Math.Ceiling(totalCount / (double)pageSize)
                };
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error searching GL01 data");
                return new PagedApiResponse<GL01PreviewDto>
                {
                    Results = Enumerable.Empty<GL01PreviewDto>(),
                    CurrentPage = page,
                    PageSize = pageSize,
                    TotalCount = 0,
                    TotalPages = 0
                };
            }
        }

        #region Private Methods

        private static Expression<Func<GL01, bool>> PreparePredicate(
            string? keyword,
            string? unitCode,
            string? accountCode,
            string? transactionType,
            DateTime? fromDate,
            DateTime? toDate)
        {
            Expression<Func<GL01, bool>> predicate = gl01 => true;

            if (!string.IsNullOrWhiteSpace(keyword))
            {
                predicate = predicate.And(gl01 =>
                    gl01.TR_DESC!.Contains(keyword) ||
                    gl01.REF_NO!.Contains(keyword) ||
                    gl01.VOUCHER_NO!.Contains(keyword) ||
                    gl01.TR_CD!.Contains(keyword));
            }

            if (!string.IsNullOrWhiteSpace(unitCode))
            {
                predicate = predicate.And(gl01 => gl01.BRCD == unitCode);
            }

            if (!string.IsNullOrWhiteSpace(accountCode))
            {
                predicate = predicate.And(gl01 => gl01.TRAD_ACCT == accountCode);
            }

            if (!string.IsNullOrWhiteSpace(transactionType))
            {
                predicate = predicate.And(gl01 => gl01.DR_CR_FLG == transactionType);
            }

            if (fromDate.HasValue)
            {
                predicate = predicate.And(gl01 => gl01.NGAY_DL.Date >= fromDate.Value.Date);
            }

            if (toDate.HasValue)
            {
                predicate = predicate.And(gl01 => gl01.NGAY_DL.Date <= toDate.Value.Date);
            }

            return predicate;
        }

        private static IEnumerable<GL01PreviewDto> MapToGL01PreviewDtos(IEnumerable<GL01> records)
        {
            return records.Select(record => new GL01PreviewDto
            {
                ID = record.ID,
                NGAY_DL = record.NGAY_DL,
                BRCD = record.BRCD,
                DEPCD = record.DEPCD,
                TRAD_ACCT = record.TRAD_ACCT,
                TR_AMOUNT = record.TR_AMOUNT,
                DR_CR_FLG = record.DR_CR_FLG,
                CCY = record.CCY,
                TR_DESC = record.TR_DESC,
                TR_CD = record.TR_CD,
                CREATED_DATE = record.CREATED_DATE
            });
        }

        private static GL01DetailDto MapToGL01DetailDto(GL01 record)
        {
            return new GL01DetailDto
            {
                ID = record.ID,
                NGAY_DL = record.NGAY_DL,
                BRCD = record.BRCD,
                DEPCD = record.DEPCD,
                TRAD_ACCT = record.TRAD_ACCT,
                TR_AMOUNT = record.TR_AMOUNT,
                DR_CR_FLG = record.DR_CR_FLG,
                CCY = record.CCY,
                TR_DESC = record.TR_DESC,
                TR_CD = record.TR_CD,
                CREATED_DATE = record.CREATED_DATE,
                VALUE_DATE = record.VALUE_DATE,
                CIF = record.CIF,
                REF_NO = record.REF_NO,
                VOUCHER_NO = record.VOUCHER_NO,
                ACCTNO1 = record.ACCTNO1,
                ACCTNO2 = record.ACCTNO2,
                EXCH_RATE = record.EXCH_RATE,
                CONV_AMT = record.CONV_AMT,
                VND_AMT = record.VND_AMT,
                APPR_ID = record.APPR_ID,
                STATUS = record.STATUS,
                UPDATED_DATE = record.UPDATED_DATE
            };
        }

        #endregion
    }

    // Extension method để kết hợp các điều kiện trong LINQ Expression
    public static class ExpressionExtensions
    {
        public static Expression<Func<T, bool>> And<T>(
            this Expression<Func<T, bool>> first,
            Expression<Func<T, bool>> second)
        {
            var parameter = Expression.Parameter(typeof(T));
            var body = Expression.AndAlso(
                Expression.Invoke(first, parameter),
                Expression.Invoke(second, parameter)
            );
            return Expression.Lambda<Func<T, bool>>(body, parameter);
        }
    }
}
