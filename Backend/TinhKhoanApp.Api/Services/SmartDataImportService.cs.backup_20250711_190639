using Microsoft.EntityFrameworkCore;
using System.Text.Json;
using System.Text.RegularExpressions;
using TinhKhoanApp.Api.Data;
using TinhKhoanApp.Api.Models;
using TinhKhoanApp.Api.Services.Interfaces;

namespace TinhKhoanApp.Api.Services
{
    /// <summary>
    /// Smart Data Import Service - MIGRATED TO DIRECT IMPORT WORKFLOW
    /// Uses DirectImportService for all import operations
    /// </summary>
    public interface ISmartDataImportService
    {
        Task<SmartImportResult> ImportFileSmartAsync(IFormFile file, string? category = null);
        Task<List<SmartImportResult>> ImportMultipleFilesSmartAsync(List<IFormFile> files);
        Task<TableRoutingInfo> AnalyzeFileRoutingAsync(string fileName, string? existingCategory = null);
        Task<List<string>> GetAvailableDataTablesAsync();
    }

    public class SmartDataImportService : ISmartDataImportService
    {
        private readonly ApplicationDbContext _context;
        private readonly IDirectImportService _directImportService;
        private readonly ILogger<SmartDataImportService> _logger;

        public SmartDataImportService(
            ApplicationDbContext context,
            IDirectImportService directImportService,
            ILogger<SmartDataImportService> logger)
        {
            _context = context;
            _directImportService = directImportService;
            _logger = logger;
        }

        /// <summary>
        /// Smart import that automatically routes files to correct data tables using DirectImportService
        /// </summary>
        public async Task<SmartImportResult> ImportFileSmartAsync(IFormFile file, string? category = null)
        {
            var result = new SmartImportResult
            {
                FileName = file.FileName,
                StartTime = DateTime.UtcNow
            };

            try
            {
                // Use DirectImportService for smart import - bypasses legacy ImportedDataItems completely
                _logger.LogInformation("üéØ Using DirectImportService smart import for file: {FileName}", file.FileName);

                var directResult = await _directImportService.ImportSmartDirectAsync(file);

                result.Success = directResult.Success;
                result.ProcessedRecords = directResult.ProcessedRecords;
                result.ErrorMessage = directResult.Success ? null : directResult.ErrorMessage;
                result.TargetTable = directResult.DataType;

                if (directResult.Success)
                {
                    // Create metadata record for tracking (without ImportedDataItems)
                    var metadataRecord = new ImportedDataRecord
                    {
                        FileName = file.FileName,
                        FileType = file.ContentType ?? "unknown",
                        Category = directResult.DataType,
                        ImportDate = DateTime.UtcNow,
                        ImportedBy = "SmartImportService-Direct",
                        Status = "Completed",
                        RecordsCount = directResult.ProcessedRecords,
                        StatementDate = ParseNgayDLToDateTime(directResult.NgayDL)
                    };

                    _context.ImportedDataRecords.Add(metadataRecord);
                    await _context.SaveChangesAsync();

                    result.ImportedDataRecordId = metadataRecord.Id;

                    _logger.LogInformation("‚úÖ Smart import successful: {Records} records to {Table}",
                        directResult.ProcessedRecords, directResult.DataType);
                }
                else
                {
                    _logger.LogWarning("‚ùå Smart import failed: {Error}", directResult.ErrorMessage);
                }

                result.EndTime = DateTime.UtcNow;
                result.Duration = result.EndTime - result.StartTime;

                return result;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "‚ùå Error in smart import for file: {FileName}", file.FileName);
                result.Success = false;
                result.ErrorMessage = ex.Message;
                result.EndTime = DateTime.UtcNow;
                result.Duration = result.EndTime - result.StartTime;
                return result;
            }
        }

        /// <summary>
        /// Import multiple files using DirectImportService
        /// </summary>
        public async Task<List<SmartImportResult>> ImportMultipleFilesSmartAsync(List<IFormFile> files)
        {
            var results = new List<SmartImportResult>();

            foreach (var file in files)
            {
                var result = await ImportFileSmartAsync(file);
                results.Add(result);
            }

            return results;
        }

        /// <summary>
        /// Analyze file routing based on filename patterns
        /// </summary>
        public async Task<TableRoutingInfo> AnalyzeFileRoutingAsync(string fileName, string? existingCategory = null)
        {
            var routing = new TableRoutingInfo
            {
                FileName = fileName,
                OriginalCategory = existingCategory,
                IsValid = false,
                RecommendedAction = "unknown"
            };

            try
            {
                // Extract data type from filename patterns
                var dataType = ExtractDataTypeFromFileName(fileName);
                routing.DataTypeCode = dataType;
                routing.IsValid = !string.IsNullOrEmpty(dataType);
                routing.RecommendedAction = routing.IsValid ? "direct_import" : "manual_review";

                var mapping = GetDataTableMapping(dataType);
                if (mapping != null)
                {
                    routing.TargetTable = mapping.TableName;
                    routing.TableType = mapping.EntityType;
                    routing.HasTemporalTables = mapping.HasTemporalTables;
                    routing.HasColumnstoreIndex = mapping.HasColumnstoreIndex;
                }

                return await Task.FromResult(routing);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error analyzing file routing for: {FileName}", fileName);
                routing.ErrorMessage = ex.Message;
                return routing;
            }
        }

        /// <summary>
        /// Get list of available data tables for import
        /// </summary>
        public async Task<List<string>> GetAvailableDataTablesAsync()
        {
            var tables = new List<string>
            {
                "DP01", "LN01", "LN03", "DB01",
                "GL01", "GL41", "DPDA", "EI01",
                "RR01", "DT_KHKD1"
            };

            return await Task.FromResult(tables);
        }

        // Helper methods
        private string ExtractDataTypeFromFileName(string fileName)
        {
            if (string.IsNullOrWhiteSpace(fileName)) return "";

            fileName = fileName.ToUpperInvariant();

            // Check for specific patterns
            if (fileName.Contains("DP01")) return "DP01";
            if (fileName.Contains("LN01")) return "LN01";
            if (fileName.Contains("LN03")) return "LN03";
            if (fileName.Contains("DB01")) return "DB01";
            if (fileName.Contains("GL01")) return "GL01";
            if (fileName.Contains("GL41")) return "GL41";
            if (fileName.Contains("DPDA")) return "DPDA";
            if (fileName.Contains("EI01")) return "EI01";
            if (fileName.Contains("RR01")) return "RR01";
            if (fileName.Contains("DT_KHKD1") || fileName.Contains("KHKD1")) return "DT_KHKD1";

            return "";
        }

        private DataTableMapping? GetDataTableMapping(string dataTypeCode)
        {
            var mappings = new Dictionary<string, DataTableMapping>
            {
                { "DP01", new DataTableMapping { TableName = "DP01", EntityType = "DP01", HasTemporalTables = true, HasColumnstoreIndex = true } },
                { "LN01", new DataTableMapping { TableName = "LN01", EntityType = "LN01", HasTemporalTables = true, HasColumnstoreIndex = true } },
                { "LN03", new DataTableMapping { TableName = "LN03", EntityType = "LN03", HasTemporalTables = true, HasColumnstoreIndex = true } },
                { "DB01", new DataTableMapping { TableName = "DB01", EntityType = "DB01", HasTemporalTables = true, HasColumnstoreIndex = true } },
                { "GL01", new DataTableMapping { TableName = "GL01", EntityType = "GL01", HasTemporalTables = true, HasColumnstoreIndex = true } },
                { "GL41", new DataTableMapping { TableName = "GL41", EntityType = "GL41", HasTemporalTables = true, HasColumnstoreIndex = true } },
                { "DPDA", new DataTableMapping { TableName = "DPDA", EntityType = "DPDA", HasTemporalTables = true, HasColumnstoreIndex = true } },
                { "EI01", new DataTableMapping { TableName = "EI01", EntityType = "EI01", HasTemporalTables = true, HasColumnstoreIndex = true } },
                { "RR01", new DataTableMapping { TableName = "RR01", EntityType = "RR01", HasTemporalTables = true, HasColumnstoreIndex = true } }
            };

            return mappings.TryGetValue(dataTypeCode, out var mapping) ? mapping : null;
        }

        /// <summary>
        /// Parse NgayDL t·ª´ format dd/MM/yyyy th√†nh DateTime
        /// </summary>
        private DateTime? ParseNgayDLToDateTime(string ngayDL)
        {
            if (string.IsNullOrEmpty(ngayDL))
                return null;

            if (DateTime.TryParseExact(ngayDL, "dd/MM/yyyy", null, System.Globalization.DateTimeStyles.None, out var result))
                return result;

            return null;
        }
    }

    // DTOs and Models
    public class SmartImportResult
    {
        public string FileName { get; set; } = "";
        public bool Success { get; set; }
        public int ProcessedRecords { get; set; }
        public string? ErrorMessage { get; set; }
        public DateTime StartTime { get; set; }
        public DateTime EndTime { get; set; }
        public TimeSpan Duration { get; set; }
        public string? TargetTable { get; set; }
        public int? ImportedDataRecordId { get; set; }
    }

    public class TableRoutingInfo
    {
        public string FileName { get; set; } = "";
        public string? OriginalCategory { get; set; }
        public string DataTypeCode { get; set; } = "";
        public string? TargetTable { get; set; }
        public string? TableType { get; set; }
        public bool IsValid { get; set; }
        public string RecommendedAction { get; set; } = "";
        public bool HasTemporalTables { get; set; }
        public bool HasColumnstoreIndex { get; set; }
        public string? ErrorMessage { get; set; }
    }

    public class DataTableMapping
    {
        public string TableName { get; set; } = "";
        public string EntityType { get; set; } = "";
        public bool HasTemporalTables { get; set; }
        public bool HasColumnstoreIndex { get; set; }
    }
}
