using Microsoft.AspNetCore.Authentication.JwtBearer;
using Microsoft.IdentityModel.Tokens;
using System.Text;
using Microsoft.EntityFrameworkCore;
using TinhKhoanApp.Api.Data; // Namespace ch·ª©a ApplicationDbContext
using TinhKhoanApp.Api.Models; // Namespace ch·ª©a c√°c Model (c·∫ßn cho WeatherForecast n·∫øu S·∫øp mu·ªën gi·ªØ l·∫°i)
using TinhKhoanApp.Api.Services; // Th√™m namespace cho c√°c Services
using TinhKhoanApp.Api.Filters; // Th√™m namespace cho GlobalExceptionFilter
using TinhKhoanApp.Api.Middleware; // Th√™m namespace cho Middleware
using TinhKhoanApp.Api.HealthChecks; // Th√™m namespace cho HealthChecks
using TinhKhoanApp.Api.Repositories; // Th√™m namespace cho Repositories
using System.Text.Json.Serialization;
using BCrypt.Net;

internal class Program
{
    private static async Task Main(string[] args)
    {
        // Ki·ªÉm tra n·∫øu c√≥ argument "seed" ho·∫∑c "reseed"
        if (args.Length > 0 && (args[0] == "seed" || args[0] == "reseed"))
        {
            await RunSeedOnly(args);
            return;
        }

        var builder = WebApplication.CreateBuilder(args);

        // ƒê·ªãnh nghƒ©a URL c·ªßa Vue app dev server (S·∫øp thay 8080 b·∫±ng port th·ª±c t·∫ø c·ªßa Vue app n·∫øu kh√°c)
        // var vueAppDevServerUrl = "http://localhost:8080";

        // 1. L·∫•y chu·ªói k·∫øt n·ªëi t·ª´ appsettings.json
        var connectionString = builder.Configuration.GetConnectionString("DefaultConnection");
        // Log ƒë∆∞·ªùng d·∫´n tuy·ªát ƒë·ªëi file DB
        // --- SI√äU L·∫¨P TR√åNH VI√äN: GHI LOG ƒê∆Ø·ªúNG D·∫™N DB ƒê·ªÇ ANH D·ªÑ KI·ªÇM TRA ---
        if (!string.IsNullOrEmpty(connectionString))
        {
            try {
                var dbPath = connectionString.Replace("Data Source=", "").Trim();
                var absPath = System.IO.Path.GetFullPath(dbPath);
                Console.WriteLine($"[DEBUG] ƒê∆∞·ªùng d·∫´n tuy·ªát ƒë·ªëi file SQLite DB: {absPath}");
            } catch (Exception ex) {
                Console.WriteLine($"[DEBUG] L·ªói khi l·∫•y ƒë∆∞·ªùng d·∫´n DB: {ex.Message}");
            }
        }
        // --- H·∫æT PH·∫¶N GHI LOG DB ---
        // 2. ƒêƒÉng k√Ω ApplicationDbContext v·ªõi SQLite provider
        builder.Services.AddDbContext<ApplicationDbContext>(options =>
            options.UseSqlite(connectionString));

        // 3. ƒêƒÉng k√Ω c√°c d·ªãch v·ª• cho Controllers (quan tr·ªçng n·∫øu S·∫øp d√πng API Controllers)
        /* builder.Services.AddControllers(); */
        builder.Services.AddControllers()
            .AddJsonOptions(options =>
            {
                // D√≤ng n√†y s·∫Ω y√™u c·∫ßu System.Text.Json ƒë·ªçc v√† ghi Enum d∆∞·ªõi d·∫°ng chu·ªói t√™n c·ªßa ch√∫ng.
                options.JsonSerializerOptions.Converters.Add(new JsonStringEnumConverter());
                // --- K·∫æT TH√öC PH·∫¶N TH√äM ---
                options.JsonSerializerOptions.ReferenceHandler = ReferenceHandler.Preserve;
            });        // 3.5. ƒêƒÉng k√Ω c√°c business services        builder.Services.AddScoped<IKpiScoringService, KpiScoringService>();
        builder.Services.AddScoped<IEmployeeKpiAssignmentService, EmployeeKpiAssignmentService>();
        builder.Services.AddScoped<UnitKpiScoringService>();
        builder.Services.AddScoped<ICompressionService, CompressionService>();
        builder.Services.AddScoped<IStatementDateService, StatementDateService>();

        // 4. ƒêƒÉng k√Ω c√°c d·ªãch v·ª• cho Swagger/OpenAPI (ƒë·ªÉ t·∫°o t√†i li·ªáu API t·ª± ƒë·ªông)
        builder.Services.AddEndpointsApiExplorer();
        builder.Services.AddSwaggerGen();
        // Th√™m d·ªãch v·ª• CORS
        builder.Services.AddCors(options =>
        {
            options.AddPolicy("AllowAll",
                policy =>
                {
                    policy.AllowAnyOrigin()
                          .AllowAnyHeader()
                          .AllowAnyMethod();
                });
        });        // Add JWT authentication
        builder.Services.AddAuthentication(options =>
        {
            options.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;
            options.DefaultChallengeScheme = JwtBearerDefaults.AuthenticationScheme;
        })
        .AddJwtBearer(options =>
        {
            options.TokenValidationParameters = new TokenValidationParameters
            {
                ValidateIssuer = true,
                ValidateAudience = false,
                ValidateLifetime = true,
                ValidateIssuerSigningKey = true,
                ValidIssuer = builder.Configuration["Jwt:Issuer"],
                IssuerSigningKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(builder.Configuration["Jwt:Key"] ?? "default-secret-key"))
            };
        });        // Register services        // KPI services removed during cleanup        // üóÑÔ∏è ƒêƒÉng k√Ω Raw Data Import Service
        builder.Services.AddScoped<IRawDataImportService, RawDataImportService>();
        builder.Services.AddScoped<IExtendedRawDataImportService, ExtendedRawDataImportService>();
          // üóÑÔ∏è ƒêƒÉng k√Ω SCD Type 2 Service
        builder.Services.AddScoped<SCDType2Service>();        // ‚ö° PERFORMANCE OPTIMIZATIONS - Enhanced Services
        
        // Add optimized memory caching
        builder.Services.AddMemoryCache(options =>
        {
            options.SizeLimit = 2000; // Increase cache entries limit
            options.CompactionPercentage = 0.75; // Compact when 75% full
            options.TrackStatistics = true; // Enable statistics tracking
        });

        // Add response caching
        builder.Services.AddResponseCaching(options =>
        {
            options.MaximumBodySize = 1024 * 1024 * 10; // 10MB
            options.UseCaseSensitivePaths = false;
        });

        // Add response compression
        builder.Services.AddResponseCompression(options =>
        {
            options.EnableForHttps = true;
            options.Providers.Add<Microsoft.AspNetCore.ResponseCompression.BrotliCompressionProvider>();
            options.Providers.Add<Microsoft.AspNetCore.ResponseCompression.GzipCompressionProvider>();        });
        
        // Register cache service based on configuration
        var useRedis = builder.Configuration.GetValue<bool>("UseRedis", false);
        
        // Always register MemoryCacheService
        builder.Services.AddScoped<MemoryCacheService>();
        
        if (useRedis)
        {
            // Add Redis connection first
            var redisConnection = builder.Configuration.GetConnectionString("Redis") ?? "localhost:6379";
            builder.Services.AddSingleton<StackExchange.Redis.IConnectionMultiplexer>(sp =>
                StackExchange.Redis.ConnectionMultiplexer.Connect(redisConnection));
            
            // Then register Redis-dependent services
            builder.Services.AddSingleton<RedisCacheService>();
            builder.Services.AddScoped<HybridCacheService>();
            builder.Services.AddScoped<ICacheService, HybridCacheService>();
        }
        else
        {
            builder.Services.AddScoped<ICacheService, MemoryCacheService>();
        }
        
        builder.Services.AddScoped<IPerformanceMonitorService, PerformanceMonitorService>();
        builder.Services.AddScoped<IOptimizedSCDType2Service, OptimizedSCDType2Service>();
        builder.Services.AddScoped<IStreamingExportService, StreamingExportService>(); // ‚ö° NEW: Streaming Export Service
        
        // Register optimized repositories
        builder.Services.AddScoped<OptimizedEmployeeRepository>();
        builder.Services.AddScoped<OptimizedSCDRepository>();// Optimize Entity Framework (remove query splitting for SQLite)
        builder.Services.AddDbContext<ApplicationDbContext>(options =>
        {
            options.UseSqlite(connectionString, sqliteOptions =>
            {
                sqliteOptions.CommandTimeout(30);
            });
            
            // Enable connection pooling
            options.EnableServiceProviderCaching();
            options.EnableSensitiveDataLogging(builder.Environment.IsDevelopment());
        });

        // Add Global Exception Filter
        builder.Services.AddControllers(options =>
        {
            options.Filters.Add<GlobalExceptionFilter>();
            options.CacheProfiles.Add("Default", new Microsoft.AspNetCore.Mvc.CacheProfile
            {
                Duration = 300,
                Location = Microsoft.AspNetCore.Mvc.ResponseCacheLocation.Any,
                VaryByQueryKeys = new[] { "*" }
            });
        });

        // Add Health Checks
        builder.Services.AddCustomHealthChecks();// Connection pooling is handled by the existing AddDbContext registration above

        // ... (AddDbContext, AddControllers, AddSwaggerGen, etc.) ...
        var app = builder.Build();        // C·∫•u h√¨nh HTTP request pipeline.
        if (app.Environment.IsDevelopment())
        {
            app.UseSwagger();
            app.UseSwaggerUI();
        }        // ‚ö° OPTIMIZED MIDDLEWARE PIPELINE
        
        // Add Response Compression (early in pipeline)
        app.UseResponseCompression();
        
        // Add Response Caching
        app.UseResponseCaching();
        
        // Add Performance Monitoring
        app.UsePerformanceMiddleware();        // Th√™m CORS middleware
        app.UseCors("AllowAll");

        app.UseHttpsRedirection();
        app.UseRouting();
        app.UseAuthentication();
        app.UseAuthorization();

        // üè• Add Health Check Endpoints
        app.MapHealthChecks("/health", new Microsoft.AspNetCore.Diagnostics.HealthChecks.HealthCheckOptions
        {
            ResponseWriter = HealthCheckExtensions.WriteResponse
        });
        
        app.MapHealthChecks("/health/ready", new Microsoft.AspNetCore.Diagnostics.HealthChecks.HealthCheckOptions
        {
            Predicate = check => check.Tags.Contains("ready"),
            ResponseWriter = HealthCheckExtensions.WriteResponse
        });
        
        app.MapHealthChecks("/health/live", new Microsoft.AspNetCore.Diagnostics.HealthChecks.HealthCheckOptions
        {
            Predicate = _ => false,
            ResponseWriter = HealthCheckExtensions.WriteResponse
        });

        // Th√™m d√≤ng n√†y ƒë·ªÉ k√≠ch ho·∫°t vi·ªác s·ª≠ d·ª•ng Controllers
        app.MapControllers();


        // --- PH·∫¶N CODE M·∫™U WEATHERFORECAST (S·∫øp c√≥ th·ªÉ gi·ªØ l·∫°i ho·∫∑c x√≥a n·∫øu kh√¥ng c·∫ßn) ---
        var summaries = new[]
        {
    "Freezing", "Bracing", "Chilly", "Cool", "Mild", "Warm", "Balmy", "Hot", "Sweltering", "Scorching"
};

        app.MapGet("/weatherforecast", () =>
        {
            var forecast = Enumerable.Range(1, 5).Select(index =>
                new WeatherForecast
                (
                    DateOnly.FromDateTime(DateTime.Now.AddDays(index)),
                    Random.Shared.Next(-20, 55),
                    summaries[Random.Shared.Next(summaries.Length)]
                ))
                .ToArray();
            return forecast;
        })
        .WithName("GetWeatherForecast")
        .WithOpenApi();
        // --- K·∫æT TH√öC PH·∫¶N CODE M·∫™U WEATHERFORECAST ---        // Seed admin user n·∫øu ch∆∞a c√≥
        using (var scope = app.Services.CreateScope())
        {
            var db = scope.ServiceProvider.GetRequiredService<ApplicationDbContext>();
              // Seed Units tr∆∞·ªõc v·ªõi c·∫•u tr√∫c ph√¢n c·∫•p ƒë√∫ng            if (!db.Units.Any())
            {                // T·∫°o CNL1 (chi nh√°nh c·∫•p 1 - root)
                var cnl1Units = new[]
                {
                    new Unit { Code = "CnLaiChau", Name = "Agribank CN Lai Ch√¢u (7800)", Type = "CNL1", ParentUnitId = null }
                };
                db.Units.AddRange(cnl1Units);
                db.SaveChanges();

                // L·∫•y ID c·ªßa CNL1 v·ª´a t·∫°o
                var cnl1 = db.Units.First(u => u.Code == "CnLaiChau");                // T·∫°o CNL2 (chi nh√°nh c·∫•p 2 - con c·ªßa CNL1)
                var cnl2Units = new[]
                {
                    new Unit { Code = "CnTamDuong", Name = "Chi nh√°nh Tam ƒê∆∞·ªùng", Type = "CNL2", ParentUnitId = cnl1.Id },
                    new Unit { Code = "CnPhongTho", Name = "Chi nh√°nh Phong Th·ªï", Type = "CNL2", ParentUnitId = cnl1.Id },
                    new Unit { Code = "CnSinHo", Name = "Chi nh√°nh S√¨n H·ªì", Type = "CNL2", ParentUnitId = cnl1.Id },
                    new Unit { Code = "CnMuongTe", Name = "Chi nh√°nh M∆∞·ªùng T√®", Type = "CNL2", ParentUnitId = cnl1.Id },
                    new Unit { Code = "CnThanUyen", Name = "Chi nh√°nh Than Uy√™n", Type = "CNL2", ParentUnitId = cnl1.Id },
                    new Unit { Code = "CnThanhPho", Name = "Chi nh√°nh Th√†nh Ph·ªë", Type = "CNL2", ParentUnitId = cnl1.Id },
                    new Unit { Code = "CnTanUyen", Name = "Chi nh√°nh T√¢n Uy√™n", Type = "CNL2", ParentUnitId = cnl1.Id },
                    new Unit { Code = "CnNamNhun", Name = "Chi nh√°nh N·∫≠m Nh√πn", Type = "CNL2", ParentUnitId = cnl1.Id }
                };
                db.Units.AddRange(cnl2Units);
                db.SaveChanges();                // L·∫•y ID c·ªßa c√°c CNL2 v·ª´a t·∫°o
                var cnLaiChau = db.Units.First(u => u.Code == "CnLaiChau");
                var cnTamDuong = db.Units.First(u => u.Code == "CnTamDuong");
                var cnPhongTho = db.Units.First(u => u.Code == "CnPhongTho");
                var cnSinHo = db.Units.First(u => u.Code == "CnSinHo");
                var cnMuongTe = db.Units.First(u => u.Code == "CnMuongTe");
                var cnThanUyen = db.Units.First(u => u.Code == "CnThanUyen");
                var cnThanhPho = db.Units.First(u => u.Code == "CnThanhPho");
                var cnTanUyen = db.Units.First(u => u.Code == "CnTanUyen");
                var cnNamNhun = db.Units.First(u => u.Code == "CnNamNhun");// T·∫°o c√°c ph√≤ng nghi·ªáp v·ª• tr·ª±c thu·ªôc CNL1
                var cnl1Departments = new[]
                {
                    new Unit { Code = "Khdn", Name = "Ph√≤ng Kh√°ch h√†ng doanh nghi·ªáp", Type = "Khdn", ParentUnitId = cnl1.Id },
                    new Unit { Code = "Khcn", Name = "Ph√≤ng Kh√°ch h√†ng c√° nh√¢n", Type = "Khcn", ParentUnitId = cnl1.Id },
                    new Unit { Code = "Khqlrr", Name = "Ph√≤ng K·∫ø ho·∫°ch & Qu·∫£n l√Ω r·ªßi ro", Type = "Khqlrr", ParentUnitId = cnl1.Id },
                    new Unit { Code = "KtnqCnl1", Name = "Ph√≤ng K·∫ø to√°n & Ng√¢n qu·ªπ", Type = "Ktnq", ParentUnitId = cnl1.Id },
                    new Unit { Code = "Ktgs", Name = "Ph√≤ng Ki·ªÉm tra gi√°m s√°t", Type = "Ktgs", ParentUnitId = cnl1.Id },
                    new Unit { Code = "Tonghop", Name = "Ph√≤ng T·ªïng h·ª£p", Type = "Tonghop", ParentUnitId = cnl1.Id }
                };
                db.Units.AddRange(cnl1Departments);                // T·∫°o c√°c ph√≤ng nghi·ªáp v·ª• tr·ª±c thu·ªôc CNL2
                var cnl2Departments = new[]
                {
                    // Chi nh√°nh Tam ƒê∆∞·ªùng
                    new Unit { Code = "KhCnTamDuong", Name = "Ph√≤ng Kh√°ch h√†ng", Type = "Kh", ParentUnitId = cnTamDuong.Id },
                    new Unit { Code = "KtnqCnTamDuong", Name = "Ph√≤ng K·∫ø to√°n & Ng√¢n qu·ªπ", Type = "Ktnq", ParentUnitId = cnTamDuong.Id },

                    // Chi nh√°nh Phong Th·ªï
                    new Unit { Code = "KhCnPhongTho", Name = "Ph√≤ng Kh√°ch h√†ng", Type = "Kh", ParentUnitId = cnPhongTho.Id },
                    new Unit { Code = "KtnqCnPhongTho", Name = "Ph√≤ng K·∫ø to√°n & Ng√¢n qu·ªπ", Type = "Ktnq", ParentUnitId = cnPhongTho.Id },
                    new Unit { Code = "PgdMuongSo", Name = "Ph√≤ng giao d·ªãch M∆∞·ªùng So", Type = "PGD", ParentUnitId = cnPhongTho.Id },

                    // Chi nh√°nh S√¨n H·ªì
                    new Unit { Code = "KhCnSinHo", Name = "Ph√≤ng Kh√°ch h√†ng", Type = "Kh", ParentUnitId = cnSinHo.Id },
                    new Unit { Code = "KtnqCnSinHo", Name = "Ph√≤ng K·∫ø to√°n & Ng√¢n qu·ªπ", Type = "Ktnq", ParentUnitId = cnSinHo.Id },

                    // Chi nh√°nh M∆∞·ªùng T√®
                    new Unit { Code = "KhCnMuongTe", Name = "Ph√≤ng Kh√°ch h√†ng", Type = "Kh", ParentUnitId = cnMuongTe.Id },
                    new Unit { Code = "KtnqCnMuongTe", Name = "Ph√≤ng K·∫ø to√°n & Ng√¢n qu·ªπ", Type = "Ktnq", ParentUnitId = cnMuongTe.Id },

                    // Chi nh√°nh Than Uy√™n
                    new Unit { Code = "KhCnThanUyen", Name = "Ph√≤ng Kh√°ch h√†ng", Type = "Kh", ParentUnitId = cnThanUyen.Id },
                    new Unit { Code = "KtnqCnThanUyen", Name = "Ph√≤ng K·∫ø to√°n & Ng√¢n qu·ªπ", Type = "Ktnq", ParentUnitId = cnThanUyen.Id },
                    new Unit { Code = "PgdMuongThan", Name = "Ph√≤ng giao d·ªãch M∆∞·ªùng Than", Type = "PGD", ParentUnitId = cnThanUyen.Id },

                    // Chi nh√°nh Th√†nh Ph·ªë
                    new Unit { Code = "KhCnThanhPho", Name = "Ph√≤ng Kh√°ch h√†ng", Type = "Kh", ParentUnitId = cnThanhPho.Id },
                    new Unit { Code = "KtnqCnThanhPho", Name = "Ph√≤ng K·∫ø to√°n & Ng√¢n qu·ªπ", Type = "Ktnq", ParentUnitId = cnThanhPho.Id },
                    new Unit { Code = "PgdSo1", Name = "Ph√≤ng giao d·ªãch s·ªë 1", Type = "PGD", ParentUnitId = cnThanhPho.Id },
                    new Unit { Code = "PgdSo2", Name = "Ph√≤ng giao d·ªãch s·ªë 2", Type = "PGD", ParentUnitId = cnThanhPho.Id },

                    // Chi nh√°nh T√¢n Uy√™n
                    new Unit { Code = "KhCnTanUyen", Name = "Ph√≤ng Kh√°ch h√†ng", Type = "Kh", ParentUnitId = cnTanUyen.Id },
                    new Unit { Code = "KtnqCnTanUyen", Name = "Ph√≤ng K·∫ø to√°n & Ng√¢n qu·ªπ", Type = "Ktnq", ParentUnitId = cnTanUyen.Id },
                    new Unit { Code = "PgdSo3", Name = "Ph√≤ng giao d·ªãch s·ªë 3", Type = "PGD", ParentUnitId = cnTanUyen.Id },

                    // Chi nh√°nh N·∫≠m Nh√πn
                    new Unit { Code = "KhCnNamNhun", Name = "Ph√≤ng Kh√°ch h√†ng", Type = "Kh", ParentUnitId = cnNamNhun.Id },
                    new Unit { Code = "KtnqCnNamNhun", Name = "Ph√≤ng K·∫ø to√°n & Ng√¢n qu·ªπ", Type = "Ktnq", ParentUnitId = cnNamNhun.Id }
                };
                db.Units.AddRange(cnl2Departments);
                db.SaveChanges();
            }
              // Seed Positions tr∆∞·ªõc            if (!db.Positions.Any())
            {
                db.Positions.AddRange(new[]
                {
                    new Position { Name = "Giamdoc", Description = "Gi√°m ƒë·ªëc" },
                    new Position { Name = "Phogiamdoc", Description = "Ph√≥ Gi√°m ƒë·ªëc" },
                    new Position { Name = "Truongphong", Description = "Tr∆∞·ªüng ph√≤ng" },
                    new Position { Name = "Photruongphong", Description = "Ph√≥ tr∆∞·ªüng ph√≤ng" },
                    new Position { Name = "GiamdocPhonggiaodich", Description = "Gi√°m ƒë·ªëc ph√≤ng giao d·ªãch" },
                    new Position { Name = "PhogiamdocPhonggiaodich", Description = "Ph√≥ gi√°m ƒë·ªëc ph√≤ng giao d·ªãch" },
                    new Position { Name = "Nhanvien", Description = "Nh√¢n vi√™n" }
                    // Comment out old incorrect position names:
                    // new Position { Name = "Phophong", Description = "Ph√≥ ph√≤ng" },
                    // new Position { Name = "CB", Description = "C√°n b·ªô" },
                    // new Position { Name = "Cbtd", Description = "C√°n b·ªô t√≠n d·ª•ng" },
                    // new Position { Name = "GDV", Description = "Giao d·ªãch vi√™n" },
                    // new Position { Name = "KeToan", Description = "K·∫ø to√°n" },
                    // new Position { Name = "ThuQuy", Description = "Th·ªß qu·ªπ" },
                    // new Position { Name = "Truongpho", Description = "Tr∆∞·ªüng/Ph√≥ ph√≤ng" }
                });
                db.SaveChanges();
            }          if (!db.Employees.Any(e => e.Username == "admin"))
            {
                // Find a basic position like "Nhanvien" (Nh√¢n vi√™n) for admin
                var basicPosition = db.Positions.FirstOrDefault(p => p.Name == "Nhanvien") ?? 
                                   db.Positions.FirstOrDefault();
                
                db.Employees.Add(new Employee
                {
                    EmployeeCode = "ADMIN",
                    FullName = "Qu·∫£n tr·ªã vi√™n",
                    Username = "admin",
                    PasswordHash = BCrypt.Net.BCrypt.HashPassword("admin123"),
                    Email = "admin@tinhkhoan.local",
                    IsActive = true,
                    UnitId = db.Units.FirstOrDefault()?.Id ?? 1,
                    PositionId = basicPosition?.Id ?? 1
                });
                db.SaveChanges();            }// Seed d·ªØ li·ªáu vai tr√≤ (roles) cho 23 KPI table types
            RoleSeeder.SeedRoles(db);
            
            // Seed d·ªØ li·ªáu ƒë·ªãnh nghƒ©a KPI cho 23 vai tr√≤ (QUAN TR·ªåNG: ph·∫£i g·ªçi tr∆∞·ªõc KpiAssignmentTableSeeder)
            SeedKPIDefinitionMaxScore.SeedKPIDefinitions(db);
            
            // Seed d·ªØ li·ªáu cho 23 b·∫£ng giao kho√°n KPI chu·∫©n cho c√°n b·ªô  
            KpiAssignmentTableSeeder.SeedKpiAssignmentTables(db);
            
            // Seed d·ªØ li·ªáu k·ª≥ kho√°n m·∫´u
            // KhoanPeriodSeeder.SeedKhoanPeriods(db); // T·∫°m comment ƒë·ªÉ test import
            
            // Seed d·ªØ li·ªáu nh√¢n vi√™n m·∫´u
            // await EmployeeSeeder.SeedEmployees(db); // T·∫°m comment ƒë·ªÉ test import
        }

        app.Run();    }    private static async Task RunSeedOnly(string[] args)
    {
        Console.WriteLine("Ch·∫°y seeding d·ªØ li·ªáu...");
        
        var builder = WebApplication.CreateBuilder(args);
        var connectionString = builder.Configuration.GetConnectionString("DefaultConnection");
          builder.Services.AddDbContext<ApplicationDbContext>(options =>
            options.UseSqlite(connectionString));
            
        var app = builder.Build();
        
        using (var scope = app.Services.CreateScope())
        {
            var db = scope.ServiceProvider.GetRequiredService<ApplicationDbContext>();
            
            // N·∫øu c√≥ args reseed th√¨ x√≥a d·ªØ li·ªáu c≈© tr∆∞·ªõc
            if (args.Length > 0 && args[0] == "reseed")
            {
                Console.WriteLine("X√≥a d·ªØ li·ªáu KPI c≈©...");
                db.KpiIndicators.RemoveRange(db.KpiIndicators);
                db.KpiAssignmentTables.RemoveRange(db.KpiAssignmentTables);
                db.SaveChanges();
            }            // Seed Units v√† Positions tr∆∞·ªõc (c·∫ßn thi·∫øt cho Employee seeding)
            Console.WriteLine("ƒêang seed d·ªØ li·ªáu Units...");
            if (!db.Units.Any())
            {                // Copy logic seeding Units t·ª´ Main method
                var cnl1Units = new[]
                {
                    new Unit { Code = "CnLaiChau", Name = "Agribank CN Lai Ch√¢u (7800)", Type = "CNL1", ParentUnitId = null }
                };
                db.Units.AddRange(cnl1Units);
                db.SaveChanges();

                var cnl1 = db.Units.First(u => u.Code == "CnLaiChau");                var cnl2Units = new[]
                {
                    new Unit { Code = "CnTamDuong", Name = "Chi nh√°nh Tam ƒê∆∞·ªùng", Type = "CNL2", ParentUnitId = cnl1.Id },
                    new Unit { Code = "CnPhongTho", Name = "Chi nh√°nh Phong Th·ªï", Type = "CNL2", ParentUnitId = cnl1.Id },
                    new Unit { Code = "CnSinHo", Name = "Chi nh√°nh S√¨n H·ªì", Type = "CNL2", ParentUnitId = cnl1.Id },
                    new Unit { Code = "CnMuongTe", Name = "Chi nh√°nh M∆∞·ªùng T√®", Type = "CNL2", ParentUnitId = cnl1.Id },
                    new Unit { Code = "CnThanUyen", Name = "Chi nh√°nh Than Uy√™n", Type = "CNL2", ParentUnitId = cnl1.Id },
                    new Unit { Code = "CnThanhPho", Name = "Chi nh√°nh Th√†nh Ph·ªë", Type = "CNL2", ParentUnitId = cnl1.Id },
                    new Unit { Code = "CnTanUyen", Name = "Chi nh√°nh T√¢n Uy√™n", Type = "CNL2", ParentUnitId = cnl1.Id },
                    new Unit { Code = "CnNamNhun", Name = "Chi nh√°nh N·∫≠m Nh√πn", Type = "CNL2", ParentUnitId = cnl1.Id }
                };
                db.Units.AddRange(cnl2Units);
                db.SaveChanges();                var cnTamDuong = db.Units.First(u => u.Code == "CnTamDuong");
                var cnPhongTho = db.Units.First(u => u.Code == "CnPhongTho");
                var cnSinHo = db.Units.First(u => u.Code == "CnSinHo");
                var cnMuongTe = db.Units.First(u => u.Code == "CnMuongTe");
                var cnThanUyen = db.Units.First(u => u.Code == "CnThanUyen");
                var cnThanhPho = db.Units.First(u => u.Code == "CnThanhPho");
                var cnTanUyen = db.Units.First(u => u.Code == "CnTanUyen");
                var cnNamNhun = db.Units.First(u => u.Code == "CnNamNhun");var cnl1Departments = new[]
                {
                    new Unit { Code = "Khdn", Name = "Ph√≤ng Kh√°ch h√†ng doanh nghi·ªáp", Type = "Khdn", ParentUnitId = cnl1.Id },
                    new Unit { Code = "Khcn", Name = "Ph√≤ng Kh√°ch h√†ng c√° nh√¢n", Type = "Khcn", ParentUnitId = cnl1.Id },
                    new Unit { Code = "Khqlrr", Name = "Ph√≤ng K·∫ø ho·∫°ch & Qu·∫£n l√Ω r·ªßi ro", Type = "Khqlrr", ParentUnitId = cnl1.Id },
                    new Unit { Code = "KtnqCnl1", Name = "Ph√≤ng K·∫ø to√°n & Ng√¢n qu·ªπ", Type = "Ktnq", ParentUnitId = cnl1.Id },
                    new Unit { Code = "Ktgs", Name = "Ph√≤ng Ki·ªÉm tra gi√°m s√°t", Type = "Ktgs", ParentUnitId = cnl1.Id },
                    new Unit { Code = "Tonghop", Name = "Ph√≤ng T·ªïng h·ª£p", Type = "Tonghop", ParentUnitId = cnl1.Id }
                };
                db.Units.AddRange(cnl1Departments);                var cnl2Departments = new[]
                {
                    // Chi nh√°nh Tam ƒê∆∞·ªùng
                    new Unit { Code = "KhCnTamDuong", Name = "Ph√≤ng Kh√°ch h√†ng", Type = "Kh", ParentUnitId = cnTamDuong.Id },
                    new Unit { Code = "KtnqCnTamDuong", Name = "Ph√≤ng K·∫ø to√°n & Ng√¢n qu·ªπ", Type = "Ktnq", ParentUnitId = cnTamDuong.Id },

                    // Chi nh√°nh Phong Th·ªï
                    new Unit { Code = "KhCnPhongTho", Name = "Ph√≤ng Kh√°ch h√†ng", Type = "Kh", ParentUnitId = cnPhongTho.Id },
                    new Unit { Code = "KtnqCnPhongTho", Name = "Ph√≤ng K·∫ø to√°n & Ng√¢n qu·ªπ", Type = "Ktnq", ParentUnitId = cnPhongTho.Id },
                    new Unit { Code = "PgdMuongSo", Name = "Ph√≤ng giao d·ªãch M∆∞·ªùng So", Type = "PGD", ParentUnitId = cnPhongTho.Id },

                    // Chi nh√°nh S√¨n H·ªì
                    new Unit { Code = "KhCnSinHo", Name = "Ph√≤ng Kh√°ch h√†ng", Type = "Kh", ParentUnitId = cnSinHo.Id },
                    new Unit { Code = "KtnqCnSinHo", Name = "Ph√≤ng K·∫ø to√°n & Ng√¢n qu·ªπ", Type = "Ktnq", ParentUnitId = cnSinHo.Id },

                    // Chi nh√°nh M∆∞·ªùng T√®
                    new Unit { Code = "KhCnMuongTe", Name = "Ph√≤ng Kh√°ch h√†ng", Type = "Kh", ParentUnitId = cnMuongTe.Id },
                    new Unit { Code = "KtnqCnMuongTe", Name = "Ph√≤ng K·∫ø to√°n & Ng√¢n qu·ªπ", Type = "Ktnq", ParentUnitId = cnMuongTe.Id },

                    // Chi nh√°nh Than Uy√™n
                    new Unit { Code = "KhCnThanUyen", Name = "Ph√≤ng Kh√°ch h√†ng", Type = "Kh", ParentUnitId = cnThanUyen.Id },
                    new Unit { Code = "KtnqCnThanUyen", Name = "Ph√≤ng K·∫ø to√°n & Ng√¢n qu·ªπ", Type = "Ktnq", ParentUnitId = cnThanUyen.Id },
                    new Unit { Code = "PgdMuongThan", Name = "Ph√≤ng giao d·ªãch M∆∞·ªùng Than", Type = "PGD", ParentUnitId = cnThanUyen.Id },

                    // Chi nh√°nh Th√†nh Ph·ªë
                    new Unit { Code = "KhCnThanhPho", Name = "Ph√≤ng Kh√°ch h√†ng", Type = "Kh", ParentUnitId = cnThanhPho.Id },
                    new Unit { Code = "KtnqCnThanhPho", Name = "Ph√≤ng K·∫ø to√°n & Ng√¢n qu·ªπ", Type = "Ktnq", ParentUnitId = cnThanhPho.Id },
                    new Unit { Code = "PgdSo1", Name = "Ph√≤ng giao d·ªãch s·ªë 1", Type = "PGD", ParentUnitId = cnThanhPho.Id },
                    new Unit { Code = "PgdSo2", Name = "Ph√≤ng giao d·ªãch s·ªë 2", Type = "PGD", ParentUnitId = cnThanhPho.Id },

                    // Chi nh√°nh T√¢n Uy√™n
                    new Unit { Code = "KhCnTanUyen", Name = "Ph√≤ng Kh√°ch h√†ng", Type = "Kh", ParentUnitId = cnTanUyen.Id },
                    new Unit { Code = "KtnqCnTanUyen", Name = "Ph√≤ng K·∫ø to√°n & Ng√¢n qu·ªπ", Type = "Ktnq", ParentUnitId = cnTanUyen.Id },
                    new Unit { Code = "PgdSo3", Name = "Ph√≤ng giao d·ªãch s·ªë 3", Type = "PGD", ParentUnitId = cnTanUyen.Id },

                    // Chi nh√°nh N·∫≠m Nh√πn
                    new Unit { Code = "KhCnNamNhun", Name = "Ph√≤ng Kh√°ch h√†ng", Type = "Kh", ParentUnitId = cnNamNhun.Id },
                    new Unit { Code = "KtnqCnNamNhun", Name = "Ph√≤ng K·∫ø to√°n & Ng√¢n qu·ªπ", Type = "Ktnq", ParentUnitId = cnNamNhun.Id }
                };
                db.Units.AddRange(cnl2Departments);
                db.SaveChanges();
            }            Console.WriteLine("ƒêang seed d·ªØ li·ªáu Positions...");
            if (!db.Positions.Any())
            {
                db.Positions.AddRange(new[]
                {
                    new Position { Name = "Giamdoc", Description = "Gi√°m ƒë·ªëc" },
                    new Position { Name = "Phogiamdoc", Description = "Ph√≥ Gi√°m ƒë·ªëc" },
                    new Position { Name = "Truongphong", Description = "Tr∆∞·ªüng ph√≤ng" },
                    new Position { Name = "Photruongphong", Description = "Ph√≥ tr∆∞·ªüng ph√≤ng" },
                    new Position { Name = "GiamdocPhonggiaodich", Description = "Gi√°m ƒë·ªëc ph√≤ng giao d·ªãch" },
                    new Position { Name = "PhogiamdocPhonggiaodich", Description = "Ph√≥ gi√°m ƒë·ªëc ph√≤ng giao d·ªãch" },
                    new Position { Name = "Nhanvien", Description = "Nh√¢n vi√™n" }
                    // Comment out old incorrect position names:
                    // new Position { Name = "Phophong", Description = "Ph√≥ ph√≤ng" },
                    // new Position { Name = "CB", Description = "C√°n b·ªô" },
                    // new Position { Name = "Cbtd", Description = "C√°n b·ªô t√≠n d·ª•ng" },
                    // new Position { Name = "GDV", Description = "Giao d·ªãch vi√™n" },
                    // new Position { Name = "KeToan", Description = "K·∫ø to√°n" },
                    // new Position { Name = "ThuQuy", Description = "Th·ªß qu·ªπ" },
                    // new Position { Name = "Truongpho", Description = "Tr∆∞·ªüng/Ph√≥ ph√≤ng" }
                });
                db.SaveChanges();            }
              Console.WriteLine("ƒêang seed d·ªØ li·ªáu vai tr√≤...");
            RoleSeeder.SeedRoles(db);
            Console.WriteLine("Ho√†n th√†nh seeding d·ªØ li·ªáu vai tr√≤!");
            
            Console.WriteLine("ƒêang seed d·ªØ li·ªáu ƒë·ªãnh nghƒ©a KPI...");
            SeedKPIDefinitionMaxScore.SeedKPIDefinitions(db);
            Console.WriteLine("Ho√†n th√†nh seeding d·ªØ li·ªáu ƒë·ªãnh nghƒ©a KPI!");
              
            Console.WriteLine("ƒêang seed d·ªØ li·ªáu KPI...");
            KpiAssignmentTableSeeder.SeedKpiAssignmentTables(db);
            Console.WriteLine("Ho√†n th√†nh seeding d·ªØ li·ªáu KPI!");
            
            Console.WriteLine("ƒêang seed d·ªØ li·ªáu k·ª≥ kho√°n...");
            KhoanPeriodSeeder.SeedKhoanPeriods(db);
            Console.WriteLine("Ho√†n th√†nh seeding d·ªØ li·ªáu k·ª≥ kho√°n!");
            
            Console.WriteLine("ƒêang seed d·ªØ li·ªáu nh√¢n vi√™n...");
            await EmployeeSeeder.SeedEmployees(db);
            Console.WriteLine("Ho√†n th√†nh seeding d·ªØ li·ªáu nh√¢n vi√™n!");
        }
    }
}

// Khai b√°o record WeatherForecast (ph·∫£i n·∫±m sau t·∫•t c·∫£ c√°c top-level statements)
// N·∫øu S·∫øp kh√¥ng d√πng ƒëo·∫°n code WeatherForecast ·ªü tr√™n th√¨ c√≥ th·ªÉ x√≥a lu√¥n record n√†y.
// Ho·∫∑c t·ªët h∆°n l√† ƒë∆∞a n√≥ v√†o m·ªôt file ri√™ng trong th∆∞ m·ª•c Models n·∫øu n√≥ l√† m·ªôt Model th·ª±c s·ª± c·ªßa d·ª± √°n.
record WeatherForecast(DateOnly Date, int TemperatureC, string? Summary)
{
    public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
}