using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using TinhKhoanApp.Api.Data;
using TinhKhoanApp.Api.Models;
using TinhKhoanApp.Api.Models.Validation;
using TinhKhoanApp.Api.Services;
using TinhKhoanApp.Api.Utils; // üïê Th√™m Utils cho VietnamDateTime
using ClosedXML.Excel;
using System.Text.RegularExpressions;
using System.Globalization;
using System.Data;
using System.Text.Json;
using System.ComponentModel.DataAnnotations;
using Dapper; // üî• Th√™m Dapper cho SQL queries
using Microsoft.Data.SqlClient; // üî• Th√™m SqlClient cho k·∫øt n·ªëi SQL Server
using System.Text; // üî• ƒê·ªÉ build SQL queries

namespace TinhKhoanApp.Api.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class RawDataController : ControllerBase
    {
        private readonly ApplicationDbContext _context;
        private readonly ILogger<RawDataController> _logger;
        private readonly IConfiguration _configuration; // üî• Th√™m Configuration ƒë·ªÉ l·∫•y connection string
        private readonly IRawDataProcessingService _processingService; // üî• Inject processing service
        private readonly IFileNameParsingService _fileNameParsingService; // üîß CHU·∫®N H√ìA: Inject filename parsing service
        private readonly ILegacyExcelReaderService _legacyExcelReaderService; // üìä Inject legacy Excel reader service

        // üìã Danh s√°ch ƒë·ªãnh nghƒ©a lo·∫°i d·ªØ li·ªáu - ƒê·ªíNG B·ªò T·∫§T C·∫¢ LO·∫†I
        private static readonly Dictionary<string, string> DataTypeDefinitions = new()
        {
            { "LN01", "D·ªØ li·ªáu LOAN - Danh m·ª•c t√≠n d·ª•ng" },
            { "LN02", "Sao k√™ bi·∫øn ƒë·ªông nh√≥m n·ª£ - Theo d√µi ch·∫•t l∆∞·ª£ng t√≠n d·ª•ng" },
            { "LN03", "D·ªØ li·ªáu N·ª£ XLRR - N·ª£ x·ª≠ l√Ω r·ªßi ro" },
            { "DP01", "D·ªØ li·ªáu Ti·ªÅn g·ª≠i - Huy ƒë·ªông v·ªën" },
            { "EI01", "D·ªØ li·ªáu mobile banking - Giao d·ªãch ƒëi·ªán t·ª≠" },
            { "GL01", "D·ªØ li·ªáu b√∫t to√°n GDV - Giao d·ªãch vi√™n" },
            { "DPDA", "D·ªØ li·ªáu sao k√™ ph√°t h√†nh th·∫ª - Th·∫ª t√≠n d·ª•ng/ghi n·ª£" },
            { "DB01", "Sao k√™ TSDB v√† Kh√¥ng TSDB - T√†i s·∫£n ƒë·∫£m b·∫£o" },
            { "KH03", "Sao k√™ Kh√°ch h√†ng ph√°p nh√¢n - Doanh nghi·ªáp" },
            { "BC57", "Sao k√™ L√£i d·ª± thu - D·ª± ph√≤ng l√£i" },
            { "RR01", "Sao k√™ d∆∞ n·ª£ g·ªëc, l√£i XLRR - R·ªßi ro t√≠n d·ª•ng" },
            { "7800_DT_KHKD1", "B√°o c√°o KHKD (DT) - K·∫ø ho·∫°ch kinh doanh doanh thu" },
            { "GLCB41", "B·∫£ng c√¢n ƒë·ªëi - B√°o c√°o t√†i ch√≠nh" }
        };

        public RawDataController(ApplicationDbContext context, ILogger<RawDataController> logger, IConfiguration configuration, IRawDataProcessingService processingService, IFileNameParsingService fileNameParsingService, ILegacyExcelReaderService legacyExcelReaderService)
        {
            _context = context;
            _logger = logger;
            _configuration = configuration; // üî• Inject configuration ƒë·ªÉ l·∫•y connection string
            _processingService = processingService; // üî• Inject processing service
            _fileNameParsingService = fileNameParsingService; // üîß CHU·∫®N H√ìA: Inject filename parsing service
            _legacyExcelReaderService = legacyExcelReaderService; // üìä Inject legacy Excel reader service
        }

        // üìã GET: api/RawData - L·∫•y danh s√°ch t·∫•t c·∫£ d·ªØ li·ªáu th√¥ t·ª´ Temporal Tables
        [HttpGet]
        public async Task<ActionResult<IEnumerable<object>>> GetRawDataImports()
        {
            try
            {
                _logger.LogInformation("üîç L·∫•y danh s√°ch d·ªØ li·ªáu t·ª´ Temporal Tables...");

                // üî• L·∫§Y D·ªÆ LI·ªÜU TH·∫¨T T·ª™ LEGACY TABLES (File Import Tracking)
                var rawDataRecords = await _context.ImportedDataRecords
                    .OrderByDescending(x => x.ImportDate) // ‚úÖ S·∫Øp x·∫øp theo ng√†y import m·ªõi nh·∫•t
                    .ToListAsync();

                var rawDataImports = rawDataRecords
                    .Select(x => new
                    {
                        x.Id,
                        x.FileName,
                        DataType = x.Category ?? x.FileType, // ‚úÖ ∆Øu ti√™n Category tr∆∞·ªõc, fallback v·ªÅ FileType
                        Category = x.Category ?? x.FileType, // ‚úÖ ƒê·∫£m b·∫£o Category kh√¥ng null
                        FileType = x.FileType, // ‚úÖ Gi·ªØ nguy√™n FileType
                        x.ImportDate,
                        x.StatementDate,
                        x.ImportedBy,
                        x.Status,
                        x.RecordsCount,
                        x.Notes,
                        BranchCode = "7800", // Default branch code - will be extracted later
                        // T·∫°o RecordsPreview t·ª´ imported data items
                        RecordsPreview = new List<object>
                        {
                            new { Id = x.Id * 10 + 1, ProcessedDate = x.ImportDate, ProcessingNotes = $"{x.FileType} data processed successfully" },
                            new { Id = x.Id * 10 + 2, ProcessedDate = x.ImportDate, ProcessingNotes = $"Import {x.FileName} completed" }
                        }
                    })
                    .OrderByDescending(x => x.ImportDate) // ‚úÖ S·∫Øp x·∫øp theo ng√†y import m·ªõi nh·∫•t tr∆∞·ªõc
                    .Select(x => new
                    {
                        x.Id,
                        x.FileName,
                        x.DataType,
                        x.Category,
                        x.FileType,
                        x.ImportDate,
                        x.StatementDate,
                        x.ImportedBy,
                        x.Status,
                        x.RecordsCount,
                        x.Notes,
                        BranchCode = "7800", // Default branch code - will be extracted later
                        x.RecordsPreview
                    })
                    .ToList();

                // Post-process to extract BranchCode from Notes
                var processedRawDataImports = new List<object>();
                foreach (var item in rawDataImports)
                {
                    // Inline branch code extraction to avoid EF translation issues
                    string branchCode = "7800"; // Default
                    if (!string.IsNullOrEmpty(item.Notes))
                    {
                        var match = Regex.Match(item.Notes, @"Branch: (78\d\d)");
                        if (match.Success)
                        {
                            branchCode = match.Groups[1].Value;
                        }
                    }

                    processedRawDataImports.Add(new
                    {
                        item.Id,
                        item.FileName,
                        item.DataType,
                        item.Category,
                        item.FileType,
                        item.ImportDate,
                        item.StatementDate,
                        item.ImportedBy,
                        item.Status,
                        item.RecordsCount,
                        item.Notes,
                        BranchCode = branchCode,
                        item.RecordsPreview
                    });
                }

                _logger.LogInformation("‚úÖ Tr·∫£ v·ªÅ {Count} import items t·ª´ ImportedDataRecords", processedRawDataImports.Count);

                return Ok(processedRawDataImports);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "üí• L·ªói khi l·∫•y danh s√°ch Raw Data imports t·ª´ Temporal Tables");
                return StatusCode(500, new { message = "L·ªói server khi l·∫•y d·ªØ li·ªáu t·ª´ database", error = ex.Message });
            }
        }




        // ÔøΩüì§ POST: api/RawData/import/{dataType} - Import d·ªØ li·ªáu theo lo·∫°i
        [HttpPost("import/{dataType}")]
        public async Task<IActionResult> ImportRawData(string dataType, [FromForm] RawDataImportRequest request)
        {
            try
            {
                _logger.LogInformation($"üîÑ B·∫Øt ƒë·∫ßu import d·ªØ li·ªáu v·ªõi dataType: '{dataType}'");
                _logger.LogInformation($"üìã Request - Files: {request.Files?.Count ?? 0}, Notes: '{request.Notes}'");

                // ‚úÖ Ki·ªÉm tra Model State
                if (!ModelState.IsValid)
                {
                    var errors = ModelState.SelectMany(x => x.Value?.Errors ?? new Microsoft.AspNetCore.Mvc.ModelBinding.ModelErrorCollection())
                                          .Select(x => x.ErrorMessage);
                    _logger.LogWarning($"‚ùå Model validation failed: {string.Join(", ", errors)}");

                    // üîç Debug ƒë·∫∑c bi·ªát cho GL01 v·ªõi file l·ªõn
                    if (dataType.ToUpper() == "GL01")
                    {
                        _logger.LogError($"üîç GL01 Import Debug - Model State Invalid");
                        _logger.LogError($"üîç File Count: {request.Files?.Count ?? 0}");
                        if (request.Files != null)
                        {
                            foreach (var file in request.Files)
                            {
                                _logger.LogError($"üîç File: {file.FileName}, Size: {file.Length} bytes");
                            }
                        }
                        _logger.LogError($"üîç Detailed Model State Errors:");
                        foreach (var kvp in ModelState)
                        {
                            foreach (var error in kvp.Value?.Errors ?? new Microsoft.AspNetCore.Mvc.ModelBinding.ModelErrorCollection())
                            {
                                _logger.LogError($"üîç Key: {kvp.Key}, Error: {error.ErrorMessage}");
                            }
                        }
                    }

                    return BadRequest(new { message = "Validation failed", errors = errors });
                }

                // ‚úÖ Ki·ªÉm tra lo·∫°i d·ªØ li·ªáu h·ª£p l·ªá
                if (!DataTypeDefinitions.ContainsKey(dataType.ToUpper()))
                {
                    _logger.LogWarning($"‚ùå Lo·∫°i d·ªØ li·ªáu kh√¥ng h·ªó tr·ª£: '{dataType}'. C√°c lo·∫°i h·ªó tr·ª£: {string.Join(", ", DataTypeDefinitions.Keys)}");
                    return BadRequest(new { message = $"Lo·∫°i d·ªØ li·ªáu '{dataType}' kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£" });
                }

                if (request.Files == null || !request.Files.Any())
                {
                    return BadRequest(new { message = "Kh√¥ng c√≥ file n√†o ƒë∆∞·ª£c ch·ªçn" });
                }

                // üîç Debug file size cho GL01
                if (dataType.ToUpper() == "GL01")
                {
                    _logger.LogInformation($"üîç GL01 Upload Debug - Processing {request.Files.Count} files");
                    foreach (var file in request.Files)
                    {
                        _logger.LogInformation($"üîç GL01 File: {file.FileName}, Size: {file.Length} bytes ({file.Length / 1024.0 / 1024.0:F2} MB)");
                        _logger.LogInformation($"üîç GL01 Content Type: {file.ContentType}");
                    }
                }

                var results = new List<RawDataImportResult>();

                foreach (var file in request.Files)
                {
                    _logger.LogInformation("üîç Validating file: {FileName} for dataType: {DataType}", file.FileName, dataType);

                    // üî• VALIDATION 1: Ki·ªÉm tra ƒë·ªãnh d·∫°ng file (ch·ªâ cho ph√©p XLS, XLSX, CSV)
                    var allowedExtensions = new[] { ".xls", ".xlsx", ".csv" };
                    var fileExtension = Path.GetExtension(file.FileName).ToLowerInvariant();

                    if (!allowedExtensions.Contains(fileExtension))
                    {
                        _logger.LogWarning("‚ùå File extension not allowed: {Extension}", fileExtension);
                        results.Add(new RawDataImportResult
                        {
                            Success = false,
                            FileName = file.FileName,
                            Message = $"‚ùå ƒê·ªãnh d·∫°ng file kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£. Ch·ªâ cho ph√©p: {string.Join(", ", allowedExtensions)}"
                        });
                        continue;
                    }

                    // ÔøΩ CHU·∫®N H√ìA: Validation format filename theo chu·∫©n MaCN_LoaiFile_Ngay.ext
                    var parseResult = _fileNameParsingService.ParseFileName(file.FileName);

                    // Log k·∫øt qu·∫£ parse filename
                    _logger.LogInformation("üîç Filename parse result for {FileName}: Valid={IsValid}, BranchCode={BranchCode}, DataType={DataType}, Date={Date}",
                        file.FileName, parseResult.IsValid, parseResult.BranchCode, parseResult.DataType, parseResult.StatementDate);

                    // ÔøΩüî• VALIDATION 2: Ki·ªÉm tra format filename (khuy·∫øn ngh·ªã format chu·∫©n)
                    if (!parseResult.IsValid)
                    {
                        _logger.LogWarning("‚ö†Ô∏è Non-standard filename format: {FileName} - {Error}", file.FileName, parseResult.ErrorMessage);
                        // Kh√¥ng reject, ch·ªâ warning v√¨ v·∫´n c√≥ th·ªÉ extract ƒë∆∞·ª£c th√¥ng tin c∆° b·∫£n
                    }

                    // üî• VALIDATION 3: Ki·ªÉm tra lo·∫°i d·ªØ li·ªáu t·ª´ filename c√≥ kh·ªõp v·ªõi dataType kh√¥ng
                    if (!string.IsNullOrEmpty(parseResult.DataType) &&
                        !parseResult.DataType.Equals(dataType, StringComparison.OrdinalIgnoreCase))
                    {
                        _logger.LogWarning("‚ö†Ô∏è Data type mismatch: URL={URLDataType}, Filename={FilenameDataType}",
                            dataType, parseResult.DataType);
                        results.Add(new RawDataImportResult
                        {
                            Success = false,
                            FileName = file.FileName,
                            Message = $"‚ùå Lo·∫°i d·ªØ li·ªáu kh√¥ng kh·ªõp: URL y√™u c·∫ßu '{dataType}' nh∆∞ng filename ch·ª©a '{parseResult.DataType}'"
                        });
                        continue;
                    }

                    // üî• VALIDATION 4: Ki·ªÉm tra t√™n file ch·ª©a m√£ lo·∫°i d·ªØ li·ªáu (fallback n·∫øu kh√¥ng parse ƒë∆∞·ª£c)
                    bool isValidFileName = false;

                    // Special handling for GL01 - relax filename validation but still check extension
                    if (dataType.ToUpper() == "GL01")
                    {
                        isValidFileName = fileExtension == ".csv"; // GL01 ch·ªâ cho ph√©p CSV
                        _logger.LogInformation("üîç GL01 validation: CSV extension = {IsValid}", isValidFileName);
                    }
                    // üî• VALIDATION ƒê·∫∂C BI·ªÜT CHO BC57: Ph·∫£i ch·ª©a "BCDT" trong t√™n file
                    else if (dataType.ToUpper() == "BC57")
                    {
                        isValidFileName = file.FileName.Contains(dataType, StringComparison.OrdinalIgnoreCase) &&
                                        file.FileName.Contains("BCDT", StringComparison.OrdinalIgnoreCase);
                        _logger.LogInformation("üîç BC57 validation: filename contains BC57={ContainsBC57}, contains BCDT={ContainsBCDT}, overall={IsValid}",
                            file.FileName.Contains(dataType, StringComparison.OrdinalIgnoreCase),
                            file.FileName.Contains("BCDT", StringComparison.OrdinalIgnoreCase),
                            isValidFileName);
                    }
                    else
                    {
                        // T·∫•t c·∫£ lo·∫°i kh√°c: t√™n file PH·∫¢I ch·ª©a m√£ dataType
                        isValidFileName = file.FileName.Contains(dataType, StringComparison.OrdinalIgnoreCase);
                        _logger.LogInformation("üîç {DataType} validation: filename contains dataType = {IsValid}", dataType, isValidFileName);
                    }

                    if (!isValidFileName)
                    {
                        var errorMsg = dataType.ToUpper() switch
                        {
                            "GL01" => "‚ùå GL01 file ph·∫£i c√≥ ƒë·ªãnh d·∫°ng .csv",
                            "BC57" => "‚ùå BC57 file ph·∫£i ch·ª©a c·∫£ 'BC57' v√† 'BCDT' trong t√™n file",
                            _ => $"‚ùå T√™n file ph·∫£i ch·ª©a m√£ '{dataType}'"
                        };

                        _logger.LogWarning("‚ùå File validation failed: {Message}", errorMsg);
                        results.Add(new RawDataImportResult
                        {
                            Success = false,
                            FileName = file.FileName,
                            Message = errorMsg
                        });
                        continue;
                    }

                    // üî• VALIDATION PASSED - Process file
                    _logger.LogInformation("‚úÖ File validation passed: {FileName}", file.FileName);

                    var result = await ProcessSingleFile(file, dataType, request.Notes ?? "");
                    results.Add(result);

                    // ‚úÖ File ƒë∆°n ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω th√†nh c√¥ng
                    if (result.Success)
                    {
                        _logger.LogInformation("‚úÖ ƒê√£ x·ª≠ l√Ω file ƒë∆°n {FileName} th√†nh c√¥ng", file.FileName);
                    }
                }

                var successCount = results.Count(r => r.Success);
                return Ok(new
                {
                    message = $"X·ª≠ l√Ω th√†nh c√¥ng {successCount}/{results.Count} file",
                    results = results
                });
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "L·ªói khi import d·ªØ li·ªáu lo·∫°i {DataType}", dataType);
                return StatusCode(500, new { message = "L·ªói khi import d·ªØ li·ªáu", error = ex.Message });
            }
        }

        // üëÅÔ∏è GET: api/RawData/{id}/preview - Xem tr∆∞·ªõc d·ªØ li·ªáu ƒë√£ import
        [HttpGet("{id:int}/preview")]
        public async Task<ActionResult<object>> PreviewRawDataImport(int id)
        {
            try
            {
                _logger.LogInformation("üîç Preview request for import ID: {Id} t·ª´ ImportedDataRecords table", id);

                // üî• L·∫§Y TH√îNG TIN IMPORT T·ª™ IMPORTED DATA RECORDS (File Import Metadata)
                var import = await _context.ImportedDataRecords
                    .Where(x => x.Id == id)
                    .FirstOrDefaultAsync();

                if (import == null)
                {
                    _logger.LogWarning("‚ùå Import ID {Id} not found in ImportedDataRecords, returning mock data", id);
                    // ‚ö° FALLBACK: Tr·∫£ v·ªÅ d·ªØ li·ªáu mock n·∫øu kh√¥ng t√¨m th·∫•y
                    // üö® X√ìA MOCK DATA: Kh√¥ng tr·∫£ v·ªÅ mock data, tr·∫£ v·ªÅ error th·ª±c t·∫ø
                    _logger.LogWarning("‚ùå Import record {ImportId} not found in database", id);
                    return NotFound(new { message = $"Kh√¥ng t√¨m th·∫•y b·∫£n ghi import v·ªõi ID {id}" });
                }

                _logger.LogInformation("‚úÖ Found import: {FileName}, Category: {Category}, Records: {RecordsCount}",
                    import.FileName, import.Category, import.RecordsCount);

                // ÔøΩ CRITICAL FIX: L·∫•y d·ªØ li·ªáu TH·ª∞C t·ª´ database thay v√¨ mock data
                var importedItems = await _context.ImportedDataItems
                    .Where(item => item.ImportedDataRecordId == import.Id)
                    .OrderBy(item => item.Id)
                    .ToListAsync();

                _logger.LogInformation("üìä Loading {ItemCount} real data items from database", importedItems.Count);

                // Parse d·ªØ li·ªáu th·ª±c t·ª´ database
                var realPreviewData = new List<object>();
                foreach (var item in importedItems)
                {
                    try
                    {
                        if (!string.IsNullOrEmpty(item.RawData))
                        {
                            var data = System.Text.Json.JsonSerializer.Deserialize<Dictionary<string, object>>(item.RawData);
                            if (data != null && data.Count > 0)
                            {
                                realPreviewData.Add(data);
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        _logger.LogWarning("‚ö†Ô∏è Failed to parse item {ItemId}: {Error}", item.Id, ex.Message);
                    }
                }

                _logger.LogInformation("‚úÖ Parsed {ParsedCount}/{TotalCount} real data records successfully",
                    realPreviewData.Count, importedItems.Count);

                var dataTypeForPreview = !string.IsNullOrEmpty(import.Category) ? import.Category : "LN01";

                var response = new
                {
                    importInfo = new
                    {
                        import.Id,
                        import.FileName,
                        DataType = dataTypeForPreview, // Map Category to DataType for frontend compatibility
                        import.ImportDate,
                        import.StatementDate,
                        import.RecordsCount,
                        import.Status,
                        import.ImportedBy
                    },
                    previewData = realPreviewData, // üö® D√ôNG D·ªÆ LI·ªÜU TH·ª∞C thay v√¨ mock
                    totalRecords = import.RecordsCount,
                    previewRecords = realPreviewData.Count, // ƒê·∫øm s·ªë records th·ª±c t·∫ø
                    temporalTablesEnabled = true,
                    isMockData = false,
                    dataSource = "REAL_DATABASE" // ƒê√°nh d·∫•u l√† d·ªØ li·ªáu th·ª±c
                };

                _logger.LogInformation("üéØ Generated preview with {PreviewCount} REAL records for {Category}",
                    realPreviewData.Count, import.Category);

                return Ok(response);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "üí• L·ªói khi t·∫°o preview cho import ID: {Id}. Error: {ErrorMessage}", id, ex.Message);

                // üö® X√ìA MOCK DATA: Kh√¥ng tr·∫£ v·ªÅ mock data, tr·∫£ v·ªÅ l·ªói th·ª±c t·∫ø
                return StatusCode(500, new
                {
                    message = "L·ªói khi l·∫•y preview d·ªØ li·ªáu t·ª´ database",
                    error = ex.Message,
                    importId = id
                });
            }
        }

        // ÔøΩ X√ìA MOCK DATA: Comment out method t·∫°o mock data LOAN10001-LOAN10010
        /*
        // ÔøΩüîÑ Helper method ƒë·ªÉ t·∫°o d·ªØ li·ªáu preview theo lo·∫°i
        private List<object> GeneratePreviewDataForType(string dataType, int totalRecords)
        {
            var records = new List<object>();
            int previewCount = Math.Min(10, totalRecords); // Hi·ªÉn th·ªã t·ªëi ƒëa 10 records

            for (int i = 1; i <= previewCount; i++)
            {
                switch (dataType.ToUpper())
                {
                    case "LN01": // D·ªØ li·ªáu LOAN
                        records.Add(new
                        {
                            soTaiKhoan = $"LOAN{10000 + i}",
                            tenKhachHang = $"Kh√°ch h√†ng vay {i}",
                            duNo = 100000000 + i * 10000000,
                            laiSuat = 6.5 + (i % 5) * 0.25,
                            hanMuc = 200000000 + i * 50000000,
                            ngayGiaiNgan = VietnamDateTime.Now.AddDays(-30 * (i % 12)).ToString("yyyy-MM-dd")
                        });
                        break;

                    case "DP01": // D·ªØ li·ªáu ti·ªÅn g·ª≠i
                        records.Add(new
                        {
                            soTaiKhoan = $"DP{20000 + i}",
                            tenKhachHang = $"Kh√°ch h√†ng ti·ªÅn g·ª≠i {i}",
                            soTien = 50000000 + i * 5000000,
                            laiSuat = 3.2 + (i % 6) * 0.1,
                            kyHan = new string[] { "1 th√°ng", "3 th√°ng", "6 th√°ng", "12 th√°ng" }[i % 4],
                            ngayMoSo = VietnamDateTime.Now.AddDays(-60 * (i % 10)).ToString("yyyy-MM-dd")
                        });
                        break;

                    case "GL01": // B√∫t to√°n GDV
                        records.Add(new
                        {
                            soButToan = $"GL{50000 + i}",
                            maTaiKhoan = $"TK{1010 + (i % 10)}",
                            tenTaiKhoan = $"T√†i kho·∫£n GL {i}",
                            soTienNo = (i % 2 == 0) ? 25000000 + i * 3000000 : 0,
                            soTienCo = (i % 2 == 1) ? 25000000 + i * 3000000 : 0,
                            ngayHachToan = VietnamDateTime.Now.AddDays(-i).ToString("yyyy-MM-dd")
                        });
                        break;

                    default: // D·ªØ li·ªáu chung cho c√°c lo·∫°i kh√°c
                        records.Add(new
                        {
                            id = i,
                            dataType = dataType,
                            sampleData = $"Sample data {i} for {dataType}",
                            recordValue = 1000000 + i * 100000,
                            processedDate = VietnamDateTime.Now.AddDays(-i).ToString("yyyy-MM-dd HH:mm:ss")
                        });
                        break;
                }
            }

            return records;
        }
        */

        // üëÅÔ∏è GET: api/RawData/{id} - L·∫•y chi ti·∫øt m·ªôt m·∫´u d·ªØ li·ªáu th√¥ t·ª´ Temporal Tables
        [HttpGet("{id:int}")]
        public async Task<ActionResult<object>> GetRawDataImport(int id)
        {
            try
            {
                _logger.LogInformation("üîç L·∫•y chi ti·∫øt Raw Data import t·ª´ Temporal Tables v·ªõi ID: {Id}", id);

                // üî• T√åM TRONG LEGACY TABLES
                var item = await _context.ImportedDataRecords
                    .Where(x => x.Id == id)
                    .Select(x => new
                    {
                        x.Id,
                        x.FileName,
                        DataType = x.Category, // Map Category to DataType
                        x.ImportDate,
                        x.StatementDate,
                        x.ImportedBy,
                        x.Status,
                        x.RecordsCount,
                        x.Notes,
                        // T·∫°o RecordsPreview m·∫´u
                        RecordsPreview = new List<object>
                        {
                            new { Id = x.Id * 10 + 1, ProcessedDate = x.ImportDate, ProcessingNotes = $"{x.Category} data processed successfully" },
                            new { Id = x.Id * 10 + 2, ProcessedDate = x.ImportDate, ProcessingNotes = $"Import {x.FileName} completed" }
                        }
                    })
                    .FirstOrDefaultAsync();

                if (item == null)
                {
                    _logger.LogWarning("‚ùå Kh√¥ng t√¨m th·∫•y Raw Data import v·ªõi ID: {Id}", id);
                    return NotFound(new { message = $"Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu import v·ªõi ID: {id}" });
                }

                _logger.LogInformation("‚úÖ ƒê√£ t√¨m th·∫•y Raw Data import v·ªõi ID: {Id}, FileName: {FileName}", id, item.FileName);

                return Ok(item);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "üí• L·ªói khi l·∫•y chi ti·∫øt Raw Data import v·ªõi ID: {Id}", id);
                return StatusCode(500, new { message = "L·ªói server khi l·∫•y chi ti·∫øt d·ªØ li·ªáu t·ª´ database", error = ex.Message });
            }
        }

        // Ô∏è DELETE: api/RawData/{id} - X√≥a d·ªØ li·ªáu import t·ª´ Temporal Tables
        [HttpDelete("{id}")]
        public async Task<IActionResult> DeleteRawDataImport(int id)
        {
            try
            {
                _logger.LogInformation("üóëÔ∏è X√≥a d·ªØ li·ªáu import t·ª´ Temporal Tables v·ªõi ID: {Id}", id);

                if (id <= 0)
                {
                    return BadRequest(new { message = "ID kh√¥ng h·ª£p l·ªá" });
                }

                // ÔøΩ T√åM V√Ä X√ìA TRONG TEMPORAL TABLES
                var import = await _context.ImportedDataRecords.FirstOrDefaultAsync(r => r.Id == id);

                if (import == null)
                {
                    _logger.LogWarning("‚ùå Kh√¥ng t√¨m th·∫•y import v·ªõi ID: {Id}", id);
                    return NotFound(new { message = $"Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu import v·ªõi ID: {id}" });
                }

                // X√≥a d·ªØ li·ªáu
                _context.ImportedDataRecords.Remove(import);
                await _context.SaveChangesAsync();

                _logger.LogInformation("‚úÖ ƒê√£ x√≥a th√†nh c√¥ng import v·ªõi ID: {Id}, FileName: {FileName}", id, import.FileName);

                return Ok(new
                {
                    message = $"X√≥a d·ªØ li·ªáu import ID {id} th√†nh c√¥ng t·ª´ Temporal Tables",
                    deletedId = id,
                    fileName = import.FileName,
                    temporalTablesEnabled = true
                });
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "üí• L·ªói khi x√≥a d·ªØ li·ªáu import {ImportId} t·ª´ Temporal Tables", id);
                return StatusCode(500, new { message = "L·ªói khi x√≥a d·ªØ li·ªáu import t·ª´ database", error = ex.Message });
            }
        }

        /// <summary>
        /// üóëÔ∏è X√≥a tri·ªát ƒë·ªÉ to√†n b·ªô d·ªØ li·ªáu ƒë√£ import - KH√îNG TH·ªÇ HO√ÄN T√ÅC!
        /// </summary>
        [HttpDelete("clear-all")]
        public async Task<IActionResult> ClearAllRawData()
        {
            try
            {
                _logger.LogWarning("üö® B·∫Øt ƒë·∫ßu x√≥a TO√ÄN B·ªò d·ªØ li·ªáu Import - KH√îNG TH·ªÇ HO√ÄN T√ÅC!");

                // üìä L·∫•y count tr∆∞·ªõc khi x√≥a ƒë·ªÉ th√¥ng b√°o chi ti·∫øt
                int recordCount = await _context.ImportedDataRecords.CountAsync();
                int itemCount = await _context.ImportedDataItems.CountAsync();

                _logger.LogInformation($"üìã S·∫Ω x√≥a {recordCount} ImportedDataRecords v√† {itemCount} ImportedDataItems");

                // üóëÔ∏è X√≥a tri·ªát ƒë·ªÉ c·∫£ records v√† items v·ªõi Raw SQL ƒë·ªÉ tr√°nh l·ªói Temporal Tables
                using var deleteConnection = new SqlConnection(_configuration.GetConnectionString("DefaultConnection"));
                await deleteConnection.OpenAsync();

                // X√≥a Items tr∆∞·ªõc ƒë·ªÉ tr√°nh vi ph·∫°m foreign key
                if (itemCount > 0)
                {
                    await deleteConnection.ExecuteAsync("DELETE FROM ImportedDataItems");
                    _logger.LogInformation($"‚úÖ ƒê√£ x√≥a {itemCount} ImportedDataItems b·∫±ng Raw SQL");
                }

                if (recordCount > 0)
                {
                    await deleteConnection.ExecuteAsync("DELETE FROM ImportedDataRecords");
                    _logger.LogInformation($"‚úÖ ƒê√£ x√≥a {recordCount} ImportedDataRecords b·∫±ng Raw SQL");
                }

                // üßπ ƒê·∫øm v√† x√≥a c√°c b·∫£ng d·ªØ li·ªáu ƒë·ªông (n·∫øu c√≥)
                int dynamicTablesCleared = 0;
                foreach (var dataType in DataTypeDefinitions.Keys)
                {
                    try
                    {
                        var tableName = $"Data_{dataType}";
                        using var connection = new SqlConnection(_configuration.GetConnectionString("DefaultConnection"));

                        // Ki·ªÉm tra b·∫£ng c√≥ t·ªìn t·∫°i kh√¥ng
                        var tableExists = await connection.QueryFirstOrDefaultAsync<int>(
                            "SELECT COUNT(*) FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = @TableName",
                            new { TableName = tableName });

                        if (tableExists > 0)
                        {
                            // ƒê·∫øm records tr∆∞·ªõc khi x√≥a
                            var recordsInTable = await connection.QueryFirstOrDefaultAsync<int>(
                                $"SELECT COUNT(*) FROM [{tableName}]");

                            if (recordsInTable > 0)
                            {
                                // X√≥a d·ªØ li·ªáu trong b·∫£ng (gi·ªØ l·∫°i c·∫•u tr√∫c)
                                await connection.ExecuteAsync($"DELETE FROM [{tableName}]");
                                dynamicTablesCleared++;
                                _logger.LogInformation($"üóëÔ∏è ƒê√£ x√≥a {recordsInTable} records t·ª´ b·∫£ng {tableName}");
                            }
                        }
                    }
                    catch (Exception tableEx)
                    {
                        _logger.LogWarning($"‚ö†Ô∏è Kh√¥ng th·ªÉ x√≥a b·∫£ng Data_{dataType}: {tableEx.Message}");
                    }
                }

                var successMessage = $"ƒê√£ x√≥a th√†nh c√¥ng {recordCount} b·∫£n ghi import, {itemCount} items d·ªØ li·ªáu v√† {dynamicTablesCleared} b·∫£ng d·ªØ li·ªáu ƒë·ªông";
                _logger.LogInformation($"‚úÖ {successMessage}");

                return Ok(new
                {
                    success = true,
                    message = successMessage,
                    recordsCleared = recordCount,
                    itemsCleared = itemCount,
                    dynamicTablesCleared = dynamicTablesCleared,
                    timestamp = VietnamDateTime.Now
                });
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "‚ùå L·ªói khi x√≥a to√†n b·ªô d·ªØ li·ªáu");
                return StatusCode(500, new
                {
                    success = false,
                    message = "L·ªói khi x√≥a d·ªØ li·ªáu: " + ex.Message,
                    timestamp = VietnamDateTime.Now
                });
            }
        }

        // üîç GET: api/RawData/check-duplicate/{dataType}/{statementDate} - Ki·ªÉm tra d·ªØ li·ªáu tr√πng l·∫∑p t·ª´ Temporal Tables
        [HttpGet("check-duplicate/{dataType}/{statementDate}")]
        public async Task<IActionResult> CheckDuplicateData(string dataType, string statementDate, [FromQuery] string? fileName = null)
        {
            try
            {
                _logger.LogInformation("üîç Ki·ªÉm tra tr√πng l·∫∑p t·ª´ Temporal Tables - DataType: {DataType}, StatementDate: {StatementDate}, FileName: {FileName}",
                    dataType, statementDate, fileName);

                if (!DateTime.TryParseExact(statementDate, "yyyyMMdd", null, DateTimeStyles.None, out var parsedDate))
                {
                    return BadRequest(new { message = "ƒê·ªãnh d·∫°ng ng√†y kh√¥ng h·ª£p l·ªá. S·ª≠ d·ª•ng yyyyMMdd" });
                }

                // ÔøΩ KI·ªÇM TRA TR√ôNG L·∫∂P TRONG TEMPORAL TABLES
                try
                {
                    var existingImports = await _context.ImportedDataRecords
                        .Where(r => r.Category == dataType && r.StatementDate.HasValue && r.StatementDate.Value.Date == parsedDate.Date)
                        .Select(r => new
                        {
                            r.Id,
                            r.FileName,
                            r.ImportDate,
                            r.RecordsCount,
                            r.ImportedBy,
                            r.Status
                        })
                        .ToListAsync();

                    _logger.LogInformation("‚úÖ T√¨m th·∫•y {Count} b·∫£n ghi tr√πng l·∫∑p trong Temporal Tables", existingImports.Count);

                    return Ok(new
                    {
                        hasDuplicate = existingImports.Any(),
                        existingImports = existingImports,
                        message = existingImports.Any()
                            ? $"ƒê√£ c√≥ {existingImports.Count} d·ªØ li·ªáu {dataType} cho ng√†y {parsedDate:dd/MM/yyyy}"
                            : "Kh√¥ng c√≥ d·ªØ li·ªáu tr√πng l·∫∑p",
                        temporalTablesEnabled = true
                    });
                }
                catch (Exception ex)
                {
                    _logger.LogError(ex, "üí• L·ªói khi ki·ªÉm tra tr√πng l·∫∑p trong Temporal Tables: {Error}", ex.Message);

                    // Tr·∫£ v·ªÅ response l·ªói v·ªõi th√¥ng tin r√µ r√†ng
                    return StatusCode(500, new
                    {
                        hasDuplicate = false,
                        existingImports = new object[] { },
                        message = "L·ªói khi ki·ªÉm tra tr√πng l·∫∑p trong database",
                        error = ex.Message,
                        temporalTablesEnabled = true
                    });
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "L·ªói khi ki·ªÉm tra d·ªØ li·ªáu tr√πng l·∫∑p");
                return StatusCode(500, new { message = "L·ªói khi ki·ªÉm tra d·ªØ li·ªáu tr√πng l·∫∑p", error = ex.Message });
            }
        }

        // üóëÔ∏è DELETE: api/RawData/by-date/{dataType}/{statementDate} - X√≥a d·ªØ li·ªáu theo ng√†y sao k√™
        [HttpDelete("by-date/{dataType}/{statementDate}")]
        public async Task<IActionResult> DeleteByStatementDate(string dataType, string statementDate)
        {
            try
            {
                _logger.LogInformation("Attempting to delete data for type: {DataType}, date: {StatementDate}", dataType, statementDate);

                if (!DateTime.TryParseExact(statementDate, "yyyyMMdd", null, DateTimeStyles.None, out var parsedDate))
                {
                    return BadRequest(new { message = "ƒê·ªãnh d·∫°ng ng√†y kh√¥ng h·ª£p l·ªá. S·ª≠ d·ª•ng yyyyMMdd" });
                }

                int deletedCount = 0;
                int deletedRecords = 0;

                try
                {
                    // ÔøΩ X√ìA D·ªÆ LI·ªÜU TH·ª∞C T·ª™ TEMPORAL TABLES
                    var importsToDelete = await _context.ImportedDataRecords
                        .Where(r => r.Category == dataType && r.StatementDate.HasValue && r.StatementDate.Value.Date == parsedDate.Date)
                        .ToListAsync();

                    if (importsToDelete.Any())
                    {
                        deletedCount = importsToDelete.Count;
                        deletedRecords = importsToDelete.Sum(r => r.RecordsCount);

                        // X√≥a t·ª´ database
                        _context.ImportedDataRecords.RemoveRange(importsToDelete);
                        await _context.SaveChangesAsync();

                        _logger.LogInformation("‚úÖ ƒê√£ x√≥a {Count} imports v·ªõi {Records} records t·ª´ Temporal Tables",
                            deletedCount, deletedRecords);
                    }
                }
                catch (Exception ex)
                {
                    _logger.LogError(ex, "üí• L·ªói khi x√≥a d·ªØ li·ªáu t·ª´ Temporal Tables: {Error}", ex.Message);
                    return StatusCode(500, new
                    {
                        message = "L·ªói khi x√≥a d·ªØ li·ªáu t·ª´ database",
                        error = ex.Message
                    });
                }

                try
                {
                    // Try to drop dynamic tables if they exist
                    await DropDynamicTableIfExists(dataType.ToUpper(), parsedDate);
                    _logger.LogInformation("Dropped dynamic tables for {DataType} on {Date}", dataType, parsedDate);
                }
                catch (Exception ex)
                {
                    _logger.LogWarning(ex, "Unable to drop dynamic tables: {Error}", ex.Message);
                }

                // Return success response
                return Ok(new
                {
                    message = deletedCount > 0
                        ? $"‚úÖ ƒê√£ x√≥a {deletedCount} import(s) v·ªõi {deletedRecords} records cho {dataType} ng√†y {statementDate}"
                        : $"Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu cho {dataType} ng√†y {statementDate}",
                    deletedImports = deletedCount,
                    deletedRecords = deletedRecords,
                    temporalTablesEnabled = true
                });
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "L·ªói khi x√≥a d·ªØ li·ªáu theo ng√†y");
                return StatusCode(500, new { message = "L·ªói khi x√≥a d·ªØ li·ªáu", error = ex.Message });
            }
        }

        // üìã GET: api/RawData/by-date/{dataType}/{statementDate} - L·∫•y d·ªØ li·ªáu theo ng√†y sao k√™
        [HttpGet("by-date/{dataType}/{statementDate}")]
        public async Task<IActionResult> GetByStatementDate(string dataType, string statementDate)
        {
            try
            {
                _logger.LogInformation("Getting data for type: {DataType}, date: {StatementDate}", dataType, statementDate);

                if (!DateTime.TryParseExact(statementDate, "yyyyMMdd", null, DateTimeStyles.None, out var parsedDate))
                {
                    return BadRequest(new { message = "ƒê·ªãnh d·∫°ng ng√†y kh√¥ng h·ª£p l·ªá. S·ª≠ d·ª•ng yyyyMMdd" });
                }

                try
                {
                    // ÔøΩ S·ª¨ D·ª§NG TEMPORAL TABLES THAY V√å MOCK DATA
                    var imports = await _context.ImportedDataRecords
                        .Where(r => r.Category == dataType && r.StatementDate.HasValue && r.StatementDate.Value.Date == parsedDate.Date)
                        .Select(r => new
                        {
                            r.Id,
                            r.FileName,
                            DataType = r.Category,
                            r.ImportDate,
                            r.StatementDate,
                            r.ImportedBy,
                            r.Status,
                            r.RecordsCount,
                            r.Notes
                        })
                        .ToListAsync();

                    _logger.LogInformation("‚úÖ T√¨m th·∫•y {Count} imports t·ª´ Temporal Tables cho {DataType} ng√†y {Date}",
                        imports.Count, dataType, parsedDate);

                    return Ok(imports);
                }
                catch (Exception ex)
                {
                    _logger.LogError(ex, "üí• L·ªói khi truy v·∫•n Temporal Tables: {Error}", ex.Message);
                    return StatusCode(500, new
                    {
                        message = "L·ªói khi truy v·∫•n d·ªØ li·ªáu t·ª´ database",
                        error = ex.Message,
                        temporalTablesEnabled = true
                    });
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "L·ªói khi l·∫•y d·ªØ li·ªáu theo ng√†y");
                return StatusCode(500, new { message = "L·ªói khi l·∫•y d·ªØ li·ªáu theo ng√†y", error = ex.Message });
            }
        }

        // üìã GET: api/RawData/by-date-range/{dataType} - L·∫•y d·ªØ li·ªáu theo kho·∫£ng ng√†y
        [HttpGet("by-date-range/{dataType}")]
        public async Task<IActionResult> GetByDateRange(string dataType, [FromQuery] string fromDate, [FromQuery] string toDate)
        {
            try
            {
                if (!DateTime.TryParseExact(fromDate, "yyyyMMdd", null, DateTimeStyles.None, out var parsedFromDate) ||
                    !DateTime.TryParseExact(toDate, "yyyyMMdd", null, DateTimeStyles.None, out var parsedToDate))
                {
                    return BadRequest(new { message = "ƒê·ªãnh d·∫°ng ng√†y kh√¥ng h·ª£p l·ªá. S·ª≠ d·ª•ng yyyyMMdd" });
                }

                _logger.LogInformation("üîç GetByDateRange request: dataType={DataType}, fromDate={FromDate}, toDate={ToDate}",
                    dataType, fromDate, toDate);

                // ‚ö†Ô∏è FALLBACK: Tr·∫£ v·ªÅ empty list v√¨ temporal table ch∆∞a ƒë·ªìng b·ªô schema
                _logger.LogWarning("‚ö†Ô∏è GetByDateRange: S·ª≠ d·ª•ng fallback empty list - temporal table ch∆∞a ƒë·ªìng b·ªô");

                return Ok(new List<object>());
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "L·ªói khi l·∫•y d·ªØ li·ªáu theo kho·∫£ng ng√†y");

                // ‚ö†Ô∏è FALLBACK: Tr·∫£ v·ªÅ empty list thay v√¨ l·ªói 500
                _logger.LogWarning("‚ö†Ô∏è GetByDateRange: Exception caught, returning empty list fallback");
                return Ok(new List<object>());
            }
        }

        // üóÑÔ∏è GET: api/RawData/table/{dataType} - L·∫•y d·ªØ li·ªáu th√¥ tr·ª±c ti·∫øp t·ª´ b·∫£ng ƒë·ªông (Check real data first)
        [HttpGet("table/{dataType}")]
        public async Task<ActionResult> GetRawDataFromTable(string dataType, [FromQuery] string? statementDate = null)
        {
            try
            {
                _logger.LogInformation("Getting raw data from table for dataType: {DataType}, statementDate: {StatementDate}",
                    dataType, statementDate);

                // Ki·ªÉm tra lo·∫°i d·ªØ li·ªáu h·ª£p l·ªá
                if (!DataTypeDefinitions.ContainsKey(dataType.ToUpper()))
                {
                    return BadRequest(new { message = $"Lo·∫°i d·ªØ li·ªáu '{dataType}' kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£" });
                }

                // üîß KI·ªÇM TRA XEM C√ì D·ªÆ LI·ªÜU TH·∫¨T TRONG DATABASE KH√îNG
                var hasRealData = await _context.ImportedDataRecords
                    .Where(x => x.FileType == dataType.ToUpper())
                    .AnyAsync();

                if (!hasRealData)
                {
                    _logger.LogInformation("‚ùå Kh√¥ng c√≥ d·ªØ li·ªáu th·∫≠t cho {DataType} - tr·∫£ v·ªÅ empty result", dataType);
                    return Ok(new
                    {
                        tableName = $"Empty_{dataType.ToUpper()}",
                        dataType = dataType,
                        recordCount = 0,
                        columns = new List<string>(),
                        records = new List<object>(),
                        note = "Kh√¥ng c√≥ d·ªØ li·ªáu - ƒë√£ b·ªã x√≥a ho·∫∑c ch∆∞a import"
                    });
                }

                // üîß N·∫æU C√ì STATEMENT DATE, KI·ªÇM TRA CH√çNH X√ÅC H·ªå
                if (!string.IsNullOrEmpty(statementDate))
                {
                    var dateExists = await _context.ImportedDataRecords
                        .Where(x => x.FileType == dataType.ToUpper())
                        .Where(x => x.StatementDate.HasValue &&
                                   x.StatementDate.Value.ToString("yyyy-MM-dd") == statementDate)
                        .AnyAsync();

                    if (!dateExists)
                    {
                        _logger.LogInformation("‚ùå Kh√¥ng c√≥ d·ªØ li·ªáu cho {DataType} ng√†y {Date}", dataType, statementDate);
                        return Ok(new
                        {
                            tableName = $"Empty_{dataType.ToUpper()}_{statementDate.Replace("-", "")}",
                            dataType = dataType,
                            recordCount = 0,
                            columns = new List<string>(),
                            records = new List<object>(),
                            note = $"Kh√¥ng c√≥ d·ªØ li·ªáu cho ng√†y {statementDate}"
                        });
                    }
                }

                // üé≠ T·∫°o mock data d·ª±a tr√™n lo·∫°i d·ªØ li·ªáu
                var (columns, records) = GenerateMockRawTableData(dataType.ToUpper(), statementDate);

                // ‚úÖ Khai b√°o bi·∫øn tableName b·ªã thi·∫øu
                var tableName = $"RawData_{dataType.ToUpper()}_{statementDate}";

                _logger.LogInformation("Generated {Count} mock records for table {TableName} (c√≥ d·ªØ li·ªáu th·∫≠t)",
                    records.Count, tableName);

                return Ok(new
                {
                    tableName = tableName,
                    dataType = dataType,
                    recordCount = records.Count,
                    columns = columns,
                    records = records,
                    note = "Mock data d·ª±a tr√™n d·ªØ li·ªáu th·∫≠t ƒë√£ import"
                });
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error getting raw data from table for dataType: {DataType}", dataType);
                return StatusCode(500, new
                {
                    message = "L·ªói khi l·∫•y d·ªØ li·ªáu th√¥ t·ª´ b·∫£ng",
                    error = ex.Message,
                    details = ex.InnerException?.Message
                });
            }
        }

        // üìä Helper method to generate mock data for a table
        private (List<string>, List<Dictionary<string, object>>) GenerateMockRawTableData(string dataType, string? statementDate)
        {
            var columns = new List<string>();
            var records = new List<Dictionary<string, object>>();

            int recordCount = new Random().Next(15, 30);

            // T·∫°o columns theo lo·∫°i d·ªØ li·ªáu
            switch (dataType)
            {
                case "LN01":
                    columns = new List<string> { "MaKhachHang", "TenKhachHang", "SoTaiKhoan", "SoTien", "LaiSuat", "NgayGiaiNgan", "HanMuc", "TrangThai" };
                    break;
                case "DP01":
                    columns = new List<string> { "MaKhachHang", "TenKhachHang", "SoTaiKhoan", "SoTien", "LaiSuat", "KyHan", "NgayMoSo", "NgayDaoHan" };
                    break;
                case "GL01":
                    columns = new List<string> { "MaTaiKhoan", "TenTaiKhoan", "SoButToan", "NoiDung", "SoTienNo", "SoTienCo", "NgayHachToan", "NguoiTao" };
                    break;
                case "DPDA":
                    columns = new List<string> { "MaThe", "TenChuThe", "LoaiThe", "HanMuc", "SoDu", "NgayMoThe", "NgayHetHan", "TrangThai" };
                    break;
                default:
                    columns = new List<string> { "MaDuLieu", "LoaiDuLieu", "NoiDung", "GiaTri", "NgayTao", "NguoiTao", "GhiChu" };
                    break;
            }

            // Th√™m c·ªôt metadata
            columns.Add("ImportId");
            columns.Add("BranchCode");
            columns.Add("StatementDate");
            columns.Add("ImportedBy");
            columns.Add("ImportDate");

            // T·∫°o records
            DateTime parsedDate = VietnamDateTime.Now;
            if (statementDate != null)
            {
                if (DateTime.TryParse(statementDate, out var date))
                {
                    parsedDate = date;
                }
            }

            for (int i = 1; i <= recordCount; i++)
            {
                var record = new Dictionary<string, object>();

                // ƒêi·ªÅn d·ªØ li·ªáu theo t·ª´ng c·ªôt
                foreach (var column in columns)
                {
                    switch (column)
                    {
                        case "ImportId":
                            record[column] = 0;
                            break;
                        case "BranchCode":
                            record[column] = $"78{(i % 8).ToString().PadLeft(2, '0')}";
                            break;
                        case "StatementDate":
                            record[column] = parsedDate.ToString("yyyy-MM-dd");
                            break;
                        case "ImportedBy":
                            record[column] = "System";
                            break;
                        case "ImportDate":
                            record[column] = VietnamDateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");
                            break;
                        case "MaKhachHang":
                        case "MaDuLieu":
                            record[column] = $"ID{i.ToString().PadLeft(5, '0')}";
                            break;
                        case "TenKhachHang":
                        case "TenChuThe":
                            record[column] = $"Kh√°ch h√†ng m·∫´u {i}";
                            break;
                        case "SoTaiKhoan":
                        case "MaThe":
                            record[column] = $"{dataType}{i.ToString().PadLeft(8, '0')}";
                            break;
                        case "SoTien":
                        case "HanMuc":
                        case "SoDu":
                        case "GiaTri":
                            record[column] = 1000000 + i * 10000;
                            break;
                        case "LaiSuat":
                            record[column] = Math.Round(3.0 + (i % 10) / 10.0, 2);
                            break;
                        case "NgayGiaiNgan":
                        case "NgayMoSo":
                        case "NgayHachToan":
                        case "NgayTao":
                        case "NgayMoThe":
                            record[column] = parsedDate.AddDays(-i).ToString("yyyy-MM-dd");
                            break;
                        case "NgayDaoHan":
                        case "NgayHetHan":
                            record[column] = parsedDate.AddMonths(6).ToString("yyyy-MM-dd");
                            break;
                        case "TrangThai":
                            record[column] = new string[] { "Ho·∫°t ƒë·ªông", "T·∫°m kh√≥a", "ƒê√≥ng" }[i % 3];
                            break;
                        case "KyHan":
                            record[column] = new string[] { "1 th√°ng", "3 th√°ng", "6 th√°ng", "12 th√°ng" }[i % 4];
                            break;
                        case "MaTaiKhoan":
                            record[column] = $"TK{1000 + i}";
                            break;
                        case "TenTaiKhoan":
                            record[column] = $"T√†i kho·∫£n {1000 + i}";
                            break;
                        case "SoButToan":
                            record[column] = $"BT{10000 + i}";
                            break;
                        case "NoiDung":
                        case "GhiChu":
                            record[column] = $"Ghi ch√∫ m·∫´u cho b·∫£n ghi {i}";
                            break;
                        case "SoTienNo":
                            record[column] = i % 2 == 0 ? 500000 + i * 5000 : 0;
                            break;
                        case "SoTienCo":
                            record[column] = i % 2 == 1 ? 500000 + i * 5000 : 0;
                            break;
                        case "NguoiTao":
                            record[column] = "System";
                            break;
                        case "LoaiThe":
                        case "LoaiDuLieu":
                            record[column] = dataType;
                            break;
                        default:
                            record[column] = $"Gi√° tr·ªã {column} cho b·∫£n ghi {i}";
                            break;
                    }
                }

                records.Add(record);
            }

            return (columns, records);
        }

        // üë§ Helper method ƒë·ªÉ import d·ªØ li·ªáu t·ª´ file CSV
        private async Task<RawDataImportResult> ImportCsvToDatabase(string filePath, string fileName, string dataType, string notes)
        {
            try
            {
                // ƒê·ªçc d·ªØ li·ªáu t·ª´ file
                var fileContent = await System.IO.File.ReadAllTextAsync(filePath);
                // üö® FIX: Split ch√≠nh x√°c v√† lo·∫°i b·ªè d√≤ng tr·ªëng kh√¥ng c·∫ßn thi·∫øt ·ªü ƒë·∫ßu/cu·ªëi
                var lines = fileContent.Split(new[] { "\r\n", "\r", "\n" }, StringSplitOptions.None);

                // üö® FIX: Lo·∫°i b·ªè d√≤ng tr·ªëng cu·ªëi file n·∫øu c√≥
                var validLines = lines.Where((line, index) =>
                    index == 0 || // Gi·ªØ header
                    !string.IsNullOrEmpty(line) || // Gi·ªØ d√≤ng c√≥ d·ªØ li·ªáu
                    index < lines.Length - 1 // Lo·∫°i b·ªè d√≤ng tr·ªëng cu·ªëi c√πng
                ).ToArray();

                if (validLines.Length <= 1)
                {
                    return new RawDataImportResult
                    {
                        Success = false,
                        FileName = fileName,
                        Message = "File kh√¥ng c√≥ d·ªØ li·ªáu"
                    };
                }

                // Ph√¢n t√≠ch header
                var headers = validLines[0].Split(',').Select(h => h.Trim('"').Trim()).ToList();

                // Tr√≠ch xu·∫•t ng√†y t·ª´ t√™n file
                var statementDate = ExtractStatementDate(fileName);
                if (statementDate == null)
                {
                    return new RawDataImportResult
                    {
                        Success = false,
                        FileName = fileName,
                        Message = "Kh√¥ng t√¨m th·∫•y ng√†y trong t√™n file"
                    };
                }

                // Tr√≠ch xu·∫•t m√£ chi nh√°nh t·ª´ t√™n file
                var branchCode = ExtractBranchCode(fileName) ?? "7800";

                // üö® FIX CRITICAL: T·∫°o records t·ª´ T·ª™NG D√íNG d·ªØ li·ªáu (kh√¥ng b·ªè qua d√≤ng n√†o)
                var records = new List<RawDataRecord>();
                for (int i = 1; i < validLines.Length; i++)
                {
                    var line = validLines[i].Trim();

                    // üö® FIX: X·ª≠ l√Ω M·ªåI d√≤ng, k·ªÉ c·∫£ d√≤ng tr·ªëng ƒë·ªÉ ƒë·∫£m b·∫£o s·ªë l∆∞·ª£ng CH√çNH X√ÅC
                    List<string> values;
                    if (string.IsNullOrEmpty(line))
                    {
                        // T·∫°o d√≤ng r·ªóng v·ªõi s·ªë c·ªôt ƒë√∫ng
                        values = new List<string>();
                        for (int k = 0; k < headers.Count; k++)
                        {
                            values.Add("");
                        }
                    }
                    else
                    {
                        values = line.Split(',').Select(v => v.Trim('"').Trim()).ToList();
                    }

                    var data = new Dictionary<string, object>();

                    for (int j = 0; j < Math.Min(headers.Count, values.Count); j++)
                    {
                        data[headers[j]] = values[j];
                    }

                    // Th√™m th√¥ng tin metadata
                    data["BranchCode"] = branchCode;
                    data["StatementDate"] = statementDate.Value.ToString("yyyy-MM-dd");
                    data["ImportDate"] = VietnamDateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");
                    data["ImportedBy"] = "System";
                    data["RowNumber"] = i; // üö® TH√äM: S·ªë th·ª© t·ª± d√≤ng ƒë·ªÉ tracking

                    // Format data
                    var formattedData = FormatDataValues(data);

                    records.Add(new RawDataRecord
                    {
                        JsonData = System.Text.Json.JsonSerializer.Serialize(formattedData),
                        ProcessedDate = VietnamDateTime.Now
                    });
                }

                // T·∫°o import record
                var importedDataRecord = new ImportedDataRecord
                {
                    FileName = fileName,
                    FileType = dataType,
                    Category = dataType,
                    ImportDate = VietnamDateTime.Now,
                    StatementDate = statementDate.Value,
                    ImportedBy = "System",
                    Status = "Completed",
                    RecordsCount = records.Count,
                    Notes = $"{notes} - Branch: {branchCode}"
                };

                // L∆∞u v√†o database
                _context.ImportedDataRecords.Add(importedDataRecord);
                await _context.SaveChangesAsync();

                // L∆∞u items v·ªõi SQL tr·ª±c ti·∫øp
                using (var connection = new SqlConnection(_configuration.GetConnectionString("DefaultConnection")))
                {
                    await connection.OpenAsync();

                    foreach (var record in records)
                    {
                        var sql = @"INSERT INTO ImportedDataItems
                                    (ImportedDataRecordId, RawData, ProcessedDate, ProcessingNotes)
                                    VALUES (@ImportedDataRecordId, @RawData, @ProcessedDate, @ProcessingNotes)";

                        await connection.ExecuteAsync(sql, new
                        {
                            ImportedDataRecordId = importedDataRecord.Id,
                            RawData = record.JsonData,
                            ProcessedDate = VietnamDateTime.Now,
                            ProcessingNotes = $"Processed successfully - Branch: {branchCode}"
                        });
                    }
                }

                // T·∫°o b·∫£ng ƒë·ªông - chuy·ªÉn ƒë·ªïi sang Dictionary format
                var recordDicts = records.Select(r => new Dictionary<string, object>
                {
                    ["Id"] = r.Id,
                    ["JsonData"] = r.JsonData, // ‚úÖ S·ª≠a t·ª´ RawData th√†nh JsonData
                    ["ProcessedDate"] = r.ProcessedDate,
                    ["ProcessingNotes"] = r.ProcessingNotes ?? "" // ‚úÖ X·ª≠ l√Ω null
                }).ToList();

                var tableName = CreateDynamicTable(dataType, statementDate.Value, branchCode, recordDicts);

                // üö® LOG CRITICAL INFO ƒë·ªÉ debug
                _logger.LogInformation("üö® IMPORT SUMMARY - File: {FileName}" +
                    "\nüìÅ Original file lines: {OriginalLines}" +
                    "\nüìã Valid lines after cleanup: {ValidLines}" +
                    "\nüìä Data lines (excluding header): {DataLines}" +
                    "\n‚úÖ Records processed: {RecordsProcessed}" +
                    "\nüéØ Expected count: {ExpectedCount} (should match file records)",
                    fileName, lines.Length, validLines.Length, validLines.Length - 1, records.Count, validLines.Length - 1);

                return new RawDataImportResult
                {
                    Success = true,
                    FileName = fileName,
                    RecordsProcessed = records.Count,
                    Message = $"‚úÖ ƒê√£ import {records.Count} b·∫£n ghi th√†nh c√¥ng (File g·ªëc: {validLines.Length - 1} d√≤ng d·ªØ li·ªáu) - Branch: {branchCode}",
                    StatementDate = statementDate,
                    TableName = tableName,
                    DataType = dataType
                };
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "L·ªói khi import CSV file {FileName}", fileName);
                return new RawDataImportResult
                {
                    Success = false,
                    FileName = fileName,
                    Message = $"L·ªói khi import: {ex.Message}"
                };
            }
        }

        //  X√≥a b·∫£ng ƒë·ªông n·∫øu t·ªìn t·∫°i
        private async Task DropDynamicTableIfExists(string dataType, DateTime statementDate)
        {
            var tableName = $"Data_{dataType}";
            try
            {
                using var connection = new SqlConnection(_configuration.GetConnectionString("DefaultConnection"));
                await connection.OpenAsync();

                var tableExists = await connection.ExecuteScalarAsync<int>(
                    "SELECT COUNT(*) FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = @TableName",
                    new { TableName = tableName });

                if (tableExists > 0)
                {
                    // X√≥a d·ªØ li·ªáu cho ng√†y c·ª• th·ªÉ thay v√¨ x√≥a b·∫£ng
                    await connection.ExecuteAsync(
                        $"DELETE FROM [{tableName}] WHERE StatementDate = @StatementDate",
                        new { StatementDate = statementDate });

                    _logger.LogInformation($"ƒê√£ x√≥a d·ªØ li·ªáu cho ng√†y {statementDate:yyyy-MM-dd} t·ª´ b·∫£ng {tableName}");
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, $"L·ªói khi x√≥a d·ªØ li·ªáu t·ª´ b·∫£ng {tableName} cho ng√†y {statementDate:yyyy-MM-dd}");
                throw;
            }
        }

        // üìä Format c√°c gi√° tr·ªã trong d·ªØ li·ªáu
        private Dictionary<string, object> FormatDataValues(Dictionary<string, object> data)
        {
            var formattedData = new Dictionary<string, object>();

            foreach (var pair in data)
            {
                var key = pair.Key;
                var value = pair.Value;

                if (value is string strValue)
                {
                    // Th·ª≠ chuy·ªÉn ƒë·ªïi ng√†y th√°ng
                    if (DateTime.TryParse(strValue, out var dateValue))
                    {
                        formattedData[key] = dateValue.ToString("yyyy-MM-dd");
                        continue;
                    }

                    // Th·ª≠ chuy·ªÉn ƒë·ªïi s·ªë
                    if (decimal.TryParse(strValue, out var decimalValue))
                    {
                        formattedData[key] = decimalValue;
                        continue;
                    }
                }

                // Gi·ªØ nguy√™n gi√° tr·ªã
                formattedData[key] = value;
            }

            return formattedData;
        }

        // üìä Parse d·ªØ li·ªáu JSON
        private Dictionary<string, object> ParseJsonData(string jsonData)
        {
            try
            {
                return System.Text.Json.JsonSerializer.Deserialize<Dictionary<string, object>>(jsonData)
                    ?? new Dictionary<string, object>();
            }
            catch
            {
                return new Dictionary<string, object>();
            }
        }

        // üîß CHU·∫®N H√ìA: Extract th√¥ng tin t·ª´ filename theo format MaCN_LoaiFile_Ngay.ext
        // Format: 7800_LN01_20241231.csv ho·∫∑c 7801_DP01_20241130.xlsx
        private string? ExtractBranchCode(string fileName)
        {
            try
            {
                _logger.LogInformation("üîç Extracting branch code from filename: {FileName}", fileName);

                // Strategy 1: Format chu·∫©n MaCN_LoaiFile_Ngay.ext (7800_LN01_20241231.csv)
                var standardMatch = Regex.Match(fileName, @"^(78\d{2})_[A-Z0-9_]+_\d{8}\.(csv|xlsx?)", RegexOptions.IgnoreCase);
                if (standardMatch.Success)
                {
                    var branchCode = standardMatch.Groups[1].Value;
                    _logger.LogInformation("‚úÖ Standard format - Branch code: {BranchCode}", branchCode);
                    return branchCode;
                }

                // Strategy 2: Fallback - t√¨m m√£ chi nh√°nh b·∫•t k·ª≥ ƒë√¢u trong filename
                var fallbackMatch = Regex.Match(fileName, @"(78\d{2})");
                if (fallbackMatch.Success)
                {
                    var branchCode = fallbackMatch.Groups[1].Value;
                    _logger.LogWarning("‚ö†Ô∏è Non-standard format but found branch code: {BranchCode}", branchCode);
                    return branchCode;
                }

                _logger.LogWarning("‚ùå Kh√¥ng t√¨m th·∫•y m√£ chi nh√°nh trong: {FileName}, s·ª≠ d·ª•ng default 7800", fileName);
                return "7800";
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "‚ùå L·ªói extract branch code t·ª´: {FileName}", fileName);
                return "7800";
            }
        }

        // üîß CHU·∫®N H√ìA: Extract lo·∫°i d·ªØ li·ªáu t·ª´ filename
        private string? ExtractDataTypeFromFilename(string fileName)
        {
            try
            {
                _logger.LogInformation("üîç Extracting data type from filename: {FileName}", fileName);

                // Strategy 1: Format chu·∫©n MaCN_LoaiFile_Ngay.ext
                var standardMatch = Regex.Match(fileName, @"^78\d{2}_([A-Z0-9_]+)_\d{8}\.(csv|xlsx?)", RegexOptions.IgnoreCase);
                if (standardMatch.Success)
                {
                    var dataType = standardMatch.Groups[1].Value.ToUpper();
                    _logger.LogInformation("‚úÖ Standard format - Data type: {DataType}", dataType);
                    return dataType;
                }

                // Strategy 2: Fallback - t√¨m trong c√°c lo·∫°i ƒë√£ ƒë·ªãnh nghƒ©a
                var definedTypes = DataTypeDefinitions.Keys.ToArray();
                foreach (var type in definedTypes)
                {
                    if (fileName.Contains(type, StringComparison.OrdinalIgnoreCase))
                    {
                        _logger.LogWarning("‚ö†Ô∏è Non-standard format but found data type: {DataType}", type);
                        return type;
                    }
                }

                _logger.LogWarning("‚ùå Kh√¥ng t√¨m th·∫•y lo·∫°i d·ªØ li·ªáu trong: {FileName}", fileName);
                return null;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "‚ùå L·ªói extract data type t·ª´: {FileName}", fileName);
                return null;
            }
        }

        // üîß CHU·∫®N H√ìA: Extract ng√†y t·ª´ filename theo format yyyyMMdd
        private DateTime? ExtractStatementDate(string fileName)
        {
            try
            {
                _logger.LogInformation("üîç Extracting statement date from filename: {FileName}", fileName);

                // Strategy 1: Format chu·∫©n MaCN_LoaiFile_Ngay.ext (20241231)
                var standardMatch = Regex.Match(fileName, @"^78\d{2}_[A-Z0-9_]+_(\d{8})\.(csv|xlsx?)", RegexOptions.IgnoreCase);
                if (standardMatch.Success)
                {
                    var dateStr = standardMatch.Groups[1].Value;
                    if (DateTime.TryParseExact(dateStr, "yyyyMMdd", null, DateTimeStyles.None, out DateTime date))
                    {
                        _logger.LogInformation("‚úÖ Standard format - Statement date: {Date}", date.ToString("yyyy-MM-dd"));
                        return date;
                    }
                }

                // Strategy 2: Fallback - t√¨m pattern yyyyMMdd b·∫•t k·ª≥ ƒë√¢u
                var fallbackMatch = Regex.Match(fileName, @"(\d{8})");
                if (fallbackMatch.Success)
                {
                    var dateStr = fallbackMatch.Groups[1].Value;
                    if (DateTime.TryParseExact(dateStr, "yyyyMMdd", null, DateTimeStyles.None, out DateTime date))
                    {
                        _logger.LogWarning("‚ö†Ô∏è Non-standard format but found date: {Date}", date.ToString("yyyy-MM-dd"));
                        return date;
                    }
                }

                _logger.LogWarning("‚ùå Kh√¥ng t√¨m th·∫•y ng√†y h·ª£p l·ªá trong: {FileName}, s·ª≠ d·ª•ng ng√†y hi·ªán t·∫°i", fileName);
                return VietnamDateTime.Now.Date;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "‚ùå L·ªói extract statement date t·ª´: {FileName}", fileName);
                return VietnamDateTime.Now.Date;
            }
        }

        // ‚úÖ Th√™m method CreateDynamicTable b·ªã thi·∫øu (s·ª≠a th√†nh sync)
        private string CreateDynamicTable(string dataType, DateTime statementDate, string branchCode, List<Dictionary<string, object>> records)
        {
            try
            {
                var tableName = $"RawData_{dataType.ToUpper()}_{branchCode}_{statementDate:yyyyMMdd}";
                _logger.LogInformation("üóÉÔ∏è T·∫°o b·∫£ng ƒë·ªông: {TableName} v·ªõi {RecordCount} records", tableName, records.Count);

                // TODO: Implement actual dynamic table creation with Temporal Tables + Columnstore Indexes
                // Hi·ªán t·∫°i return mock table name
                return tableName;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "‚ùå L·ªói t·∫°o b·∫£ng ƒë·ªông cho {DataType}", dataType);
                return $"Mock_{dataType}_{statementDate:yyyyMMdd}";
            }
        }

        // ‚úÖ Th√™m method ProcessSingleFile b·ªã thi·∫øu - S·ª¨A ƒê·ªÇ L∆ØU V√ÄO DATABASE
        private async Task<RawDataImportResult> ProcessSingleFile(IFormFile file, string dataType, string notes)
        {
            var importedDataRecord = new ImportedDataRecord(); // Declare outside try block

            try
            {
                _logger.LogInformation("üìÅ B·∫Øt ƒë·∫ßu x·ª≠ l√Ω file: {FileName} cho lo·∫°i {DataType}, Size: {FileSize} bytes",
                    file.FileName, dataType, file.Length);

                // Tr√≠ch xu·∫•t ng√†y sao k√™ t·ª´ t√™n file
                var statementDate = ExtractStatementDate(file.FileName) ?? VietnamDateTime.Now.Date;
                var branchCode = ExtractBranchCode(file.FileName) ?? "7800";

                _logger.LogInformation("ÔøΩ File info: StatementDate={StatementDate}, BranchCode={BranchCode}",
                    statementDate.ToString("yyyy-MM-dd"), branchCode);

                // üíæ T·∫°o ImportedDataRecord v·ªõi status "Processing"
                importedDataRecord = new ImportedDataRecord
                {
                    FileName = file.FileName,
                    FileType = dataType,
                    Category = dataType,
                    ImportDate = VietnamDateTime.Now,
                    StatementDate = statementDate,
                    ImportedBy = "System",
                    Status = "Processing", // üî• B·∫Øt ƒë·∫ßu v·ªõi "Processing"
                    RecordsCount = 0,
                    Notes = $"{notes} - Branch: {branchCode}"
                };

                _context.ImportedDataRecords.Add(importedDataRecord);
                await _context.SaveChangesAsync();

                _logger.LogInformation("‚úÖ T·∫°o ImportedDataRecord ID={Id} v·ªõi status Processing", importedDataRecord.Id);

                int totalProcessed = 0;
                const int batchSize = 1000;

                // üî§ X·ª¨ L√ù THEO ƒê·ªäNH D·∫†NG FILE
                bool isExcelFile = file.FileName.EndsWith(".xlsx", StringComparison.OrdinalIgnoreCase) ||
                                   file.FileName.EndsWith(".xls", StringComparison.OrdinalIgnoreCase);

                _logger.LogInformation("üìä File type: {FileType}", isExcelFile ? "Excel" : "CSV");

                if (isExcelFile)
                {
                    _logger.LogInformation("üìä B·∫Øt ƒë·∫ßu x·ª≠ l√Ω Excel file...");
                    totalProcessed = await ProcessExcelFileForEncoding(file, dataType, importedDataRecord.Id,
                        statementDate, branchCode, batchSize);
                    _logger.LogInformation("üìä Excel processing completed: {Records} records", totalProcessed);
                }
                else
                {
                    _logger.LogInformation("üìÑ B·∫Øt ƒë·∫ßu x·ª≠ l√Ω CSV file...");
                    var encoding = DetectCsvFileEncoding(file);
                    _logger.LogInformation("üî§ Detected encoding: {Encoding}", encoding.EncodingName);

                    using var reader = new StreamReader(file.OpenReadStream(), encoding, detectEncodingFromByteOrderMarks: true);
                    totalProcessed = await ProcessCsvFileContent(reader, dataType, importedDataRecord.Id,
                        statementDate, branchCode, batchSize);
                    _logger.LogInformation("üìÑ CSV processing completed: {Records} records", totalProcessed);
                }

                // ‚úÖ KI·ªÇM TRA V√Ä C·∫¨P NH·∫¨T STATUS D·ª∞A TR√äN K·∫æT QU·∫¢
                if (totalProcessed > 0)
                {
                    importedDataRecord.Status = "Completed";
                    importedDataRecord.RecordsCount = totalProcessed;
                    await _context.SaveChangesAsync();

                    _logger.LogInformation("‚úÖ Ho√†n th√†nh x·ª≠ l√Ω file {FileName}: {Total} records",
                        file.FileName, totalProcessed);

                    // üî• AUTO-PROCESS CH·ªà KHI C√ì D·ªÆ LI·ªÜU
                    await AutoProcessAfterImport(importedDataRecord.Id, dataType, statementDate);

                    return new RawDataImportResult
                    {
                        Success = true,
                        Message = $"ƒê√£ import th√†nh c√¥ng {totalProcessed} records v√†o database",
                        FileName = file.FileName,
                        RecordsProcessed = totalProcessed,
                        DataType = dataType,
                        StatementDate = statementDate
                    };
                }
                else
                {
                    importedDataRecord.Status = "Failed";
                    importedDataRecord.RecordsCount = 0;
                    importedDataRecord.Notes = $"{importedDataRecord.Notes} | Import failed: No data found";
                    await _context.SaveChangesAsync();

                    _logger.LogWarning("‚ö†Ô∏è File {FileName} kh√¥ng ch·ª©a d·ªØ li·ªáu h·ª£p l·ªá", file.FileName);

                    return new RawDataImportResult
                    {
                        Success = false,
                        Message = $"File {file.FileName} kh√¥ng ch·ª©a d·ªØ li·ªáu h·ª£p l·ªá",
                        FileName = file.FileName,
                        RecordsProcessed = 0,
                        DataType = dataType,
                        StatementDate = statementDate
                    };
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "‚ùå L·ªói x·ª≠ l√Ω file {FileName}: {Error}", file.FileName, ex.Message);

                // üî• C·∫≠p nh·∫≠t status th√†nh "Failed" n·∫øu c√≥ l·ªói
                try
                {
                    if (importedDataRecord.Id > 0) // ƒê√£ ƒë∆∞·ª£c t·∫°o trong database
                    {
                        importedDataRecord.Status = "Failed";
                        importedDataRecord.Notes = $"{importedDataRecord.Notes} | Error: {ex.Message}";
                        await _context.SaveChangesAsync();
                        _logger.LogInformation("üìù Updated status to Failed for ImportedDataRecord ID={Id}", importedDataRecord.Id);
                    }
                }
                catch (Exception updateEx)
                {
                    _logger.LogError(updateEx, "‚ùå Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t status Failed cho file {FileName}", file.FileName);
                }

                return new RawDataImportResult
                {
                    Success = false,
                    Message = $"L·ªói x·ª≠ l√Ω file: {ex.Message}",
                    FileName = file.FileName,
                    RecordsProcessed = 0,
                    DataType = dataType
                };
            }
        }

        // ‚ö° Helper method ƒë·ªÉ l∆∞u batch v√†o database
        private async Task SaveBatchToDatabase(List<Dictionary<string, object>> records, int importedDataRecordId, string branchCode)
        {
            foreach (var record in records)
            {
                var item = new ImportedDataItem
                {
                    ImportedDataRecordId = importedDataRecordId,
                    RawData = System.Text.Json.JsonSerializer.Serialize(record),
                    ProcessedDate = VietnamDateTime.Now,
                    ProcessingNotes = $"Batch processed - Branch: {branchCode}"
                };
                _context.ImportedDataItems.Add(item);
            }

            await _context.SaveChangesAsync();
        }

        // ‚úÖ API m·ªõi: L·∫•y danh s√°ch import g·∫ßn ƒë√¢y nh·∫•t (ƒë·ªÉ hi·ªÉn th·ªã ngay sau khi upload)
        [HttpGet("recent")]
        public async Task<ActionResult<IEnumerable<object>>> GetRecentImportsFixed([FromQuery] int limit = 20)
        {
            try
            {
                _logger.LogInformation("üîç L·∫•y {Limit} import g·∫ßn ƒë√¢y nh·∫•t", limit);

                // Simplest possible approach - no projections at all
                var rawDataList = await _context.ImportedDataRecords
                    .OrderByDescending(x => x.ImportDate)
                    .Take(limit)
                    .ToListAsync();

                // Build the response in memory
                var result = new List<object>();
                foreach (var item in rawDataList)
                {
                    // Extract branch code from notes
                    string branchCode = "7800"; // Default
                    if (!string.IsNullOrEmpty(item.Notes))
                    {
                        var match = Regex.Match(item.Notes, @"Branch: (78\d\d)");
                        if (match.Success)
                        {
                            branchCode = match.Groups[1].Value;
                        }
                    }

                    result.Add(new
                    {
                        item.Id,
                        item.FileName,
                        DataType = item.Category ?? item.FileType,
                        Category = item.Category ?? item.FileType,
                        FileType = item.FileType,
                        item.ImportDate,
                        item.StatementDate,
                        item.ImportedBy,
                        item.Status,
                        item.RecordsCount,
                        item.Notes,
                        BranchCode = branchCode,
                        RecordsPreview = new List<object>()
                    });
                }

                _logger.LogInformation("‚úÖ Tr·∫£ v·ªÅ {Count} import g·∫ßn ƒë√¢y nh·∫•t", result.Count);

                return Ok(result);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "üí• L·ªói khi l·∫•y danh s√°ch import g·∫ßn ƒë√¢y nh·∫•t");
                return StatusCode(500, new { message = "L·ªói server khi l·∫•y d·ªØ li·ªáu g·∫ßn ƒë√¢y nh·∫•t", error = ex.Message });
            }
        }

        // ‚úÖ Simple test endpoint with no database access
        [HttpGet("test-simple")]
        public ActionResult<object> GetSimpleTest()
        {
            try
            {
                _logger.LogInformation("üîç Simple test endpoint");

                var result = new
                {
                    message = "Simple test successful",
                    timestamp = VietnamDateTime.Now,
                    version = "1.0.0"
                };

                return Ok(result);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "üí• Error in simple test endpoint");
                return StatusCode(500, new { message = "Error in simple test", error = ex.Message });
            }
        }

        // ‚úÖ Brand new API: Use raw SQL to completely bypass Entity Framework type mapping issues
        [HttpGet("imports/latest")]
        public async Task<ActionResult<IEnumerable<object>>> GetLatestImports([FromQuery] int limit = 20)
        {
            try
            {
                _logger.LogInformation("üîç Raw SQL implementation - getting {Limit} latest imports", limit);

                // Use raw SQL to bypass Entity Framework type mapping completely
                using var connection = new SqlConnection(_configuration.GetConnectionString("DefaultConnection"));
                await connection.OpenAsync();

                var sql = @"
                    SELECT TOP(@Limit)
                        Id,
                        ImportDate,
                        FileName,
                        FileType,
                        Category,
                        ImportedBy,
                        RecordsCount,
                        Notes
                    FROM ImportedDataRecords
                    ORDER BY ImportDate DESC";

                var rawResults = await connection.QueryAsync(sql, new { Limit = limit });

                // Build response manually from raw data
                var result = rawResults.Select(x => new
                {
                    id = (int)x.Id,
                    importDate = (DateTime)x.ImportDate,
                    fileName = (string)(x.FileName ?? ""),
                    fileType = (string)(x.FileType ?? ""),
                    category = (string)(x.Category ?? ""),
                    importedBy = (string)(x.ImportedBy ?? ""),
                    recordCount = (int)x.RecordsCount,
                    note = (string)(x.Notes ?? ""),
                    branchCode = "N/A"
                }).ToList();

                _logger.LogInformation("‚úÖ Successfully retrieved {Count} imports using raw SQL", result.Count);
                return Ok(result);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "üí• Error in raw SQL GetLatestImports implementation");
                return StatusCode(500, new { message = "Error getting latest imports", error = ex.Message });
            }
        }

        // üìä GET: api/RawData/{id}/processed - L·∫•y d·ªØ li·ªáu ƒë√£ x·ª≠ l√Ω t·ª´ b·∫£ng History
        [HttpGet("{id:int}/processed")]
        public async Task<ActionResult<object>> GetProcessedDataByImportId(int id)
        {
            try
            {
                _logger.LogInformation("üîç Getting processed data for import ID: {Id}", id);

                // Get import record to determine data type
                var import = await _context.ImportedDataRecords
                    .Where(x => x.Id == id)
                    .FirstOrDefaultAsync();

                if (import == null)
                {
                    _logger.LogWarning("‚ùå Import record {ImportId} not found", id);
                    return NotFound(new { message = $"Kh√¥ng t√¨m th·∫•y b·∫£n ghi import v·ªõi ID {id}" });
                }

                var dataType = import.Category?.ToUpper() ?? import.FileType?.ToUpper();
                _logger.LogInformation("üìä Looking for processed data of type: {DataType} for import: {ImportId}", dataType, id);

                var response = new
                {
                    importInfo = new
                    {
                        import.Id,
                        import.FileName,
                        DataType = dataType,
                        import.ImportDate,
                        import.StatementDate,
                        import.RecordsCount,
                        import.Status,
                        import.ImportedBy
                    },
                    processedData = new List<object>(),
                    totalRecords = 0,
                    tableName = "",
                    dataSource = "PROCESSED_HISTORY_TABLE"
                };

                // Get processed data based on data type
                switch (dataType)
                {
                    case "BC57":
                        var bc57Data = await _context.BC57History
                            .Where(h => import.StatementDate.HasValue && h.StatementDate.Date == import.StatementDate.Value.Date)
                            .OrderByDescending(h => h.ProcessedDate)
                            .Take(100) // Limit to 100 records for performance
                            .Select(h => new
                            {
                                h.Id,
                                h.MaKhachHang,
                                h.TenKhachHang,
                                h.SoTaiKhoan,
                                h.MaHopDong,
                                h.LoaiSanPham,
                                h.SoTienGoc,
                                h.LaiSuat,
                                h.SoNgayTinhLai,
                                h.TienLaiDuThu,
                                h.TienLaiQuaHan,
                                h.NgayBatDau,
                                h.NgayKetThuc,
                                h.TrangThai,
                                h.MaChiNhanh,
                                h.TenChiNhanh,
                                h.NgayTinhLai,
                                h.StatementDate,
                                h.ProcessedDate,
                                h.ImportId
                            })
                            .ToListAsync();

                        return Ok(new
                        {
                            response.importInfo,
                            processedData = bc57Data.Cast<object>().ToList(),
                            totalRecords = bc57Data.Count,
                            tableName = "BC57History",
                            dataSource = "PROCESSED_HISTORY_TABLE"
                        });

                    case "DPDA":
                        var dpdaData = await _context.DPDAHistory
                            .Where(h => import.StatementDate.HasValue && h.StatementDate.Date == import.StatementDate.Value.Date)
                            .OrderByDescending(h => h.ProcessedDate)
                            .Take(100)
                            .Select(h => new
                            {
                                h.Id,
                                h.MaKhachHang,
                                h.TenKhachHang,
                                h.SoThe,
                                h.LoaiThe,
                                HanMuc = h.HanMucThe,
                                SoDu = h.SoDuHienTai,
                                NgayMoThe = h.NgayPhatHanh,
                                h.NgayHetHan,
                                TrangThai = h.TrangThaiThe,
                                h.StatementDate,
                                h.ProcessedDate,
                                h.ImportId
                            })
                            .ToListAsync();

                        return Ok(new
                        {
                            response.importInfo,
                            processedData = dpdaData.Cast<object>().ToList(),
                            totalRecords = dpdaData.Count,
                            tableName = "DPDAHistory",
                            dataSource = "PROCESSED_HISTORY_TABLE"
                        });

                    case "LN01":
                        var ln01Data = await _context.LN01_History
                            .Where(h => import.StatementDate.HasValue && h.StatementDate.Date == import.StatementDate.Value.Date)
                            .OrderByDescending(h => h.ProcessedDate)
                            .Take(100)
                            .Select(h => new
                            {
                                h.Id,
                                h.BRCD,
                                h.CUSTSEQ,
                                h.CUSTNM,
                                h.TAI_KHOAN,
                                h.CCY,
                                h.DU_NO,
                                h.DSBSSEQ,
                                h.TRANSACTION_DATE,
                                h.DSBSDT,
                                h.DISBUR_CCY,
                                h.DISBURSEMENT_AMOUNT,
                                h.StatementDate,
                                h.ProcessedDate,
                                h.ImportId
                            })
                            .ToListAsync();

                        return Ok(new
                        {
                            response.importInfo,
                            processedData = ln01Data.Cast<object>().ToList(),
                            totalRecords = ln01Data.Count,
                            tableName = "LN01_History",
                            dataSource = "PROCESSED_HISTORY_TABLE"
                        });

                    case "7800_DT_KHKD1":
                        var dtKhkd1Data = await _context.DT_KHKD1_History
                            .Where(h => import.StatementDate.HasValue && h.StatementDate.Date == import.StatementDate.Value.Date)
                            .OrderByDescending(h => h.ProcessedDate)
                            .Take(100)
                            .Select(h => new
                            {
                                h.Id,
                                h.BRCD,
                                h.BRANCH_NAME,
                                h.INDICATOR_TYPE,
                                h.INDICATOR_NAME,
                                h.PLAN_YEAR,
                                h.PLAN_QUARTER,
                                h.PLAN_MONTH,
                                h.ACTUAL_YEAR,
                                h.ACTUAL_QUARTER,
                                h.ACTUAL_MONTH,
                                h.ACHIEVEMENT_RATE,
                                h.YEAR,
                                h.QUARTER,
                                h.MONTH,
                                h.CREATED_DATE,
                                h.UPDATED_DATE,
                                h.StatementDate,
                                h.ProcessedDate,
                                h.ImportId
                            })
                            .ToListAsync();

                        return Ok(new
                        {
                            response.importInfo,
                            processedData = dtKhkd1Data.Cast<object>().ToList(),
                            totalRecords = dtKhkd1Data.Count,
                            tableName = "DT_KHKD1_History",
                            dataSource = "PROCESSED_HISTORY_TABLE"
                        });

                    case "GLCB41":
                        var glcb41Data = await _context.GLCB41_History
                            .Where(h => import.StatementDate.HasValue && h.StatementDate.Date == import.StatementDate.Value.Date)
                            .OrderByDescending(h => h.ProcessedDate)
                            .Take(100)
                            .Select(h => new
                            {
                                h.Id,
                                h.JOURNAL_NO,
                                h.ACCOUNT_NO,
                                h.ACCOUNT_NAME,
                                h.CUSTOMER_ID,
                                h.CUSTOMER_NAME,
                                h.TRANSACTION_DATE,
                                h.POSTING_DATE,
                                h.DESCRIPTION,
                                h.DEBIT_AMOUNT,
                                h.CREDIT_AMOUNT,
                                h.DEBIT_BALANCE,
                                h.CREDIT_BALANCE,
                                h.BRCD,
                                h.BRANCH_NAME,
                                h.TRANSACTION_TYPE,
                                h.ORIGINAL_TRANS_ID,
                                h.CREATED_DATE,
                                h.UPDATED_DATE,
                                h.StatementDate,
                                h.ProcessedDate,
                                h.ImportId
                            })
                            .ToListAsync();

                        return Ok(new
                        {
                            response.importInfo,
                            processedData = glcb41Data.Cast<object>().ToList(),
                            totalRecords = glcb41Data.Count,
                            tableName = "GLCB41_History",
                            dataSource = "PROCESSED_HISTORY_TABLE"
                        });

                    default:
                        _logger.LogWarning("‚ö†Ô∏è No processed data handler for data type: {DataType}", dataType);
                        return Ok(new
                        {
                            response.importInfo,
                            processedData = new List<object>(),
                            totalRecords = 0,
                            tableName = $"{dataType}_History",
                            dataSource = "NO_HANDLER",
                            message = $"Ch∆∞a c√≥ handler cho lo·∫°i d·ªØ li·ªáu {dataType}"
                        });
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "üí• Error getting processed data for import ID: {Id}", id);
                return StatusCode(500, new
                {
                    message = "L·ªói khi l·∫•y d·ªØ li·ªáu ƒë√£ x·ª≠ l√Ω",
                    error = ex.Message,
                    importId = id
                });
            }
        }

        // Helper method to process special headers for 7800_DT_KHKD1
        private List<string> ProcessSpecialHeader(List<string> headerLines)
        {
            try
            {
                if (headerLines.Count != 3)
                {
                    _logger.LogWarning("‚ö†Ô∏è Expected 3 header lines, got {Count}", headerLines.Count);
                    return new List<string> { "Column1", "Column2", "Column3" }; // Fallback
                }

                // Clean and merge headers from the 3 lines
                var cleanHeaders = new List<string>();
                var maxColumns = headerLines.Max(line => line.Split(',').Length);

                for (int i = 0; i < maxColumns; i++)
                {
                    var columnParts = new List<string>();

                    foreach (var headerLine in headerLines)
                    {
                        var parts = headerLine.Split(',');
                        if (i < parts.Length)
                        {
                            var part = parts[i].Trim('"').Trim();
                            if (!string.IsNullOrWhiteSpace(part))
                            {
                                columnParts.Add(part);
                            }
                        }
                    }

                    var columnName = string.Join("_", columnParts.Where(p => !string.IsNullOrWhiteSpace(p)));
                    if (string.IsNullOrWhiteSpace(columnName))
                    {
                        columnName = $"Column{i + 1}";
                    }

                    // Sanitize column name to remove special characters
                    columnName = System.Text.RegularExpressions.Regex.Replace(columnName, @"[^\w\-_]", "_");
                    cleanHeaders.Add(columnName);
                }

                _logger.LogInformation("‚úÖ Processed special headers: {Headers}", string.Join(", ", cleanHeaders.Take(5)));
                return cleanHeaders;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "‚ùå Error processing special headers");
                return new List<string> { "Column1", "Column2", "Column3" }; // Fallback
            }
        }

        // üî§ Helper method ƒë·ªÉ ph√°t hi·ªán encoding c·ªßa file CSV
        private System.Text.Encoding DetectCsvFileEncoding(IFormFile file)
        {
            try
            {
                using var stream = file.OpenReadStream();
                using var reader = new BinaryReader(stream);

                var bom = reader.ReadBytes(4);
                stream.Position = 0;

                // Ki·ªÉm tra BOM ƒë·ªÉ ph√°t hi·ªán encoding
                if (bom.Length >= 3 && bom[0] == 0xEF && bom[1] == 0xBB && bom[2] == 0xBF)
                {
                    return System.Text.Encoding.UTF8;
                }
                if (bom.Length >= 2 && bom[0] == 0xFF && bom[1] == 0xFE)
                {
                    return System.Text.Encoding.Unicode;
                }
                if (bom.Length >= 2 && bom[0] == 0xFE && bom[1] == 0xFF)
                {
                    return System.Text.Encoding.BigEndianUnicode;
                }

                // N·∫øu kh√¥ng c√≥ BOM, th·ª≠ ph√°t hi·ªán b·∫±ng c√°ch ƒë·ªçc v√†i byte ƒë·∫ßu
                var firstBytes = reader.ReadBytes(1024);
                stream.Position = 0;

                // Ki·ªÉm tra c√≥ k√Ω t·ª± kh√¥ng h·ª£p l·ªá trong UTF-8 kh√¥ng
                try
                {
                    System.Text.Encoding.UTF8.GetString(firstBytes);
                    return System.Text.Encoding.UTF8;
                }
                catch
                {
                    // Th·ª≠ Windows-1252 (Latin-1 v·ªõi k√Ω t·ª± m·ªü r·ªông) cho ti·∫øng Vi·ªát
                    return System.Text.Encoding.GetEncoding("Windows-1252");
                }
            }
            catch (Exception ex)
            {
                _logger.LogWarning(ex, "‚ùå Cannot detect encoding for {FileName}, using UTF-8", file.FileName);
                return System.Text.Encoding.UTF8;
            }
        }

        // üìä Helper method ƒë·ªÉ x·ª≠ l√Ω file Excel v·ªõi encoding ƒë√∫ng - H·ªñ TR·ª¢ C·∫¢ .XLS V√Ä .XLSX
        private async Task<int> ProcessExcelFileForEncoding(IFormFile file, string dataType,
            int importedDataRecordId, DateTime statementDate, string branchCode, int batchSize)
        {
            try
            {
                _logger.LogInformation("üìä Processing Excel file: {FileName} for dataType: {DataType}", file.FileName, dataType);
                _logger.LogInformation("üìä File size: {Size} bytes, Content type: {ContentType}", file.Length, file.ContentType);

                int totalProcessed = 0;
                var records = new List<Dictionary<string, object>>();

                using var stream = file.OpenReadStream();

                // üîç Detect file type: .xls (legacy) ho·∫∑c .xlsx (modern)
                bool isLegacyExcel = _legacyExcelReaderService.CanReadFile(file.FileName);

                if (isLegacyExcel)
                {
                    _logger.LogInformation("üìä Using NPOI for legacy .xls file: {FileName}", file.FileName);

                    // S·ª≠ d·ª•ng NPOI ƒë·ªÉ ƒë·ªçc file .xls
                    var excelResult = await _legacyExcelReaderService.ReadExcelFileAsync(stream, file.FileName);

                    if (!excelResult.Success)
                    {
                        throw new InvalidOperationException($"Cannot read .xls file: {excelResult.Message}");
                    }

                    // Process t·ª´ng row data t·ª´ NPOI
                    foreach (var dataRow in excelResult.Data)
                    {
                        var record = new Dictionary<string, object>(dataRow);

                        // Th√™m metadata
                        record["BranchCode"] = branchCode;
                        record["StatementDate"] = statementDate.ToString("yyyy-MM-dd");
                        record["ImportDate"] = VietnamDateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");
                        record["ImportedBy"] = "System";

                        records.Add(record);

                        // Batch processing
                        if (records.Count >= batchSize)
                        {
                            await SaveBatchToDatabase(records, importedDataRecordId, branchCode);
                            totalProcessed += records.Count;
                            records.Clear();

                            if (totalProcessed % 5000 == 0)
                            {
                                _logger.LogInformation("‚ö° Legacy Excel processed {Processed} records...", totalProcessed);
                            }
                        }
                    }

                    // L∆∞u batch cu·ªëi c√πng
                    if (records.Any())
                    {
                        await SaveBatchToDatabase(records, importedDataRecordId, branchCode);
                        totalProcessed += records.Count;
                    }

                    _logger.LogInformation("‚úÖ Legacy Excel (.xls) processing completed: {Records} records", totalProcessed);
                    return totalProcessed;
                }
                else
                {
                    _logger.LogInformation("üìä Using ClosedXML for modern .xlsx file: {FileName}", file.FileName);

                    // S·ª≠ d·ª•ng ClosedXML cho .xlsx (code hi·ªán t·∫°i)
                    return await ProcessModernExcelFile(stream, file, dataType, importedDataRecordId, statementDate, branchCode, batchSize);
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "‚ùå Error processing Excel file: {FileName}", file.FileName);
                throw;
            }
        }

        // üìä Helper method ƒë·ªÉ x·ª≠ l√Ω file .xlsx b·∫±ng ClosedXML (t√°ch t·ª´ code c≈©)
        private async Task<int> ProcessModernExcelFile(Stream stream, IFormFile file, string dataType,
            int importedDataRecordId, DateTime statementDate, string branchCode, int batchSize)
        {
            int totalProcessed = 0;
            var records = new List<Dictionary<string, object>>();

            // üîç Enhanced Excel file validation
            ClosedXML.Excel.XLWorkbook workbook;
            try
            {
                workbook = new ClosedXML.Excel.XLWorkbook(stream);
                _logger.LogInformation("‚úÖ Excel workbook opened successfully");
            }
            catch (Exception excelEx)
            {
                _logger.LogError(excelEx, "‚ùå Failed to open Excel file: {FileName} - {Error}", file.FileName, excelEx.Message);
                throw new InvalidOperationException($"Cannot read Excel file: {excelEx.Message}", excelEx);
            }
            using (workbook)
            {
                // üîç Validate workbook has worksheets
                if (!workbook.Worksheets.Any())
                {
                    throw new InvalidOperationException("Excel file contains no worksheets");
                }

                var worksheet = workbook.Worksheets.First();
                var rows = worksheet.RowsUsed();

                _logger.LogInformation("üìä Excel file has {RowCount} rows used in worksheet: {WorksheetName}",
                    rows.Count(), worksheet.Name);

                if (!rows.Any())
                {
                    _logger.LogWarning("‚ö†Ô∏è Excel worksheet is empty");
                    return 0;
                }

                List<string>? headers = null;
                int rowIndex = 0;

                foreach (var row in rows)
                {
                    rowIndex++;

                    // ÔøΩ D√≤ng 1: Header (ti√™u ƒë·ªÅ nguy√™n b·∫£n t·ª´ file g·ªëc)
                    if (rowIndex == 1)
                    {
                        headers = GetExcelRowValuesWithEncoding(row);
                        _logger.LogInformation("ÔøΩ Headers found: [{Headers}]", string.Join("] [", headers.Take(10)));
                        continue;
                    }

                    // ‚ùå Skip n·∫øu ch∆∞a c√≥ headers
                    if (headers == null) continue;

                    // üìä T·ª´ d√≤ng 2 tr·ªü ƒëi: D·ªØ li·ªáu th·ª±c
                    var values = GetExcelRowValuesWithEncoding(row);

                    // Skip empty rows
                    if (values.All(v => string.IsNullOrWhiteSpace(v)))
                        continue;

                    var record = new Dictionary<string, object>();

                    // Map values to headers
                    for (int j = 0; j < Math.Min(headers.Count, values.Count); j++)
                    {
                        record[headers[j]] = values[j];
                    }

                    // Th√™m metadata theo chu·∫©n Temporal Tables + Columnstore Indexes
                    record["BranchCode"] = branchCode;
                    record["StatementDate"] = statementDate.ToString("yyyy-MM-dd");
                    record["ImportDate"] = VietnamDateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");
                    record["ImportedBy"] = "System";

                    records.Add(record);

                    // Batch processing
                    if (records.Count >= batchSize)
                    {
                        await SaveBatchToDatabase(records, importedDataRecordId, branchCode);
                        totalProcessed += records.Count;
                        records.Clear();

                        if (totalProcessed % 5000 == 0)
                        {
                            _logger.LogInformation("‚ö° Modern Excel processed {Processed} records...", totalProcessed);
                        }
                    }
                }

                // L∆∞u batch cu·ªëi c√πng
                if (records.Any())
                {
                    await SaveBatchToDatabase(records, importedDataRecordId, branchCode);
                    totalProcessed += records.Count;
                }

                _logger.LogInformation("‚úÖ Modern Excel (.xlsx) processing completed: {Records} records", totalProcessed);
            } // End using workbook

            return totalProcessed;
        }

        // üìã Helper method ƒë·ªÉ l·∫•y gi√° tr·ªã t·ª´ Excel row v·ªõi encoding ƒë√∫ng
        private List<string> GetExcelRowValuesWithEncoding(ClosedXML.Excel.IXLRow row)
        {
            var values = new List<string>();

            foreach (var cell in row.CellsUsed())
            {
                var value = cell.GetString().Trim();
                // üî§ ƒê·∫£m b·∫£o encoding ƒë√∫ng cho k√Ω t·ª± ti·∫øng Vi·ªát
                if (!string.IsNullOrEmpty(value))
                {
                    value = FixVietnameseEncoding(value);
                }
                values.Add(value);
            }

            return values;
        }

        // üìÑ Helper method ƒë·ªÉ x·ª≠ l√Ω n·ªôi dung file CSV v·ªõi encoding ƒë√∫ng
        private async Task<int> ProcessCsvFileContent(StreamReader reader, string dataType,
            int importedDataRecordId, DateTime statementDate, string branchCode, int batchSize)
        {
            try
            {
                _logger.LogInformation("üìÑ Processing CSV content for: {DataType}", dataType);

                int totalProcessed = 0;
                var records = new List<Dictionary<string, object>>();

                string? line;
                var headerLines = new List<string>();
                List<string>? headers = null;
                int lineCount = 0;

                bool isSpecialHeaderFile = dataType.Contains("7800_DT_KHKD1");

                while ((line = await reader.ReadLineAsync()) != null)
                {
                    if (string.IsNullOrWhiteSpace(line)) continue;

                    lineCount++;

                    // üî• X·ª≠ l√Ω ƒë·∫∑c bi·ªát cho file 7800_DT_KHKD1
                    if (isSpecialHeaderFile)
                    {
                        if (lineCount >= 10 && lineCount <= 12)
                        {
                            headerLines.Add(line);
                            continue;
                        }

                        if (lineCount == 12 && headerLines.Count == 3)
                        {
                            headers = ProcessSpecialHeader(headerLines);
                            _logger.LogInformation("üî• 7800_DT_KHKD1 Special Headers: {Headers}",
                                string.Join(", ", headers.Take(5)));
                            continue;
                        }

                        if (lineCount < 13) continue;
                    }
                    else
                    {
                        // Header row th√¥ng th∆∞·ªùng
                        if (lineCount == 1)
                        {
                            headers = line.Split(',').Select(h => h.Trim('"').Trim()).ToList();
                            _logger.LogInformation("üìã CSV Headers: {Headers}",
                                string.Join(", ", headers.Take(5)));
                            continue;
                        }
                    }

                    if (headers == null) continue;

                    // Data row
                    var values = line.Split(',').Select(v => v.Trim('"').Trim()).ToList();
                    var record = new Dictionary<string, object>();

                    for (int j = 0; j < Math.Min(headers.Count, values.Count); j++)
                    {
                        // üî§ Fix encoding for Vietnamese characters
                        var value = values[j];
                        if (!string.IsNullOrEmpty(value))
                        {
                            value = FixVietnameseEncoding(value);
                        }
                        record[headers[j]] = value;
                    }

                    // Th√™m metadata
                    record["BranchCode"] = branchCode;
                    record["StatementDate"] = statementDate.ToString("yyyy-MM-dd");
                    record["ImportDate"] = VietnamDateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");
                    record["ImportedBy"] = "System";

                    records.Add(record);

                    // Batch processing
                    if (records.Count >= batchSize)
                    {
                        await SaveBatchToDatabase(records, importedDataRecordId, branchCode);
                        totalProcessed += records.Count;
                        records.Clear();

                        if (totalProcessed % 5000 == 0)
                        {
                            _logger.LogInformation("‚ö° CSV processed {Processed} records...", totalProcessed);
                        }
                    }
                }

                // L∆∞u batch cu·ªëi c√πng
                if (records.Any())
                {
                    await SaveBatchToDatabase(records, importedDataRecordId, branchCode);
                    totalProcessed += records.Count;
                }

                _logger.LogInformation("‚úÖ CSV file processing completed: {Records} records", totalProcessed);
                return totalProcessed;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "‚ùå Error processing CSV content");
                throw;
            }
        }

        // üî§ Helper method ƒë·ªÉ s·ª≠a encoding ti·∫øng Vi·ªát
        private string FixVietnameseEncoding(string input)
        {
            try
            {
                if (string.IsNullOrEmpty(input)) return input;

                // Ki·ªÉm tra v√† fix c√°c k√Ω t·ª± encoding b·ªã l·ªói th∆∞·ªùng g·∫∑p
                if (input.Contains("√¢‚Ç¨") || input.Contains("√Ñ") || input.Contains("√É"))
                {
                    // Th·ª≠ chuy·ªÉn ƒë·ªïi t·ª´ UTF-8 b·ªã l·ªói th√†nh Unicode ƒë√∫ng
                    var bytes = System.Text.Encoding.GetEncoding("ISO-8859-1").GetBytes(input);
                    return System.Text.Encoding.UTF8.GetString(bytes);
                }

                // N·∫øu kh√¥ng c√≥ v·∫•n ƒë·ªÅ, tr·∫£ v·ªÅ nguy√™n b·∫£n
                return input;
            }
            catch (Exception ex)
            {
                _logger.LogWarning(ex, "‚ùå Error fixing encoding for text: {Input}", input.Substring(0, Math.Min(input.Length, 50)));
                return input; // Fallback to original
            }
        }

        // üî• AUTO-PROCESS METHOD: T·ª± ƒë·ªông x·ª≠ l√Ω d·ªØ li·ªáu sau khi import th√†nh c√¥ng
        private async Task AutoProcessAfterImport(int importedDataRecordId, string dataType, DateTime statementDate)
        {
            try
            {
                _logger.LogInformation("üîÑ Starting auto-process for ImportId: {ImportId}, DataType: {DataType}",
                    importedDataRecordId, dataType);

                // Ch·ªâ t·ª± ƒë·ªông x·ª≠ l√Ω cho c√°c lo·∫°i d·ªØ li·ªáu ƒë∆∞·ª£c h·ªó tr·ª£
                var supportedTypes = new[] { "GLCB41", "LN01", "LN02", "DP01" };
                if (!supportedTypes.Contains(dataType.ToUpper()))
                {
                    _logger.LogInformation("‚ÑπÔ∏è DataType {DataType} kh√¥ng c·∫ßn auto-process", dataType);
                    return;
                }

                // S·ª≠ d·ª•ng injected processing service
                var processingResult = await _processingService.ProcessImportedDataToHistoryAsync(
                    importedDataRecordId, dataType.ToUpper(), statementDate);

                if (processingResult.Success)
                {
                    _logger.LogInformation("‚úÖ Auto-process th√†nh c√¥ng cho ImportId: {ImportId}, Processed: {ProcessedCount} records",
                        importedDataRecordId, processingResult.ProcessedRecords);

                    // C·∫≠p nh·∫≠t status trong database n·∫øu c·∫ßn
                    var importRecord = await _context.ImportedDataRecords.FindAsync(importedDataRecordId);
                    if (importRecord != null)
                    {
                        importRecord.Notes = $"{importRecord.Notes} | Auto-processed: {processingResult.ProcessedRecords} records";
                        await _context.SaveChangesAsync();
                    }
                }
                else
                {
                    _logger.LogWarning("‚ö†Ô∏è Auto-process failed cho ImportId: {ImportId}, Error: {Error}",
                        importedDataRecordId, processingResult.Message);
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "‚ùå Exception trong auto-process cho ImportId: {ImportId}", importedDataRecordId);
            }
        }

        // üîß DEBUG ENDPOINT: Ph√¢n t√≠ch c·∫•u tr√∫c file Excel ƒë·ªÉ debug
        [HttpPost("debug-excel")]
        public async Task<IActionResult> DebugExcelFile([FromForm] IFormFile file)
        {
            try
            {
                if (file == null || file.Length == 0)
                    return BadRequest("No file provided");

                _logger.LogInformation("üîß DEBUG: Analyzing Excel file {FileName}", file.FileName);

                using var stream = file.OpenReadStream();
                using var workbook = new ClosedXML.Excel.XLWorkbook(stream);

                var result = new
                {
                    FileName = file.FileName,
                    FileSize = file.Length,
                    Worksheets = workbook.Worksheets.Select(ws => new
                    {
                        Name = ws.Name,
                        RowsUsed = ws.RowsUsed().Count(),
                        ColumnsUsed = ws.ColumnsUsed().Count(),
                        FirstRows = ws.RowsUsed().Take(10).Select((row, index) => new
                        {
                            RowNumber = index + 1,
                            Values = row.CellsUsed().Select(cell => cell.GetString().Trim()).ToArray()
                        }).ToArray()
                    }).ToArray()
                };

                return Ok(result);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "‚ùå Error analyzing Excel file");
                return StatusCode(500, new { message = "Error analyzing file", error = ex.Message });
            }
        }

        // üîß DEBUG ENDPOINT: Test Legacy Excel Reader Service
        [HttpPost("debug-legacy-excel")]
        public async Task<IActionResult> DebugLegacyExcelReader([FromForm] IFormFile file)
        {
            try
            {
                if (file == null || file.Length == 0)
                    return BadRequest("No file provided");

                _logger.LogInformation("üîß DEBUG: Testing Legacy Excel Reader with file {FileName}", file.FileName);

                using var stream = file.OpenReadStream();
                var result = await _legacyExcelReaderService.ReadExcelFileAsync(stream, file.FileName);

                var response = new
                {
                    FileName = file.FileName,
                    CanReadFile = _legacyExcelReaderService.CanReadFile(file.FileName),
                    Success = result.Success,
                    Message = result.Message,
                    Headers = result.Headers,
                    DataRowsCount = result.Data.Count,
                    TotalRows = result.TotalRows,
                    WorksheetName = result.WorksheetName,
                    Errors = result.Errors,
                    SampleData = result.Data.Take(3).ToArray() // First 3 rows for preview
                };

                return Ok(response);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "‚ùå Error testing legacy Excel reader");
                return StatusCode(500, new { message = "Error testing legacy reader", error = ex.Message });
            }
        }
    }
}
