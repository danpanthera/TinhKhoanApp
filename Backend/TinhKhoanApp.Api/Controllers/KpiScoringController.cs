using TinhKhoanApp.Api.Models.Common;
using Microsoft.AspNetCore.Mvc;
using TinhKhoanApp.Api.Services;
using TinhKhoanApp.Api.Models;
using TinhKhoanApp.Api.Data;

namespace TinhKhoanApp.Api.Controllers
{
    [ApiController]
    [Route("api/[controller]")]
    public class KpiScoringController : ControllerBase
    {
        private readonly IKpiScoringService _scoringService;
        private readonly ILogger<KpiScoringController> _logger;

        public KpiScoringController(IKpiScoringService scoringService, ILogger<KpiScoringController> logger)
        {
            _scoringService = scoringService;
            _logger = logger;
        }

        // üìù API ch·∫•m ƒëi·ªÉm th·ªß c√¥ng cho KPI ƒë·ªãnh t√≠nh
        [HttpPost("manual-score")]
        public async Task<IActionResult> UpdateManualScore([FromBody] ManualScoreRequest request)
        {
            try
            {
                var result = await _scoringService.UpdateManualScoreAsync(request.TargetId, request.ActualValue);
                
                if (result.Success)
                {
                    return Ok(new
                    {
                        success = true,
                        message = "C·∫≠p nh·∫≠t ƒëi·ªÉm th√†nh c√¥ng",
                        target = new
                        {
                            id = result.UpdatedTarget?.Id,
                            actualValue = result.UpdatedTarget?.ActualValue,
                            score = result.UpdatedTarget?.Score,
                            updatedDate = result.UpdatedTarget?.UpdatedDate
                        }
                    });
                }
                else
                {
                    return BadRequest(new { success = false, message = result.ErrorMessage });
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "L·ªói API ch·∫•m ƒëi·ªÉm th·ªß c√¥ng");
                return StatusCode(500, new { success = false, message = "L·ªói h·ªá th·ªëng" });
            }
        }

        // üìä API import h√†ng lo·∫°t ƒëi·ªÉm KPI ƒë·ªãnh l∆∞·ª£ng
        [HttpPost("bulk-import")]
        public async Task<IActionResult> BulkImportScores([FromBody] BulkImportRequest request)
        {
            try
            {
                var result = await _scoringService.BulkImportQuantitativeScoresAsync(request.Scores);
                
                return Ok(new
                {
                    success = result.Success,
                    successCount = result.SuccessCount,
                    totalCount = request.Scores.Count,
                    errorCount = request.Scores.Count - result.SuccessCount,
                    errors = result.ErrorMessages
                });
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "L·ªói API import h√†ng lo·∫°t");
                return StatusCode(500, new { success = false, message = "L·ªói h·ªá th·ªëng" });
            }
        }

        // üßÆ API t√≠nh to√°n KPI t·ª∑ l·ªá t·ª´ t·ª≠ s·ªë/m·∫´u s·ªë
        [HttpPost("calculate-ratio")]
        public async Task<IActionResult> CalculateRatioKpi([FromBody] RatioCalculationRequest request)
        {
            try
            {
                var result = await _scoringService.CalculateRatioKpiAsync(
                    request.TargetId, 
                    request.Numerator, 
                    request.Denominator
                );
                
                if (result.Success)
                {
                    return Ok(new
                    {
                        success = true,
                        message = "T√≠nh to√°n t·ª∑ l·ªá th√†nh c√¥ng",
                        target = new
                        {
                            id = result.UpdatedTarget?.Id,
                            actualValue = result.UpdatedTarget?.ActualValue,
                            score = result.UpdatedTarget?.Score,
                            notes = result.UpdatedTarget?.Notes,
                            updatedDate = result.UpdatedTarget?.UpdatedDate
                        }
                    });
                }
                else
                {
                    return BadRequest(new { success = false, message = result.ErrorMessage });
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "L·ªói API t√≠nh to√°n t·ª∑ l·ªá");
                return StatusCode(500, new { success = false, message = "L·ªói h·ªá th·ªëng" });
            }
        }

        // üîç API ki·ªÉm tra lo·∫°i KPI
        [HttpGet("check-kpi-type/{indicatorId}")]
        public async Task<IActionResult> CheckKpiType(int indicatorId)
        {
            try
            {
                var context = HttpContext.RequestServices.GetRequiredService<ApplicationDbContext>();
                var indicator = await context.KpiIndicators.FindAsync(indicatorId);
                
                if (indicator == null)
                {
                    return NotFound(new { success = false, message = "Kh√¥ng t√¨m th·∫•y KPI" });
                }

                var inputType = _scoringService.GetKpiInputType(indicator);
                
                return Ok(new
                {
                    success = true,
                    indicatorId = indicator.Id,
                    indicatorName = indicator.IndicatorName,
                    inputType = inputType.ToString(),
                    valueType = indicator.ValueType.ToString(),
                    unit = indicator.Unit,
                    maxScore = indicator.MaxScore,
                    description = GetInputTypeDescription(inputType)
                });
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "L·ªói API ki·ªÉm tra lo·∫°i KPI");
                return StatusCode(500, new { success = false, message = "L·ªói h·ªá th·ªëng" });
            }
        }

        // üè∑Ô∏è Helper method m√¥ t·∫£ lo·∫°i KPI
        private string GetInputTypeDescription(KpiInputType inputType)
        {
            return inputType switch
            {
                KpiInputType.QUALITATIVE => "ƒê·ªãnh t√≠nh - Ch·∫•m ƒëi·ªÉm th·ªß c√¥ng (0-100%)",
                KpiInputType.QUANTITATIVE_RATIO => "ƒê·ªãnh l∆∞·ª£ng t·ª∑ l·ªá - T√≠nh to√°n t·ª´ t·ª≠ s·ªë/m·∫´u s·ªë",
                KpiInputType.QUANTITATIVE_ABSOLUTE => "ƒê·ªãnh l∆∞·ª£ng tuy·ªát ƒë·ªëi - Import t·ª´ d·ªØ li·ªáu th·ª±c t·∫ø",
                _ => "Kh√¥ng x√°c ƒë·ªãnh"
            };
        }
    }

    // üìã Request DTOs
    public class ManualScoreRequest
    {
        public int TargetId { get; set; }
        public decimal ActualValue { get; set; } // 0-100%
        public string? Notes { get; set; }
    }

    public class BulkImportRequest
    {
        public List<QuantitativeScoreDto> Scores { get; set; } = new();
    }

    public class RatioCalculationRequest
    {
        public int TargetId { get; set; }
        public decimal Numerator { get; set; }   // T·ª≠ s·ªë
        public decimal Denominator { get; set; } // M·∫´u s·ªë
        public string? Notes { get; set; }
    }
}
