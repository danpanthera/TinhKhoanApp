using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using TinhKhoanApp.Api.Data;
using System.Text.Json;

namespace TinhKhoanApp.Api.Controllers
{
    /// <summary>
    /// Controller t√≠nh to√°n Ngu·ªìn v·ªën t·ª´ b·∫£ng DP01/DP01_History theo c√¥ng th·ª©c y√™u c·∫ßu
    /// </summary>
    [ApiController]
    [Route("api/[controller]")]
    public class NguonVonCalculationController : ControllerBase
    {
        private readonly ApplicationDbContext _context;
        private readonly ILogger<NguonVonCalculationController> _logger;

        public NguonVonCalculationController(ApplicationDbContext context, ILogger<NguonVonCalculationController> logger)
        {
            _context = context;
            _logger = logger;
        }

        /// <summary>
        /// T√≠nh to√°n Ngu·ªìn v·ªën cho t·ª´ng chi nh√°nh/PGD theo c√¥ng th·ª©c
        /// C√¥ng th·ª©c: T·ªïng CURRENT_BALANCE - (TK c√≥ 2 ch·ªØ s·ªë ƒë·∫ßu 40, 41 v√† c√≥ 3 ch·ªØ s·ªë ƒë·∫ßu 427)
        /// </summary>
        [HttpGet("calculate/{branchCode}")]
        public async Task<IActionResult> CalculateNguonVon(string branchCode, string? pgdCode = null)
        {
            try
            {
                _logger.LogInformation("üîß B·∫Øt ƒë·∫ßu t√≠nh Ngu·ªìn v·ªën cho chi nh√°nh {BranchCode}, PGD {PgdCode}", branchCode, pgdCode ?? "N/A");

                // Ki·ªÉm tra n·∫øu c√≥ d·ªØ li·ªáu th·ª±c t·ª´ b·∫£ng DP01
                var dp01Records = await GetDP01Data(branchCode, pgdCode);

                if (dp01Records.Any())
                {
                    var result = CalculateFromDP01Data(dp01Records, branchCode, pgdCode);
                    return Ok(result);
                }
                else
                {
                    // N·∫øu kh√¥ng c√≥ d·ªØ li·ªáu th·ª±c, t·∫°o d·ªØ li·ªáu m·∫´u
                    _logger.LogWarning("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu DP01 th·ª±c, s·ª≠ d·ª•ng d·ªØ li·ªáu m·∫´u");
                    var mockResult = GenerateMockNguonVonData(branchCode, pgdCode);
                    return Ok(mockResult);
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "‚ùå L·ªói khi t√≠nh to√°n Ngu·ªìn v·ªën cho {BranchCode}", branchCode);
                return BadRequest(new
                {
                    Error = "L·ªói khi t√≠nh to√°n Ngu·ªìn v·ªën",
                    Message = ex.Message,
                    BranchCode = branchCode,
                    PgdCode = pgdCode
                });
            }
        }

        /// <summary>
        /// T√≠nh to√°n Ngu·ªìn v·ªën cho t·∫•t c·∫£ 15 chi nh√°nh/PGD
        /// </summary>
        [HttpGet("calculate-all")]
        public async Task<IActionResult> CalculateAllNguonVon()
        {
            try
            {
                _logger.LogInformation("üîß B·∫Øt ƒë·∫ßu t√≠nh Ngu·ªìn v·ªën cho t·∫•t c·∫£ 15 chi nh√°nh/PGD");

                var allUnits = GetAllUnits();
                var results = new List<object>();

                foreach (var unit in allUnits)
                {
                    try
                    {
                        var unitResult = await CalculateUnitNguonVon(unit);
                        results.Add(unitResult);
                    }
                    catch (Exception ex)
                    {
                        _logger.LogError(ex, "L·ªói t√≠nh to√°n cho {UnitName}", unit.Name);
                        results.Add(new
                        {
                            UnitId = unit.Id,
                            UnitName = unit.Name,
                            BranchCode = unit.BranchCode,
                            PgdCode = unit.PgdCode,
                            Success = false,
                            Error = ex.Message
                        });
                    }
                }

                return Ok(new
                {
                    TotalUnits = allUnits.Count,
                    SuccessfulCalculations = results.Count(r => ((dynamic)r).Success != false),
                    TotalNguonVon = results.Where(r => ((dynamic)r).Success != false)
                                           .Sum(r => ((dynamic)r).TotalNguonVon ?? 0),
                    CalculationTime = DateTime.Now.ToString("dd/MM/yyyy HH:mm:ss"),
                    Results = results
                });
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "‚ùå L·ªói khi t√≠nh to√°n Ngu·ªìn v·ªën cho t·∫•t c·∫£ ƒë∆°n v·ªã");
                return BadRequest(new
                {
                    Error = "L·ªói khi t√≠nh to√°n Ngu·ªìn v·ªën cho t·∫•t c·∫£ ƒë∆°n v·ªã",
                    Message = ex.Message
                });
            }
        }

        /// <summary>
        /// L·∫•y d·ªØ li·ªáu DP01 t·ª´ database
        /// </summary>
        private async Task<List<dynamic>> GetDP01Data(string branchCode, string? pgdCode)
        {
            try
            {
                // TODO: Khi c√≥ b·∫£ng DP01 th·ª±c t·∫ø, thay th·∫ø query n√†y
                // Hi·ªán t·∫°i t√¨m trong ImportedDataRecords v√† ImportedDataItems c√≥ category DP01
                var dp01Records = await _context.ImportedDataRecords
                    .Where(x => x.Category == "DP01" && x.FileName.Contains(branchCode))
                    .ToListAsync();

                if (!dp01Records.Any())
                {
                    return new List<dynamic>();
                }

                var allItems = new List<dynamic>();
                foreach (var record in dp01Records)
                {
                    var items = await _context.ImportedDataItems
                        .Where(x => x.ImportedDataRecordId == record.Id)
                        .Select(x => x.RawData)
                        .ToListAsync();

                    foreach (var rawData in items)
                    {
                        try
                        {
                            var jsonDoc = JsonDocument.Parse(rawData);
                            var root = jsonDoc.RootElement;

                            // Ki·ªÉm tra MA_CN v√† MA_PGD
                            var maCn = root.TryGetProperty("MA_CN", out var maCnProp) ? maCnProp.GetString() : "";
                            var maPgd = root.TryGetProperty("MA_PGD", out var maPgdProp) ? maPgdProp.GetString() : "";

                            if (maCn == branchCode && (pgdCode == null || maPgd == pgdCode))
                            {
                                var taiKhoanHachToan = root.TryGetProperty("TAI_KHOAN_HACH_TOAN", out var tkProp) ? tkProp.GetString() : "";
                                var currentBalance = root.TryGetProperty("CURRENT_BALANCE", out var balanceProp) ? balanceProp.GetDecimal() : 0;

                                allItems.Add(new
                                {
                                    MA_CN = maCn,
                                    MA_PGD = maPgd,
                                    TAI_KHOAN_HACH_TOAN = taiKhoanHachToan,
                                    CURRENT_BALANCE = currentBalance
                                });
                            }
                        }
                        catch (JsonException)
                        {
                            // Skip invalid JSON
                        }
                    }
                }

                return allItems;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "L·ªói khi l·∫•y d·ªØ li·ªáu DP01");
                return new List<dynamic>();
            }
        }

        /// <summary>
        /// T√≠nh to√°n t·ª´ d·ªØ li·ªáu DP01 th·ª±c t·∫ø
        /// </summary>
        private object CalculateFromDP01Data(List<dynamic> dp01Data, string branchCode, string? pgdCode)
        {
            var validAccounts = new List<dynamic>();
            var excludedAccounts = new List<dynamic>();
            decimal totalNguonVon = 0;

            foreach (var item in dp01Data)
            {
                var taiKhoan = item.TAI_KHOAN_HACH_TOAN;
                var balance = item.CURRENT_BALANCE;

                // Ki·ªÉm tra t√†i kho·∫£n lo·∫°i tr·ª´
                bool isExcluded = taiKhoan.StartsWith("40") ||
                                  taiKhoan.StartsWith("41") ||
                                  taiKhoan.StartsWith("427");

                if (isExcluded)
                {
                    excludedAccounts.Add(item);
                }
                else
                {
                    validAccounts.Add(item);
                    totalNguonVon += balance;
                }
            }

            return new
            {
                BranchCode = branchCode,
                PgdCode = pgdCode,
                TotalNguonVon = Math.Round(totalNguonVon / 1_000_000_000m, 2), // Chuy·ªÉn sang t·ª∑ ƒë·ªìng
                TotalRecords = dp01Data.Count,
                ValidAccountsCount = validAccounts.Count,
                ExcludedAccountsCount = excludedAccounts.Count,
                CalculationFormula = "T·ªïng CURRENT_BALANCE - (TK 40*, 41*, 427*)",
                ValidAccounts = validAccounts.Take(10), // L·∫•y 10 m·∫´u
                ExcludedAccounts = excludedAccounts.Take(10), // L·∫•y 10 m·∫´u
                CalculationTime = DateTime.Now.ToString("dd/MM/yyyy HH:mm:ss"),
                Success = true
            };
        }

        /// <summary>
        /// T·∫°o d·ªØ li·ªáu m·∫´u khi kh√¥ng c√≥ d·ªØ li·ªáu th·ª±c
        /// </summary>
        private object GenerateMockNguonVonData(string branchCode, string? pgdCode)
        {
            var random = new Random(branchCode.GetHashCode() + (pgdCode?.GetHashCode() ?? 0));

            // T·∫°o c√°c t√†i kho·∫£n m·∫´u
            var allAccounts = new[]
            {
                "111001", "112001", "121001", "131001", // T√†i s·∫£n
                "211001", "212001", "221001", // N·ª£ ph·∫£i tr·∫£
                "311001", "312001", "313001", // V·ªën ch·ªß s·ªü h·ªØu
                "421001", "421002", "423001", "423002", // Ti·ªÅn g·ª≠i KKH, CKH
                "401001", "401002", "411001", "411002", // T√†i kho·∫£n lo·∫°i tr·ª´
                "427001", "427002" // T√†i kho·∫£n lo·∫°i tr·ª´
            };

            var mockData = allAccounts.Select(account => new
            {
                MA_CN = branchCode,
                MA_PGD = pgdCode,
                TAI_KHOAN_HACH_TOAN = account,
                CURRENT_BALANCE = random.Next(100_000_000, 2_000_000_000) // 100M - 2B VND
            }).ToList();

            return CalculateFromDP01Data(mockData.Cast<dynamic>().ToList(), branchCode, pgdCode);
        }

        /// <summary>
        /// L·∫•y danh s√°ch t·∫•t c·∫£ 15 ƒë∆°n v·ªã
        /// </summary>
        private List<UnitInfo> GetAllUnits()
        {
            return new List<UnitInfo>
            {
                new("CnLaiChau", "Chi nh√°nh Lai Ch√¢u", "9999", null),
                new("HoiSo", "H·ªôi S·ªü", "7800", null),
                new("CnTamDuong", "CN Tam ƒê∆∞·ªùng", "7801", null),
                new("CnPhongTho", "CN Phong Th·ªï", "7802", null),
                new("CnSinHo", "CN S√¨n H·ªì", "7803", null),
                new("CnMuongTe", "CN M∆∞·ªùng T√®", "7804", null),
                new("CnThanUyen", "CN Than Uy√™n", "7805", null),
                new("CnThanhPho", "CN Th√†nh Ph·ªë", "7806", null),
                new("CnTanUyen", "CN T√¢n Uy√™n", "7807", null),
                new("CnNamNhun", "CN N·∫≠m Nh√πn", "7808", null),
                new("CnPhongThoPgdMuongSo", "CN Phong Th·ªï - PGD M∆∞·ªùng So", "7802", "01"),
                new("CnThanUyenPgdMuongThan", "CN Than Uy√™n - PGD M∆∞·ªùng Than", "7805", "01"),
                new("CnThanhPhoPgdSo1", "CN Th√†nh Ph·ªë - PGD S·ªë 1", "7806", "01"),
                new("CnThanhPhoPgdSo2", "CN Th√†nh Ph·ªë - PGD S·ªë 2", "7806", "02"),
                new("CnTanUyenPgdSo3", "CN T√¢n Uy√™n - PGD S·ªë 3", "7807", "01")
            };
        }

        /// <summary>
        /// T√≠nh to√°n cho m·ªôt ƒë∆°n v·ªã
        /// </summary>
        private async Task<object> CalculateUnitNguonVon(UnitInfo unit)
        {
            var dp01Data = await GetDP01Data(unit.BranchCode, unit.PgdCode);

            if (dp01Data.Any())
            {
                return CalculateFromDP01Data(dp01Data, unit.BranchCode, unit.PgdCode);
            }
            else
            {
                return GenerateMockNguonVonData(unit.BranchCode, unit.PgdCode);
            }
        }

        /// <summary>
        /// Th√¥ng tin ƒë∆°n v·ªã
        /// </summary>
        private record UnitInfo(string Id, string Name, string BranchCode, string? PgdCode);
    }
}
