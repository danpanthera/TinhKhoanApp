using TinhKhoanApp.Api.Models.Common;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using TinhKhoanApp.Api.Data;
using TinhKhoanApp.Api.Models;

namespace TinhKhoanApp.Api.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class SeedKpiSimpleController : ControllerBase
    {
        private readonly ApplicationDbContext _context;
        private readonly ILogger<SeedKpiSimpleController> _logger;

        public SeedKpiSimpleController(ApplicationDbContext context, ILogger<SeedKpiSimpleController> logger)
        {
            _context = context;
            _logger = logger;
        }

        [HttpPost("create-standard-structure")]
        public async Task<IActionResult> CreateStandardKpiStructure()
        {
            try
            {
                _logger.LogInformation("=== T·∫°o c·∫•u tr√∫c KPI chu·∫©n 32 b·∫£ng ===");

                // 1. Reset current data
                _logger.LogInformation("üßπ X√≥a d·ªØ li·ªáu KPI hi·ªán t·∫°i...");
                _context.KpiIndicators.RemoveRange(_context.KpiIndicators);
                _context.KpiAssignmentTables.RemoveRange(_context.KpiAssignmentTables);
                await _context.SaveChangesAsync();

                // 2. Create 23 role tables + 9 branch tables
                var tables = new List<KpiAssignmentTable>();

                // 23 role tables (CANBO)
                var roleTables = new[]
                {
                    ("TruongphongKhdn", "Tr∆∞·ªüng ph√≤ng KHDN"),
                    ("TruongphongKhcn", "Tr∆∞·ªüng ph√≤ng KHCN"),
                    ("PhophongKhdn", "Ph√≥ ph√≤ng KHDN"),
                    ("PhophongKhcn", "Ph√≥ ph√≤ng KHCN"),
                    ("TruongphongKhqlrr", "Tr∆∞·ªüng ph√≤ng K·∫ø ho·∫°ch v√† Qu·∫£n l√Ω r·ªßi ro"),
                    ("PhophongKhqlrr", "Ph√≥ ph√≤ng K·∫ø ho·∫°ch v√† Qu·∫£n l√Ω r·ªßi ro"),
                    ("Cbtd", "C√°n b·ªô t√≠n d·ª•ng"),
                    ("TruongphongKtnqCnl1", "Tr∆∞·ªüng ph√≤ng K·∫ø to√°n & Ng√¢n qu·ªπ CNL1"),
                    ("PhophongKtnqCnl1", "Ph√≥ ph√≤ng K·∫ø to√°n & Ng√¢n qu·ªπ CNL1"),
                    ("Gdv", "Giao d·ªãch vi√™n"),
                    ("TqHkKtnb", "TQ/H·∫≠u ki·ªÉm/K·∫ø to√°n n·ªôi b·ªô"),
                    ("TruongphongItThKtgs", "Tr∆∞·ªüng ph√≤ng IT/TH/KTGS"),
                    ("CbItThKtgsKhqlrr", "CB IT/TH/KTGS/KHQLRR"),
                    ("GiamdocPgd", "Gi√°m ƒë·ªëc PGD"),
                    ("PhogiamdocPgd", "Ph√≥ gi√°m ƒë·ªëc PGD"),
                    ("PhogiamdocPgdCbtd", "Ph√≥ gi√°m ƒë·ªëc PGD ki√™m CBTD"),
                    ("GiamdocCnl2", "Gi√°m ƒë·ªëc CNL2"),
                    ("PhogiamdocCnl2Td", "Ph√≥ gi√°m ƒë·ªëc CNL2 ph·ª• tr√°ch T√≠n d·ª•ng"),
                    ("PhogiamdocCnl2Kt", "Ph√≥ gi√°m ƒë·ªëc CNL2 ph·ª• tr√°ch K·∫ø to√°n"),
                    ("TruongphongKhCnl2", "Tr∆∞·ªüng ph√≤ng KH CNL2"),
                    ("PhophongKhCnl2", "Ph√≥ ph√≤ng KH CNL2"),
                    ("TruongphongKtnqCnl2", "Tr∆∞·ªüng ph√≤ng K·∫ø to√°n & Ng√¢n qu·ªπ CNL2"),
                    ("PhophongKtnqCnl2", "Ph√≥ ph√≤ng K·∫ø to√°n & Ng√¢n qu·ªπ CNL2")
                };

                foreach (var (tableName, description) in roleTables)
                {
                    tables.Add(new KpiAssignmentTable
                    {
                        TableName = tableName,
                        Description = $"B·∫£ng KPI cho {description}",
                        Category = "CANBO",
                        TableType = KpiTableType.TruongphongKhdn, // Default, will be updated
                        IsActive = true,
                        CreatedDate = DateTime.UtcNow
                    });
                }

                // 9 branch tables (CHINHANH)
                var branchTables = new[]
                {
                    ("HoiSo", "H·ªôi s·ªü"),
                    ("CnBinhLu", "Chi nh√°nh B√¨nh L∆∞"),
                    ("CnPhongTho", "Chi nh√°nh Phong Th·ªï"),
                    ("CnSinHo", "Chi nh√°nh Sin H·ªì"),
                    ("CnBumTo", "Chi nh√°nh Bum T·ªü"),
                    ("CnThanUyen", "Chi nh√°nh Than Uy√™n"),
                    ("CnDoanKet", "Chi nh√°nh ƒêo√†n K·∫øt"),
                    ("CnTanUyen", "Chi nh√°nh T√¢n Uy√™n"),
                    ("CnNamHang", "Chi nh√°nh N·∫≠m H√†ng")
                };

                foreach (var (tableName, description) in branchTables)
                {
                    tables.Add(new KpiAssignmentTable
                    {
                        TableName = tableName,
                        Description = $"B·∫£ng KPI cho {description}",
                        Category = "CHINHANH",
                        TableType = KpiTableType.HoiSo, // Default, will be updated
                        IsActive = true,
                        CreatedDate = DateTime.UtcNow
                    });
                }

                // Add all tables
                _context.KpiAssignmentTables.AddRange(tables);
                await _context.SaveChangesAsync();

                // 3. Create indicators for each table
                var indicators = new List<KpiIndicator>();
                foreach (var table in tables)
                {
                    // Determine number of indicators based on category and specific roles
                    int indicatorCount = GetIndicatorCountForTable(table.TableName);

                    for (int i = 1; i <= indicatorCount; i++)
                    {
                        indicators.Add(new KpiIndicator
                        {
                            TableId = table.Id,
                            IndicatorName = GetIndicatorNameForTable(table.TableName, i),
                            MaxScore = 100, // ƒêi·ªÉm t·ªëi ƒëa m·∫∑c ƒë·ªãnh
                            Unit = "VND",
                            OrderIndex = i,
                            ValueType = KpiValueType.NUMBER,
                            IsActive = true
                        });
                    }
                }

                _context.KpiIndicators.AddRange(indicators);
                await _context.SaveChangesAsync();

                // 4. Get results
                var totalTables = await _context.KpiAssignmentTables.CountAsync();
                var totalIndicators = await _context.KpiIndicators.CountAsync();

                var summary = await _context.KpiAssignmentTables
                    .GroupBy(t => t.Category)
                    .Select(g => new
                    {
                        Category = g.Key,
                        Count = g.Count(),
                        TotalIndicators = _context.KpiIndicators.Count(i => g.Any(t => t.Id == i.TableId))
                    })
                    .ToListAsync();

                return Ok(new
                {
                    message = "T·∫°o c·∫•u tr√∫c KPI chu·∫©n th√†nh c√¥ng",
                    totalTables = totalTables,
                    totalIndicators = totalIndicators,
                    summary = summary,
                    structure = "23 vai tr√≤ CANBO + 9 chi nh√°nh CHINHANH",
                    timestamp = DateTime.UtcNow
                });

            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "‚ùå L·ªói khi t·∫°o c·∫•u tr√∫c KPI chu·∫©n");
                return StatusCode(500, new { message = "L·ªói khi t·∫°o c·∫•u tr√∫c KPI", error = ex.Message });
            }
        }

        private int GetIndicatorCountForTable(string tableName)
        {
            // Based on your requirements, specific indicator counts
            return tableName switch
            {
                "PhophongKhCnl2" => 11, // B·∫£ng c√≥ nhi·ªÅu ch·ªâ ti√™u nh·∫•t
                "CbItThKtgsKhqlrr" => 4, // B·∫£ng c√≥ √≠t ch·ªâ ti√™u nh·∫•t
                "TruongphongItThKtgs" => 5,
                var name when name.StartsWith("Truongphong") && (name.Contains("Khdn") || name.Contains("Khcn")) => 8,
                var name when name.StartsWith("Phophong") && (name.Contains("Khdn") || name.Contains("Khcn")) => 8,
                var name when name.StartsWith("Giamdoc") || name.StartsWith("Phogiamdoc") => 9,
                var name when name.StartsWith("Cn") || name == "HoiSo" => 11, // Chi nh√°nh gi·ªëng PhophongKhCnl2
                _ => 6 // Default for other roles
            };
        }

        private string GetIndicatorNameForTable(string tableName, int index)
        {
            var baseIndicators = new[]
            {
                "Doanh thu huy ƒë·ªông",
                "Doanh thu cho vay",
                "L√£i su√¥ng",
                "Huy ƒë·ªông v·ªën",
                "Cho vay kh√°ch h√†ng",
                "Qu·∫£n l√Ω n·ª£ x·∫•u",
                "Ph√°t tri·ªÉn kh√°ch h√†ng",
                "B√°n s·∫£n ph·∫©m d·ªãch v·ª•",
                "Hi·ªáu su·∫•t c√¥ng vi·ªác",
                "Ch·∫•t l∆∞·ª£ng d·ªãch v·ª•",
                "Tu√¢n th·ªß quy ƒë·ªãnh"
            };

            if (index <= baseIndicators.Length)
            {
                return baseIndicators[index - 1];
            }

            return $"Ch·ªâ ti√™u b·ªï sung {index - baseIndicators.Length}";
        }
    }
}
