using TinhKhoanApp.Api.Models.Common;
using Microsoft.AspNetCore.Mvc;
using TinhKhoanApp.Api.Models.NguonVon;
using TinhKhoanApp.Api.Services.Interfaces;
using System;
using System.Threading.Tasks;

namespace TinhKhoanApp.Api.Controllers
{
    /// <summary>
    /// Controller x·ª≠ l√Ω API t√≠nh to√°n ngu·ªìn v·ªën t·ª´ d·ªØ li·ªáu th√¥ DP01
    /// </summary>
    [ApiController]
    [Route("api/[controller]")]
    public class NguonVonController : ControllerBase
    {
        private readonly IRawDataService _rawDataService;
        private readonly ILogger<NguonVonController> _logger;

        public NguonVonController(
            IRawDataService rawDataService,
            ILogger<NguonVonController> logger)
        {
            _rawDataService = rawDataService;
            _logger = logger;
        }

        /// <summary>
        /// T√≠nh to√°n ngu·ªìn v·ªën t·ª´ b·∫£ng DP01 theo ƒë∆°n v·ªã v√† ng√†y
        /// </summary>
        /// <param name="request">Th√¥ng tin request: ƒë∆°n v·ªã, ng√†y, lo·∫°i ng√†y</param>
        /// <returns>K·∫øt qu·∫£ t√≠nh to√°n ngu·ªìn v·ªën</returns>
        [HttpPost("calculate")]
        public async Task<IActionResult> CalculateNguonVon([FromBody] NguonVonRequest request)
        {
            try
            {
                // Validate input
                if (request == null)
                {
                    return BadRequest(new { success = false, message = "Request kh√¥ng h·ª£p l·ªá" });
                }

                if (string.IsNullOrEmpty(request.UnitCode))
                {
                    return BadRequest(new { success = false, message = "M√£ ƒë∆°n v·ªã kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng" });
                }

                _logger.LogInformation("üîç API: B·∫Øt ƒë·∫ßu t√≠nh to√°n ngu·ªìn v·ªën cho ƒë∆°n v·ªã: {Unit}, ng√†y: {Date}, lo·∫°i: {Type}",
                    request.UnitCode, request.TargetDate.ToString("dd/MM/yyyy"), request.DateType);

                // T√≠nh to√°n ngu·ªìn v·ªën t·ª´ d·ªØ li·ªáu th√¥
                var result = await _rawDataService.CalculateNguonVonFromRawDataAsync(request);

                if (result == null || !result.HasData)
                {
                    _logger.LogWarning("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu cho ƒë∆°n v·ªã {Unit} ng√†y {Date}", request.UnitCode, request.TargetDate.ToString("dd/MM/yyyy"));

                    return NotFound(new
                    {
                        success = false,
                        message = result?.Message ?? "Ch∆∞a t√¨m th·∫•y d·ªØ li·ªáu theo ng√†y ch·ªâ ƒë·ªãnh",
                        requestedDate = request.TargetDate.ToString("dd/MM/yyyy"),
                        unitCode = request.UnitCode
                    });
                }

                _logger.LogInformation("‚úÖ T√≠nh to√°n th√†nh c√¥ng: {Balance:N0} VND cho {Unit}", result.Summary.TotalBalance, result.Summary.UnitCode);

                return Ok(new
                {
                    success = true,
                    data = new
                    {
                        unitCode = result.Summary.UnitCode,
                        unitName = GetUnitName(result.Summary.UnitCode),
                        totalBalance = result.Summary.TotalBalance,
                        recordCount = result.Summary.RecordCount,
                        calculatedDate = result.Summary.CalculatedDate,
                        topAccounts = result.TopAccounts.Take(10).ToList()
                    },
                    calculatedDate = request.TargetDate.ToString("dd/MM/yyyy"),
                    message = result.Message
                });
            }
            catch (ArgumentException ex)
            {
                _logger.LogError(ex, "‚ùå L·ªói tham s·ªë kh√¥ng h·ª£p l·ªá: {Message}", ex.Message);
                return BadRequest(new { success = false, message = ex.Message });
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "‚ùå L·ªói h·ªá th·ªëng khi t√≠nh to√°n ngu·ªìn v·ªën cho {Unit}", request?.UnitCode);
                return StatusCode(500, new
                {
                    success = false,
                    message = "L·ªói h·ªá th·ªëng, vui l√≤ng th·ª≠ l·∫°i sau",
                    error = ex.Message
                });
            }
        }

        /// <summary>
        /// L·∫•y chi ti·∫øt ngu·ªìn v·ªën theo ƒë∆°n v·ªã ƒë·ªÉ debug v√† ki·ªÉm tra
        /// </summary>
        /// <param name="unitCode">M√£ ƒë∆°n v·ªã</param>
        /// <param name="date">Ng√†y c·∫ßn ki·ªÉm tra</param>
        /// <returns>Chi ti·∫øt c√°c t√†i kho·∫£n c√≥ s·ªë d∆∞ l·ªõn nh·∫•t</returns>
        [HttpGet("details")]
        public async Task<IActionResult> GetNguonVonDetails(
            [FromQuery] string unitCode,
            [FromQuery] DateTime date)
        {
            try
            {
                if (string.IsNullOrEmpty(unitCode))
                {
                    return BadRequest(new { success = false, message = "M√£ ƒë∆°n v·ªã kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng" });
                }

                _logger.LogInformation("üîç API: L·∫•y chi ti·∫øt ngu·ªìn v·ªën cho {Unit} ng√†y {Date}", unitCode, date.ToString("dd/MM/yyyy"));

                var details = await _rawDataService.CalculateNguonVonFromRawDataAsync(new NguonVonRequest
                {
                    UnitCode = unitCode,
                    TargetDate = date,
                    DateType = "day"
                });

                return Ok(new
                {
                    success = true,
                    data = details,
                    message = details.HasData ? "L·∫•y chi ti·∫øt th√†nh c√¥ng" : "Kh√¥ng c√≥ d·ªØ li·ªáu"
                });
            }
            catch (ArgumentException ex)
            {
                _logger.LogError(ex, "‚ùå L·ªói tham s·ªë kh√¥ng h·ª£p l·ªá: {Message}", ex.Message);
                return BadRequest(new { success = false, message = ex.Message });
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "‚ùå L·ªói khi l·∫•y chi ti·∫øt ngu·ªìn v·ªën cho {Unit}", unitCode);
                return StatusCode(500, new
                {
                    success = false,
                    message = "L·ªói h·ªá th·ªëng, vui l√≤ng th·ª≠ l·∫°i sau",
                    error = ex.Message
                });
            }
        }

        /// <summary>
        /// L·∫•y danh s√°ch ƒë∆°n v·ªã c√≥ th·ªÉ t√≠nh to√°n
        /// </summary>
        /// <returns>Danh s√°ch c√°c ƒë∆°n v·ªã (chi nh√°nh + PGD)</returns>
        [HttpGet("units")]
        public IActionResult GetAvailableUnits()
        {
            try
            {
                var units = new
                {
                    branches = new[]
                    {
                        new { code = "HoiSo", name = "H·ªôi s·ªü", maCN = "7800" },
                        new { code = "CnBinhLu", name = "Chi nh√°nh B√¨nh L∆∞", maCN = "7801" },
                        new { code = "CnPhongTho", name = "Chi nh√°nh Phong Th·ªï", maCN = "7802" },
                        new { code = "CnSinHo", name = "Chi nh√°nh S√¨n H·ªì", maCN = "7803" },
                        new { code = "CnBumTo", name = "Chi nh√°nh Bum T·ªü", maCN = "7804" },
                        new { code = "CnThanUyen", name = "Chi nh√°nh Than Uy√™n", maCN = "7805" },
                        new { code = "CnDoanKet", name = "Chi nh√°nh ƒêo√†n K·∫øt", maCN = "7806" },
                        new { code = "CnTanUyen", name = "Chi nh√°nh T√¢n Uy√™n", maCN = "7807" },
                        new { code = "CnNamHang", name = "Chi nh√°nh N·∫≠m H√†ng", maCN = "7808" }
                    },
                    pgds = new[]
                    {
                        new { code = "CnPhongThoPgdSo5", name = "CN Phong Th·ªï - PGD S·ªë 5", maCN = "7802", maPGD = "01" },
                        new { code = "CnThanUyenPgdSo6", name = "CN Than Uy√™n - PGD S·ªë 6", maCN = "7805", maPGD = "01" },
                        new { code = "CnDoanKetPgdSo1", name = "CN ƒêo√†n K·∫øt - PGD S·ªë 1", maCN = "7806", maPGD = "01" },
                        new { code = "CnDoanKetPgdSo2", name = "CN ƒêo√†n K·∫øt - PGD S·ªë 2", maCN = "7806", maPGD = "02" },
                        new { code = "CnTanUyenPgdSo3", name = "CN T√¢n Uy√™n - PGD S·ªë 3", maCN = "7807", maPGD = "01" }
                    },
                    all = new { code = "ALL", name = "T·∫•t c·∫£ ƒë∆°n v·ªã (To√†n t·ªânh)" }
                };

                return Ok(new
                {
                    success = true,
                    data = units,
                    message = "L·∫•y danh s√°ch ƒë∆°n v·ªã th√†nh c√¥ng"
                });
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "‚ùå L·ªói khi l·∫•y danh s√°ch ƒë∆°n v·ªã");
                return StatusCode(500, new
                {
                    success = false,
                    message = "L·ªói h·ªá th·ªëng",
                    error = ex.Message
                });
            }
        }

        /// <summary>
        /// Mapping t·ª´ m√£ ƒë∆°n v·ªã sang t√™n ƒë∆°n v·ªã
        /// </summary>
        /// <param name="unitCode">M√£ ƒë∆°n v·ªã</param>
        /// <returns>T√™n ƒë∆°n v·ªã</returns>
        private static string GetUnitName(string unitCode)
        {
            var mapping = new Dictionary<string, string>
            {
                { "7800", "üè¢ H·ªôi s·ªü" },
                { "7801", "üè¶ Chi nh√°nh B√¨nh L∆∞" },
                { "7802", "üè¶ Chi nh√°nh Phong Th·ªï" },
                { "7803", "üè¶ Chi nh√°nh S√¨n H·ªì" },
                { "7804", "üè¶ Chi nh√°nh Bum T·ªü" },
                { "7805", "üè¶ Chi nh√°nh Than Uy√™n" },
                { "7806", "üè¶ Chi nh√°nh ƒêo√†n K·∫øt" },
                { "7807", "üè¶ Chi nh√°nh T√¢n Uy√™n" },
                { "7808", "üè¶ Chi nh√°nh N·∫≠m H√†ng" },
                { "ALL", "üèõÔ∏è To√†n t·ªânh (T·ªïng h·ª£p)" },
                { "", "üèõÔ∏è To√†n t·ªânh (T·ªïng h·ª£p)" }
            };

            return mapping.ContainsKey(unitCode) ? mapping[unitCode] : unitCode;
        }
    }
}
