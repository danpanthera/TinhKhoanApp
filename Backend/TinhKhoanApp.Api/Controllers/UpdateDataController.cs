using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using TinhKhoanApp.Api.Data;

namespace TinhKhoanApp.Api.Controllers
{
    [ApiController]
    [Route("api/[controller]")]
    public class UpdateDataController : ControllerBase
    {
        private readonly ApplicationDbContext _context;
        private readonly ILogger<UpdateDataController> _logger;

        public UpdateDataController(ApplicationDbContext context, ILogger<UpdateDataController> logger)
        {
            _context = context;
            _logger = logger;
        }

        /// <summary>
        /// C·∫≠p nh·∫≠t t√™n chi nh√°nh trong database theo mapping m·ªõi
        /// </summary>
        [HttpPost("update-branch-names")]
        public async Task<ActionResult> UpdateBranchNames()
        {
            try
            {
                _logger.LogInformation("üîÑ B·∫Øt ƒë·∫ßu c·∫≠p nh·∫≠t t√™n chi nh√°nh trong database");

                // Mapping t√™n m·ªõi
                var branchNameMapping = new Dictionary<string, string>
                {
                    { "Chi nh√°nh Tam ƒê∆∞·ªùng", "Chi nh√°nh B√¨nh L∆∞" },
                    { "Chi nh√°nh M∆∞·ªùng T√®", "Chi nh√°nh Bum T·ªü" },
                    { "Chi nh√°nh Th√†nh Ph·ªë", "Chi nh√°nh ƒêo√†n K·∫øt" },
                    { "Chi nh√°nh Th√†nh ph·ªë", "Chi nh√°nh ƒêo√†n K·∫øt" }, // Variant
                    { "Chi nh√°nh N·∫≠m Nh√πn", "Chi nh√°nh N·∫≠m H√†ng" }
                };

                // Mapping cho PGD v√† code units
                var unitCodeMapping = new Dictionary<string, string>
                {
                    { "PgdMuongSo", "CnPhongThoPgdSo5" }, // Ph√≤ng giao d·ªãch M∆∞·ªùng So ‚Üí PGD S·ªë 5
                    { "PgdMuongThan", "CnThanUyenPgdSo6" }, // Ph√≤ng giao d·ªãch M∆∞·ªùng Than ‚Üí PGD S·ªë 6
                    { "PgdSo1", "CnDoanKetPgdSo1" }, // PGD s·ªë 1 ‚Üí c√≥ m√£ CnDoanKetPgdSo1
                    { "PgdSo2", "CnDoanKetPgdSo2" } // PGD s·ªë 2 ‚Üí c√≥ m√£ CnDoanKetPgdSo2
                };

                var unitNameMapping = new Dictionary<string, string>
                {
                    { "Ph√≤ng giao d·ªãch M∆∞·ªùng So", "PGD S·ªë 5" },
                    { "Ph√≤ng giao d·ªãch M∆∞·ªùng Than", "PGD S·ªë 6" }
                };

                int updatedUnits = 0;
                int updatedKpiTables = 0;
                int updatedUnitCodes = 0;

                // 1. C·∫≠p nh·∫≠t b·∫£ng Units - t√™n chi nh√°nh
                foreach (var mapping in branchNameMapping)
                {
                    var units = await _context.Units
                        .Where(u => u.Name == mapping.Key)
                        .ToListAsync();

                    foreach (var unit in units)
                    {
                        unit.Name = mapping.Value;
                        updatedUnits++;
                        _logger.LogInformation("‚úÖ Updated Unit Name: {OldName} ‚Üí {NewName}", mapping.Key, mapping.Value);
                    }
                }

                // 1.1 C·∫≠p nh·∫≠t Unit Codes cho PGD
                foreach (var mapping in unitCodeMapping)
                {
                    var units = await _context.Units
                        .Where(u => u.Code == mapping.Key)
                        .ToListAsync();

                    foreach (var unit in units)
                    {
                        unit.Code = mapping.Value;
                        updatedUnitCodes++;
                        _logger.LogInformation("‚úÖ Updated Unit Code: {OldCode} ‚Üí {NewCode}", mapping.Key, mapping.Value);
                    }
                }

                // 1.2 C·∫≠p nh·∫≠t Unit Names cho PGD
                foreach (var mapping in unitNameMapping)
                {
                    var units = await _context.Units
                        .Where(u => u.Name == mapping.Key)
                        .ToListAsync();

                    foreach (var unit in units)
                    {
                        unit.Name = mapping.Value;
                        updatedUnits++;
                        _logger.LogInformation("‚úÖ Updated Unit Name: {OldName} ‚Üí {NewName}", mapping.Key, mapping.Value);
                    }
                }

                // 1.3 C·∫≠p nh·∫≠t tr·ª±c ti·∫øp PGD b·∫±ng ID (fallback n·∫øu name matching kh√¥ng work)
                try
                {
                    var pgdMuongSo = await _context.Units.FindAsync(20); // ID 20 = Ph√≤ng giao d·ªãch M∆∞·ªùng So
                    if (pgdMuongSo != null && pgdMuongSo.Name.Contains("M∆∞·ªùng So"))
                    {
                        pgdMuongSo.Name = "PGD S·ªë 5";
                        updatedUnits++;
                        _logger.LogInformation("‚úÖ Direct update ID 20: Ph√≤ng giao d·ªãch M∆∞·ªùng So ‚Üí PGD S·ªë 5");
                    }

                    var pgdMuongThan = await _context.Units.FindAsync(27); // ID 27 = Ph√≤ng giao d·ªãch M∆∞·ªùng Than
                    if (pgdMuongThan != null && pgdMuongThan.Name.Contains("M∆∞·ªùng Than"))
                    {
                        pgdMuongThan.Name = "PGD S·ªë 6";
                        updatedUnits++;
                        _logger.LogInformation("‚úÖ Direct update ID 27: Ph√≤ng giao d·ªãch M∆∞·ªùng Than ‚Üí PGD S·ªë 6");
                    }
                }
                catch (Exception ex)
                {
                    _logger.LogWarning(ex, "‚ö†Ô∏è Kh√¥ng th·ªÉ update tr·ª±c ti·∫øp PGD");
                }

                // 2. C·∫≠p nh·∫≠t b·∫£ng KpiAssignmentTables
                foreach (var mapping in branchNameMapping)
                {
                    var kpiTables = await _context.KpiAssignmentTables
                        .Where(k => k.TableName == mapping.Key)
                        .ToListAsync();

                    foreach (var kpiTable in kpiTables)
                    {
                        kpiTable.TableName = mapping.Value;
                        updatedKpiTables++;
                        _logger.LogInformation("‚úÖ Updated KpiAssignmentTable: {OldName} ‚Üí {NewName}", mapping.Key, mapping.Value);
                    }
                }

                // 3. C·∫≠p nh·∫≠t ƒë∆°n v·ªã "T·ª∑ VND" ‚Üí "Tri·ªáu VND" trong KPI definitions n·∫øu c√≥
                var kpiDefinitionsWithTyVnd = await _context.KPIDefinitions
                    .Where(k => k.UnitOfMeasure != null && (k.UnitOfMeasure.Contains("T·ª∑ VND") || k.UnitOfMeasure.Contains("t·ª∑ VND")))
                    .ToListAsync();

                int updatedKpiDefinitions = 0;
                foreach (var kpi in kpiDefinitionsWithTyVnd)
                {
                    var oldUnit = kpi.UnitOfMeasure;
                    kpi.UnitOfMeasure = kpi.UnitOfMeasure?.Replace("T·ª∑ VND", "Tri·ªáu VND").Replace("t·ª∑ VND", "Tri·ªáu VND");
                    updatedKpiDefinitions++;
                    _logger.LogInformation("‚úÖ Updated KpiDefinition Unit: {OldUnit} ‚Üí {NewUnit}", oldUnit, kpi.UnitOfMeasure);
                }

                // L∆∞u thay ƒë·ªïi
                var saveResult = await _context.SaveChangesAsync();

                return Ok(new
                {
                    success = true,
                    message = "C·∫≠p nh·∫≠t t√™n chi nh√°nh v√† ƒë∆°n v·ªã t√≠nh th√†nh c√¥ng",
                    summary = new
                    {
                        updatedUnits = updatedUnits,
                        updatedUnitCodes = updatedUnitCodes,
                        updatedKpiTables = updatedKpiTables,
                        updatedKpiDefinitions = updatedKpiDefinitions,
                        totalChanges = saveResult
                    },
                    mappings = new { branchNameMapping, unitCodeMapping, unitNameMapping }
                });
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "‚ùå L·ªói c·∫≠p nh·∫≠t t√™n chi nh√°nh");
                return BadRequest(new { success = false, error = ex.Message });
            }
        }

        /// <summary>
        /// Ki·ªÉm tra t√™n chi nh√°nh hi·ªán t·∫°i trong database
        /// </summary>
        [HttpGet("check-branch-names")]
        public async Task<ActionResult> CheckBranchNames()
        {
            try
            {
                var units = await _context.Units
                    .Where(u => u.Type == "CNL2")
                    .Select(u => new { u.Code, u.Name, u.Type })
                    .ToListAsync();

                var kpiTables = await _context.KpiAssignmentTables
                    .Where(k => k.TableName.Contains("Chi nh√°nh"))
                    .Select(k => new { k.TableType, k.TableName })
                    .ToListAsync();

                var kpiDefinitionsUnits = await _context.KPIDefinitions
                    .Where(k => k.UnitOfMeasure != null && k.UnitOfMeasure.Contains("VND"))
                    .Select(k => new { k.KpiName, k.UnitOfMeasure })
                    .ToListAsync();

                return Ok(new
                {
                    success = true,
                    units = units,
                    kpiTables = kpiTables,
                    kpiDefinitionsWithVnd = kpiDefinitionsUnits
                });
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "‚ùå L·ªói ki·ªÉm tra t√™n chi nh√°nh");
                return BadRequest(new { success = false, error = ex.Message });
            }
        }

        /// <summary>
        /// C·∫≠p nh·∫≠t t√™n PGD c·ª• th·ªÉ theo y√™u c·∫ßu m·ªõi
        /// </summary>
        [HttpPost("update-pgd-names")]
        public async Task<ActionResult> UpdatePgdNames()
        {
            try
            {
                _logger.LogInformation("üîÑ B·∫Øt ƒë·∫ßu c·∫≠p nh·∫≠t t√™n PGD trong database");

                int updatedCount = 0;

                // C·∫≠p nh·∫≠t Ph√≤ng giao d·ªãch M∆∞·ªùng So ‚Üí PGD S·ªë 5
                var pgdMuongSo = await _context.Units
                    .Where(u => u.Name == "Ph√≤ng giao d·ªãch M∆∞·ªùng So")
                    .ToListAsync();

                foreach (var unit in pgdMuongSo)
                {
                    unit.Name = "PGD S·ªë 5";
                    updatedCount++;
                    _logger.LogInformation("‚úÖ Updated: {OldName} ‚Üí {NewName}", "Ph√≤ng giao d·ªãch M∆∞·ªùng So", "PGD S·ªë 5");
                }

                // C·∫≠p nh·∫≠t Ph√≤ng giao d·ªãch M∆∞·ªùng Than ‚Üí PGD S·ªë 6
                var pgdMuongThan = await _context.Units
                    .Where(u => u.Name == "Ph√≤ng giao d·ªãch M∆∞·ªùng Than")
                    .ToListAsync();

                foreach (var unit in pgdMuongThan)
                {
                    unit.Name = "PGD S·ªë 6";
                    updatedCount++;
                    _logger.LogInformation("‚úÖ Updated: {OldName} ‚Üí {NewName}", "Ph√≤ng giao d·ªãch M∆∞·ªùng Than", "PGD S·ªë 6");
                }

                // L∆∞u thay ƒë·ªïi
                var saveResult = await _context.SaveChangesAsync();

                return Ok(new
                {
                    success = true,
                    message = "C·∫≠p nh·∫≠t t√™n PGD th√†nh c√¥ng",
                    summary = new
                    {
                        updatedUnits = updatedCount,
                        totalChanges = saveResult
                    }
                });
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "‚ùå L·ªói c·∫≠p nh·∫≠t t√™n PGD");
                return BadRequest(new { success = false, error = ex.Message });
            }
        }

        /// <summary>
        /// C·∫≠p nh·∫≠t to√†n di·ªán ƒë∆°n v·ªã t√≠nh t·ª´ "T·ª∑ VND" th√†nh "Tri·ªáu VND" trong t·∫•t c·∫£ b·∫£ng li√™n quan
        /// </summary>
        [HttpPost("update-unit-from-ty-to-trieu")]
        public async Task<ActionResult> UpdateUnitFromTyToTrieu()
        {
            try
            {
                _logger.LogInformation("üîÑ B·∫Øt ƒë·∫ßu c·∫≠p nh·∫≠t ƒë∆°n v·ªã t√≠nh t·ª´ 'T·ª∑ VND' th√†nh 'Tri·ªáu VND' trong to√†n b·ªô h·ªá th·ªëng");

                var result = new
                {
                    kpiDefinitions = 0,
                    kpiIndicators = 0,
                    dashboardIndicators = 0,
                    businessPlanTargets = 0,
                    employeeKpiTargets = 0,
                    unitKhoanAssignmentDetails = 0,
                    employeeKhoanAssignmentDetails = 0,
                    kpiScoringRules = 0,
                    salaryParameters = 0
                };

                // 1. C·∫≠p nh·∫≠t KPIDefinitions
                var kpiDefinitionsWithTy = await _context.KPIDefinitions
                    .Where(k => k.UnitOfMeasure != null &&
                               (k.UnitOfMeasure.Contains("T·ª∑ VND") ||
                                k.UnitOfMeasure.Contains("t·ª∑ VND") ||
                                k.UnitOfMeasure.Contains("T·ª∂ VND")))
                    .ToListAsync();

                foreach (var kpi in kpiDefinitionsWithTy)
                {
                    var oldUnit = kpi.UnitOfMeasure;
                    kpi.UnitOfMeasure = kpi.UnitOfMeasure?
                        .Replace("T·ª∑ VND", "Tri·ªáu VND")
                        .Replace("t·ª∑ VND", "Tri·ªáu VND")
                        .Replace("T·ª∂ VND", "Tri·ªáu VND");
                    result = result with { kpiDefinitions = result.kpiDefinitions + 1 };
                    _logger.LogInformation("‚úÖ KPIDefinitions: {OldUnit} ‚Üí {NewUnit}", oldUnit, kpi.UnitOfMeasure);
                }

                // 2. C·∫≠p nh·∫≠t KpiIndicators
                var kpiIndicatorsWithTy = await _context.KpiIndicators
                    .Where(k => k.Unit != null &&
                               (k.Unit.Contains("T·ª∑ VND") ||
                                k.Unit.Contains("t·ª∑ VND") ||
                                k.Unit.Contains("T·ª∂ VND")))
                    .ToListAsync();

                foreach (var indicator in kpiIndicatorsWithTy)
                {
                    var oldUnit = indicator.Unit;
                    indicator.Unit = indicator.Unit
                        .Replace("T·ª∑ VND", "Tri·ªáu VND")
                        .Replace("t·ª∑ VND", "Tri·ªáu VND")
                        .Replace("T·ª∂ VND", "Tri·ªáu VND");
                    result = result with { kpiIndicators = result.kpiIndicators + 1 };
                    _logger.LogInformation("‚úÖ KpiIndicators: {OldUnit} ‚Üí {NewUnit}", oldUnit, indicator.Unit);
                }

                // 3. C·∫≠p nh·∫≠t DashboardIndicators
                var dashboardIndicatorsWithTy = await _context.DashboardIndicators
                    .Where(d => d.Unit != null &&
                               (d.Unit.Contains("T·ª∑ VND") ||
                                d.Unit.Contains("t·ª∑ VND") ||
                                d.Unit.Contains("T·ª∂ VND")))
                    .ToListAsync();

                foreach (var dashboard in dashboardIndicatorsWithTy)
                {
                    var oldUnit = dashboard.Unit;
                    dashboard.Unit = dashboard.Unit?
                        .Replace("T·ª∑ VND", "Tri·ªáu VND")
                        .Replace("t·ª∑ VND", "Tri·ªáu VND")
                        .Replace("T·ª∂ VND", "Tri·ªáu VND");
                    result = result with { dashboardIndicators = result.dashboardIndicators + 1 };
                    _logger.LogInformation("‚úÖ DashboardIndicators: {OldUnit} ‚Üí {NewUnit}", oldUnit, dashboard.Unit);
                }

                // 4. C·∫≠p nh·∫≠t BusinessPlanTargets notes n·∫øu c√≥ ch·ª©a ƒë∆°n v·ªã
                var businessPlanTargetsWithTy = await _context.BusinessPlanTargets
                    .Where(b => b.Notes != null &&
                               (b.Notes.Contains("T·ª∑ VND") ||
                                b.Notes.Contains("t·ª∑ VND") ||
                                b.Notes.Contains("T·ª∂ VND")))
                    .ToListAsync();

                foreach (var target in businessPlanTargetsWithTy)
                {
                    var oldNotes = target.Notes;
                    target.Notes = target.Notes?
                        .Replace("T·ª∑ VND", "Tri·ªáu VND")
                        .Replace("t·ª∑ VND", "Tri·ªáu VND")
                        .Replace("T·ª∂ VND", "Tri·ªáu VND");
                    result = result with { businessPlanTargets = result.businessPlanTargets + 1 };
                    _logger.LogInformation("‚úÖ BusinessPlanTargets Notes: {OldNotes} ‚Üí {NewNotes}", oldNotes, target.Notes);
                }

                // 5. C·∫≠p nh·∫≠t EmployeeKpiTargets notes
                var employeeKpiTargetsWithTy = await _context.EmployeeKpiTargets
                    .Where(e => e.Notes != null &&
                               (e.Notes.Contains("T·ª∑ VND") ||
                                e.Notes.Contains("t·ª∑ VND") ||
                                e.Notes.Contains("T·ª∂ VND")))
                    .ToListAsync();

                foreach (var empTarget in employeeKpiTargetsWithTy)
                {
                    var oldNotes = empTarget.Notes;
                    empTarget.Notes = empTarget.Notes?
                        .Replace("T·ª∑ VND", "Tri·ªáu VND")
                        .Replace("t·ª∑ VND", "Tri·ªáu VND")
                        .Replace("T·ª∂ VND", "Tri·ªáu VND");
                    result = result with { employeeKpiTargets = result.employeeKpiTargets + 1 };
                    _logger.LogInformation("‚úÖ EmployeeKpiTargets Notes: {OldNotes} ‚Üí {NewNotes}", oldNotes, empTarget.Notes);
                }

                // 6. C·∫≠p nh·∫≠t UnitKhoanAssignmentDetails
                var unitKhoanDetailsWithTy = await _context.UnitKhoanAssignmentDetails
                    .Where(u => u.Note != null &&
                               (u.Note.Contains("T·ª∑ VND") ||
                                u.Note.Contains("t·ª∑ VND") ||
                                u.Note.Contains("T·ª∂ VND")))
                    .ToListAsync();

                foreach (var unitDetail in unitKhoanDetailsWithTy)
                {
                    var oldNote = unitDetail.Note;
                    unitDetail.Note = unitDetail.Note?
                        .Replace("T·ª∑ VND", "Tri·ªáu VND")
                        .Replace("t·ª∑ VND", "Tri·ªáu VND")
                        .Replace("T·ª∂ VND", "Tri·ªáu VND");
                    result = result with { unitKhoanAssignmentDetails = result.unitKhoanAssignmentDetails + 1 };
                    _logger.LogInformation("‚úÖ UnitKhoanAssignmentDetails Note: {OldNote} ‚Üí {NewNote}", oldNote, unitDetail.Note);
                }

                // 7. C·∫≠p nh·∫≠t EmployeeKhoanAssignmentDetails
                var empKhoanDetailsWithTy = await _context.EmployeeKhoanAssignmentDetails
                    .Where(e => e.Note != null &&
                               (e.Note.Contains("T·ª∑ VND") ||
                                e.Note.Contains("t·ª∑ VND") ||
                                e.Note.Contains("T·ª∂ VND")))
                    .ToListAsync();

                foreach (var empDetail in empKhoanDetailsWithTy)
                {
                    var oldNote = empDetail.Note;
                    empDetail.Note = empDetail.Note?
                        .Replace("T·ª∑ VND", "Tri·ªáu VND")
                        .Replace("t·ª∑ VND", "Tri·ªáu VND")
                        .Replace("T·ª∂ VND", "Tri·ªáu VND");
                    result = result with { employeeKhoanAssignmentDetails = result.employeeKhoanAssignmentDetails + 1 };
                    _logger.LogInformation("‚úÖ EmployeeKhoanAssignmentDetails Note: {OldNote} ‚Üí {NewNote}", oldNote, empDetail.Note);
                }

                // 8. C·∫≠p nh·∫≠t KpiScoringRules
                var kpiScoringRulesWithTy = await _context.KpiScoringRules
                    .Where(k => k.ScoreFormula != null &&
                               (k.ScoreFormula.Contains("T·ª∑ VND") ||
                                k.ScoreFormula.Contains("t·ª∑ VND") ||
                                k.ScoreFormula.Contains("T·ª∂ VND")))
                    .ToListAsync();

                foreach (var rule in kpiScoringRulesWithTy)
                {
                    var oldFormula = rule.ScoreFormula;
                    rule.ScoreFormula = rule.ScoreFormula?
                        .Replace("T·ª∑ VND", "Tri·ªáu VND")
                        .Replace("t·ª∑ VND", "Tri·ªáu VND")
                        .Replace("T·ª∂ VND", "Tri·ªáu VND");
                    result = result with { kpiScoringRules = result.kpiScoringRules + 1 };
                    _logger.LogInformation("‚úÖ KpiScoringRules Formula: {OldFormula} ‚Üí {NewFormula}", oldFormula, rule.ScoreFormula);
                }

                // 9. C·∫≠p nh·∫≠t SalaryParameters
                var salaryParamsWithTy = await _context.SalaryParameters
                    .Where(s => s.Note != null &&
                               (s.Note.Contains("T·ª∑ VND") ||
                                s.Note.Contains("t·ª∑ VND") ||
                                s.Note.Contains("T·ª∂ VND")))
                    .ToListAsync();

                foreach (var param in salaryParamsWithTy)
                {
                    var oldNote = param.Note;
                    param.Note = param.Note?
                        .Replace("T·ª∑ VND", "Tri·ªáu VND")
                        .Replace("t·ª∑ VND", "Tri·ªáu VND")
                        .Replace("T·ª∂ VND", "Tri·ªáu VND");
                    result = result with { salaryParameters = result.salaryParameters + 1 };
                    _logger.LogInformation("‚úÖ SalaryParameters Note: {OldNote} ‚Üí {NewNote}", oldNote, param.Note);
                }

                // L∆∞u thay ƒë·ªïi
                var saveResult = await _context.SaveChangesAsync();

                var totalUpdated = result.kpiDefinitions + result.kpiIndicators + result.dashboardIndicators +
                                  result.businessPlanTargets + result.employeeKpiTargets + result.unitKhoanAssignmentDetails +
                                  result.employeeKhoanAssignmentDetails + result.kpiScoringRules + result.salaryParameters;

                return Ok(new
                {
                    success = true,
                    message = $"C·∫≠p nh·∫≠t ƒë∆°n v·ªã t√≠nh t·ª´ 'T·ª∑ VND' th√†nh 'Tri·ªáu VND' th√†nh c√¥ng",
                    summary = new
                    {
                        totalUpdatedRecords = totalUpdated,
                        databaseChanges = saveResult,
                        details = result
                    }
                });
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "‚ùå L·ªói c·∫≠p nh·∫≠t ƒë∆°n v·ªã t√≠nh t·ª´ T·ª∑ VND th√†nh Tri·ªáu VND");
                return BadRequest(new { success = false, error = ex.Message });
            }
        }

        /// <summary>
        /// Ki·ªÉm tra to√†n b·ªô h·ªá th·ªëng ƒë·ªÉ t√¨m c√°c tr∆∞·ªùng ch·ª©a "T·ª∑ VND"
        /// </summary>
        [HttpGet("check-ty-vnd-usage")]
        public async Task<ActionResult> CheckTyVndUsage()
        {
            try
            {
                var result = new
                {
                    kpiDefinitions = await _context.KPIDefinitions
                        .Where(k => k.UnitOfMeasure != null &&
                                   (k.UnitOfMeasure.Contains("T·ª∑ VND") ||
                                    k.UnitOfMeasure.Contains("t·ª∑ VND") ||
                                    k.UnitOfMeasure.Contains("T·ª∂ VND")))
                        .Select(k => new { k.Id, k.KpiName, k.UnitOfMeasure })
                        .ToListAsync(),

                    kpiIndicators = await _context.KpiIndicators
                        .Where(k => k.Unit != null &&
                                   (k.Unit.Contains("T·ª∑ VND") ||
                                    k.Unit.Contains("t·ª∑ VND") ||
                                    k.Unit.Contains("T·ª∂ VND")))
                        .Select(k => new { k.Id, k.IndicatorName, k.Unit })
                        .ToListAsync(),

                    dashboardIndicators = await _context.DashboardIndicators
                        .Where(d => d.Unit != null &&
                                   (d.Unit.Contains("T·ª∑ VND") ||
                                    d.Unit.Contains("t·ª∑ VND") ||
                                    d.Unit.Contains("T·ª∂ VND")))
                        .Select(d => new { d.Id, d.Name, d.Unit })
                        .ToListAsync(),

                    businessPlanTargets = await _context.BusinessPlanTargets
                        .Where(b => b.Notes != null &&
                                   (b.Notes.Contains("T·ª∑ VND") ||
                                    b.Notes.Contains("t·ª∑ VND") ||
                                    b.Notes.Contains("T·ª∂ VND")))
                        .Select(b => new { b.Id, b.Notes })
                        .ToListAsync(),

                    employeeKpiTargets = await _context.EmployeeKpiTargets
                        .Where(e => e.Notes != null &&
                                   (e.Notes.Contains("T·ª∑ VND") ||
                                    e.Notes.Contains("t·ª∑ VND") ||
                                    e.Notes.Contains("T·ª∂ VND")))
                        .Select(e => new { e.Id, e.Notes })
                        .ToListAsync(),

                    unitKhoanAssignmentDetails = await _context.UnitKhoanAssignmentDetails
                        .Where(u => u.Note != null &&
                                   (u.Note.Contains("T·ª∑ VND") ||
                                    u.Note.Contains("t·ª∑ VND") ||
                                    u.Note.Contains("T·ª∂ VND")))
                        .Select(u => new { u.Id, u.Note })
                        .ToListAsync(),

                    employeeKhoanAssignmentDetails = await _context.EmployeeKhoanAssignmentDetails
                        .Where(e => e.Note != null &&
                                   (e.Note.Contains("T·ª∑ VND") ||
                                    e.Note.Contains("t·ª∑ VND") ||
                                    e.Note.Contains("T·ª∂ VND")))
                        .Select(e => new { e.Id, e.Note })
                        .ToListAsync(),

                    kpiScoringRules = await _context.KpiScoringRules
                        .Where(k => k.ScoreFormula != null &&
                                   (k.ScoreFormula.Contains("T·ª∑ VND") ||
                                    k.ScoreFormula.Contains("t·ª∑ VND") ||
                                    k.ScoreFormula.Contains("T·ª∂ VND")))
                        .Select(k => new { k.Id, k.KpiIndicatorName, k.ScoreFormula })
                        .ToListAsync(),

                    salaryParameters = await _context.SalaryParameters
                        .Where(s => s.Note != null &&
                                   (s.Note.Contains("T·ª∑ VND") ||
                                    s.Note.Contains("t·ª∑ VND") ||
                                    s.Note.Contains("T·ª∂ VND")))
                        .Select(s => new { s.Id, s.Name, s.Note })
                        .ToListAsync()
                };

                var totalCount = result.kpiDefinitions.Count + result.kpiIndicators.Count +
                               result.dashboardIndicators.Count + result.businessPlanTargets.Count +
                               result.employeeKpiTargets.Count + result.unitKhoanAssignmentDetails.Count +
                               result.employeeKhoanAssignmentDetails.Count + result.kpiScoringRules.Count +
                               result.salaryParameters.Count;

                return Ok(new
                {
                    success = true,
                    message = $"T√¨m th·∫•y {totalCount} b·∫£n ghi c√≥ ch·ª©a 'T·ª∑ VND'",
                    data = result
                });
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "‚ùå L·ªói ki·ªÉm tra usage c·ªßa T·ª∑ VND");
                return BadRequest(new { success = false, error = ex.Message });
            }
        }
    }
}
