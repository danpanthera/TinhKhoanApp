using Microsoft.AspNetCore.Mvc;
using System.Text.Json;

namespace TinhKhoanApp.Api.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class TestImportController : ControllerBase
    {
        private readonly ILogger<TestImportController> _logger;

        public TestImportController(ILogger<TestImportController> logger)
        {
            _logger = logger;
        }

        // üß™ TEST: Import file kh√¥ng c·∫ßn database
        [HttpPost("simple")]
        public async Task<IActionResult> SimpleImport([FromForm] IFormFileCollection files)
        {
            try
            {
                if (files == null || files.Count == 0)
                {
                    return BadRequest(new { message = "Kh√¥ng c√≥ file n√†o ƒë∆∞·ª£c ch·ªçn" });
                }

                var results = new List<object>();

                foreach (var file in files)
                {
                    _logger.LogInformation($"Processing file: {file.FileName}, Size: {file.Length} bytes");

                    // ƒê·ªçc n·ªôi dung file
                    using var reader = new StreamReader(file.OpenReadStream());
                    var content = await reader.ReadToEndAsync();
                    
                    // Parse CSV ƒë∆°n gi·∫£n
                    var lines = content.Split('\n', StringSplitOptions.RemoveEmptyEntries);
                    var recordCount = Math.Max(0, lines.Length - 1); // Tr·ª´ header

                    results.Add(new
                    {
                        fileName = file.FileName,
                        size = file.Length,
                        contentType = file.ContentType,
                        linesProcessed = lines.Length,
                        recordCount = recordCount,
                        success = true,
                        message = $"‚úÖ ƒê√£ x·ª≠ l√Ω {recordCount} records t·ª´ file {file.FileName}",
                        preview = lines.Take(3).ToArray() // 3 d√≤ng ƒë·∫ßu
                    });
                }

                return Ok(new
                {
                    message = $"‚úÖ Test import th√†nh c√¥ng {results.Count} file(s)",
                    results = results,
                    timestamp = DateTime.UtcNow
                });
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "L·ªói test import");
                return StatusCode(500, new { 
                    message = "‚ùå L·ªói test import", 
                    error = ex.Message,
                    timestamp = DateTime.UtcNow
                });
            }
        }

        // üóÇÔ∏è TEST: X·ª≠ l√Ω file n√©n ƒë∆°n gi·∫£n
        [HttpPost("archive")]
        public async Task<IActionResult> ArchiveImport([FromForm] IFormFileCollection files, [FromForm] string? password)
        {
            try
            {
                if (files == null || files.Count == 0)
                {
                    return BadRequest(new { message = "Kh√¥ng c√≥ file n√†o ƒë∆∞·ª£c ch·ªçn" });
                }

                var results = new List<object>();

                foreach (var file in files)
                {
                    var extension = Path.GetExtension(file.FileName).ToLower();
                    var isArchive = new[] { ".zip", ".7z", ".rar" }.Contains(extension);

                    if (isArchive)
                    {
                        try
                        {
                            // Gi·∫£ l·∫≠p x·ª≠ l√Ω archive
                            results.Add(new
                            {
                                fileName = file.FileName,
                                type = "archive",
                                size = file.Length,
                                hasPassword = !string.IsNullOrEmpty(password),
                                success = true,
                                message = $"‚úÖ Archive {file.FileName} ƒë∆∞·ª£c nh·∫≠n v√† s·∫µn s√†ng x·ª≠ l√Ω",
                                note = "Archive processing would happen here with SharpCompress"
                            });
                        }
                        catch (Exception ex)
                        {
                            results.Add(new
                            {
                                fileName = file.FileName,
                                type = "archive",
                                success = false,
                                message = $"‚ùå L·ªói x·ª≠ l√Ω archive: {ex.Message}"
                            });
                        }
                    }
                    else
                    {
                        // X·ª≠ l√Ω file th√¥ng th∆∞·ªùng nh∆∞ simple import
                        using var reader = new StreamReader(file.OpenReadStream());
                        var content = await reader.ReadToEndAsync();
                        var lines = content.Split('\n', StringSplitOptions.RemoveEmptyEntries);

                        results.Add(new
                        {
                            fileName = file.FileName,
                            type = "regular",
                            size = file.Length,
                            recordCount = Math.Max(0, lines.Length - 1),
                            success = true,
                            message = $"‚úÖ Regular file {file.FileName} processed successfully"
                        });
                    }
                }

                return Ok(new
                {
                    message = $"‚úÖ Archive test th√†nh c√¥ng {results.Count} file(s)",
                    results = results,
                    timestamp = DateTime.UtcNow
                });
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "L·ªói test archive import");
                return StatusCode(500, new { 
                    message = "‚ùå L·ªói test archive import", 
                    error = ex.Message,
                    timestamp = DateTime.UtcNow
                });
            }
        }

        // üìä TEST: Health check cho import system
        [HttpGet("health")]
        public IActionResult HealthCheck()
        {
            return Ok(new
            {
                status = "healthy",
                message = "‚úÖ Test Import Controller ƒëang ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng",
                timestamp = DateTime.UtcNow,
                supportedFormats = new
                {
                    regular = new[] { ".csv", ".xlsx", ".xls" },
                    archive = new[] { ".zip", ".7z", ".rar" }
                }
            });
        }
    }
}
