using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using TinhKhoanApp.Api.Data;
using TinhKhoanApp.Api.Services;
using TinhKhoanApp.Api.Utils;

namespace TinhKhoanApp.Api.Controllers
{
    [ApiController]
    [Route("api/[controller]")]
    public class BranchIndicatorsController : ControllerBase
    {
        private readonly IBranchCalculationService _branchCalculationService;
        private readonly ILogger<BranchIndicatorsController> _logger;
        private readonly ApplicationDbContext _context;

        public BranchIndicatorsController(
            IBranchCalculationService branchCalculationService,
            ILogger<BranchIndicatorsController> logger,
            ApplicationDbContext context)
        {
            _branchCalculationService = branchCalculationService;
            _logger = logger;
            _context = context;
        }

        /// <summary>
        /// T√≠nh to√°n Ngu·ªìn v·ªën theo chi nh√°nh
        /// </summary>
        [HttpPost("nguon-von")]
        public async Task<ActionResult<decimal>> CalculateNguonVon([FromBody] BranchCalculationRequest request)
        {
            try
            {
                // Validation request
                if (request == null || string.IsNullOrWhiteSpace(request.BranchId))
                {
                    _logger.LogWarning("‚ùå Request kh√¥ng h·ª£p l·ªá - BranchId b·ªã thi·∫øu ho·∫∑c r·ªóng");
                    return BadRequest(new BranchCalculationResponse
                    {
                        IndicatorName = "Ngu·ªìn v·ªën",
                        Success = false,
                        ErrorMessage = "BranchId kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng"
                    });
                }

                _logger.LogInformation("üîß Nh·∫≠n request t√≠nh Ngu·ªìn v·ªën - BranchId: {BranchId}, Date: {Date}",
                    request.BranchId, request.Date?.ToString("dd/MM/yyyy") ?? "null");

                var result = await _branchCalculationService.CalculateNguonVonByBranch(
                    request.BranchId,
                    request.Date);

                return Ok(new BranchCalculationResponse
                {
                    BranchId = request.BranchId,
                    IndicatorName = "Ngu·ªìn v·ªën",
                    Value = result,
                    Unit = "VND",
                    CalculatedAt = VietnamDateTime.Now,
                    Success = true
                });
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "L·ªói t√≠nh Ngu·ªìn v·ªën cho chi nh√°nh {BranchId}", request.BranchId);
                return BadRequest(new BranchCalculationResponse
                {
                    BranchId = request.BranchId,
                    IndicatorName = "Ngu·ªìn v·ªën",
                    Success = false,
                    ErrorMessage = ex.Message
                });
            }
        }

        /// <summary>
        /// T√≠nh to√°n D∆∞ n·ª£ theo chi nh√°nh
        /// </summary>
        [HttpPost("du-no")]
        public async Task<ActionResult<decimal>> CalculateDuNo([FromBody] BranchCalculationRequest request)
        {
            try
            {
                _logger.LogInformation("B·∫Øt ƒë·∫ßu t√≠nh D∆∞ n·ª£ cho chi nh√°nh {BranchId}", request.BranchId);

                var result = await _branchCalculationService.CalculateDuNoByBranch(
                    request.BranchId,
                    request.Date);

                return Ok(new BranchCalculationResponse
                {
                    BranchId = request.BranchId,
                    IndicatorName = "D∆∞ n·ª£",
                    Value = result,
                    Unit = "VND",
                    CalculatedAt = VietnamDateTime.Now,
                    Success = true
                });
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "L·ªói t√≠nh D∆∞ n·ª£ cho chi nh√°nh {BranchId}", request.BranchId);
                return BadRequest(new BranchCalculationResponse
                {
                    BranchId = request.BranchId,
                    IndicatorName = "D∆∞ n·ª£",
                    Success = false,
                    ErrorMessage = ex.Message
                });
            }
        }

        /// <summary>
        /// T√≠nh to√°n N·ª£ x·∫•u theo chi nh√°nh
        /// </summary>
        [HttpPost("no-xau")]
        public async Task<ActionResult<decimal>> CalculateNoXau([FromBody] BranchCalculationRequest request)
        {
            try
            {
                _logger.LogInformation("B·∫Øt ƒë·∫ßu t√≠nh N·ª£ x·∫•u cho chi nh√°nh {BranchId}", request.BranchId);

                var result = await _branchCalculationService.CalculateNoXauByBranch(
                    request.BranchId,
                    request.Date);

                return Ok(new BranchCalculationResponse
                {
                    BranchId = request.BranchId,
                    IndicatorName = "N·ª£ x·∫•u",
                    Value = result,
                    Unit = "%",
                    CalculatedAt = VietnamDateTime.Now,
                    Success = true
                });
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "L·ªói t√≠nh N·ª£ x·∫•u cho chi nh√°nh {BranchId}", request.BranchId);
                return BadRequest(new BranchCalculationResponse
                {
                    BranchId = request.BranchId,
                    IndicatorName = "N·ª£ x·∫•u",
                    Success = false,
                    ErrorMessage = ex.Message
                });
            }
        }

        /// <summary>
        /// T√≠nh to√°n Thu h·ªìi XLRR theo chi nh√°nh
        /// </summary>
        [HttpPost("thu-hoi-xlrr")]
        public async Task<ActionResult<decimal>> CalculateThuHoiXLRR([FromBody] BranchCalculationRequest request)
        {
            try
            {
                _logger.LogInformation("B·∫Øt ƒë·∫ßu t√≠nh Thu h·ªìi XLRR cho chi nh√°nh {BranchId}", request.BranchId);

                var result = await _branchCalculationService.CalculateThuHoiXLRRByBranch(
                    request.BranchId,
                    request.Date);

                return Ok(new BranchCalculationResponse
                {
                    BranchId = request.BranchId,
                    IndicatorName = "Thu h·ªìi XLRR",
                    Value = result,
                    Unit = "VND",
                    CalculatedAt = VietnamDateTime.Now,
                    Success = true
                });
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "L·ªói t√≠nh Thu h·ªìi XLRR cho chi nh√°nh {BranchId}", request.BranchId);
                return BadRequest(new BranchCalculationResponse
                {
                    BranchId = request.BranchId,
                    IndicatorName = "Thu h·ªìi XLRR",
                    Success = false,
                    ErrorMessage = ex.Message
                });
            }
        }

        /// <summary>
        /// T√≠nh to√°n Thu d·ªãch v·ª• theo chi nh√°nh
        /// </summary>
        [HttpPost("thu-dich-vu")]
        public async Task<ActionResult<decimal>> CalculateThuDichVu([FromBody] BranchCalculationRequest request)
        {
            try
            {
                _logger.LogInformation("B·∫Øt ƒë·∫ßu t√≠nh Thu d·ªãch v·ª• cho chi nh√°nh {BranchId}", request.BranchId);

                var result = await _branchCalculationService.CalculateThuDichVuByBranch(
                    request.BranchId,
                    request.Date);

                return Ok(new BranchCalculationResponse
                {
                    BranchId = request.BranchId,
                    IndicatorName = "Thu d·ªãch v·ª•",
                    Value = result,
                    Unit = "VND",
                    CalculatedAt = VietnamDateTime.Now,
                    Success = true
                });
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "L·ªói t√≠nh Thu d·ªãch v·ª• cho chi nh√°nh {BranchId}", request.BranchId);
                return BadRequest(new BranchCalculationResponse
                {
                    BranchId = request.BranchId,
                    IndicatorName = "Thu d·ªãch v·ª•",
                    Success = false,
                    ErrorMessage = ex.Message
                });
            }
        }

        /// <summary>
        /// T√≠nh to√°n L·ª£i nhu·∫≠n theo chi nh√°nh
        /// </summary>
        [HttpPost("loi-nhuan")]
        public async Task<ActionResult<decimal>> CalculateLoiNhuan([FromBody] BranchCalculationRequest request)
        {
            try
            {
                _logger.LogInformation("B·∫Øt ƒë·∫ßu t√≠nh L·ª£i nhu·∫≠n cho chi nh√°nh {BranchId}", request.BranchId);

                var result = await _branchCalculationService.CalculateLoiNhuanByBranch(
                    request.BranchId,
                    request.Date);

                return Ok(new BranchCalculationResponse
                {
                    BranchId = request.BranchId,
                    IndicatorName = "L·ª£i nhu·∫≠n",
                    Value = result,
                    Unit = "VND",
                    CalculatedAt = VietnamDateTime.Now,
                    Success = true
                });
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "L·ªói t√≠nh L·ª£i nhu·∫≠n cho chi nh√°nh {BranchId}", request.BranchId);
                return BadRequest(new BranchCalculationResponse
                {
                    BranchId = request.BranchId,
                    IndicatorName = "L·ª£i nhu·∫≠n",
                    Success = false,
                    ErrorMessage = ex.Message
                });
            }
        }

        /// <summary>
        /// T√≠nh to√°n t·∫•t c·∫£ 6 ch·ªâ ti√™u c√πng l√∫c
        /// </summary>
        [HttpPost("all-indicators")]
        public async Task<ActionResult<BranchAllIndicatorsResponse>> CalculateAllIndicators([FromBody] BranchCalculationRequest request)
        {
            try
            {
                _logger.LogInformation("B·∫Øt ƒë·∫ßu t√≠nh t·∫•t c·∫£ ch·ªâ ti√™u cho chi nh√°nh {BranchId}", request.BranchId);

                var response = new BranchAllIndicatorsResponse
                {
                    BranchId = request.BranchId,
                    CalculatedAt = VietnamDateTime.Now,
                    Success = true
                };

                // T√≠nh to√°n song song c√°c ch·ªâ ti√™u
                var tasks = new[]
                {
                    _branchCalculationService.CalculateNguonVonByBranch(request.BranchId, request.Date),
                    _branchCalculationService.CalculateDuNoByBranch(request.BranchId, request.Date),
                    _branchCalculationService.CalculateNoXauByBranch(request.BranchId, request.Date),
                    _branchCalculationService.CalculateThuHoiXLRRByBranch(request.BranchId, request.Date),
                    _branchCalculationService.CalculateThuDichVuByBranch(request.BranchId, request.Date),
                    _branchCalculationService.CalculateLoiNhuanByBranch(request.BranchId, request.Date)
                };

                var results = await Task.WhenAll(tasks);

                response.NguonVon = results[0];
                response.DuNo = results[1];
                response.NoXau = results[2];
                response.ThuHoiXLRR = results[3];
                response.ThuDichVu = results[4];
                response.LoiNhuan = results[5];

                return Ok(response);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "L·ªói t√≠nh t·∫•t c·∫£ ch·ªâ ti√™u cho chi nh√°nh {BranchId}", request.BranchId);
                return BadRequest(new BranchAllIndicatorsResponse
                {
                    BranchId = request.BranchId,
                    Success = false,
                    ErrorMessage = ex.Message
                });
            }
        }

        /// <summary>
        /// Debug endpoint - Ki·ªÉm tra d·ªØ li·ªáu DP01 c√≥ trong database
        /// </summary>
        [HttpGet("debug-dp01-data")]
        public async Task<ActionResult> DebugDP01Data()
        {
            try
            {
                // Ki·ªÉm tra t·ªïng s·ªë records DP01
                var totalDP01Records = await _context.ImportedDataRecords
                    .Where(x => x.Category == "DP01")
                    .CountAsync();

                // Ki·ªÉm tra c√°c ng√†y c√≥ d·ªØ li·ªáu
                var availableDates = await _context.ImportedDataRecords
                    .Where(x => x.Category == "DP01" && x.StatementDate.HasValue)
                    .Select(x => x.StatementDate.Value.Date)
                    .Distinct()
                    .OrderByDescending(x => x)
                    .Take(10)
                    .ToListAsync();

                // Ki·ªÉm tra ng√†y g·∫ßn nh·∫•t v√† d·ªØ li·ªáu
                var latestDate = availableDates.FirstOrDefault();
                var sampleData = new List<object>();

                if (latestDate != default)
                {
                    var latestRecords = await _context.ImportedDataRecords
                        .Where(x => x.Category == "DP01" && x.StatementDate.HasValue && x.StatementDate.Value.Date == latestDate)
                        .ToListAsync();

                    foreach (var record in latestRecords.Take(2))
                    {
                        var items = await _context.ImportedDataItems
                            .Where(x => x.ImportedDataRecordId == record.Id)
                            .Take(3)
                            .Select(x => x.RawData)
                            .ToListAsync();

                        sampleData.Add(new
                        {
                            FileName = record.FileName,
                            ItemCount = await _context.ImportedDataItems.Where(x => x.ImportedDataRecordId == record.Id).CountAsync(),
                            SampleItems = items.Take(2).ToList()
                        });
                    }
                }

                return Ok(new
                {
                    TotalDP01Records = totalDP01Records,
                    AvailableDates = availableDates.Select(d => d.ToString("yyyy-MM-dd")).ToList(),
                    LatestDate = latestDate.ToString("yyyy-MM-dd"),
                    SampleData = sampleData
                });
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "L·ªói debug DP01 data");
                return BadRequest(new { Error = ex.Message });
            }
        }
    }

    public class BranchCalculationRequest
    {
        public string BranchId { get; set; } = string.Empty;
        public DateTime? Date { get; set; }
    }

    public class BranchCalculationResponse
    {
        public string BranchId { get; set; } = string.Empty;
        public string IndicatorName { get; set; } = string.Empty;
        public decimal Value { get; set; }
        public string Unit { get; set; } = string.Empty;
        public DateTime CalculatedAt { get; set; }
        public bool Success { get; set; }
        public string? ErrorMessage { get; set; }
    }

    public class BranchAllIndicatorsResponse
    {
        public string BranchId { get; set; } = string.Empty;
        public decimal NguonVon { get; set; }
        public decimal DuNo { get; set; }
        public decimal NoXau { get; set; }
        public decimal ThuHoiXLRR { get; set; }
        public decimal ThuDichVu { get; set; }
        public decimal LoiNhuan { get; set; }
        public DateTime CalculatedAt { get; set; }
        public bool Success { get; set; }
        public string? ErrorMessage { get; set; }
    }
}
