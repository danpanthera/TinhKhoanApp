using Microsoft.AspNetCore.Mvc;
using TinhKhoanApp.Api.Models;
using TinhKhoanApp.Api.Services.Interfaces;
using Microsoft.AspNetCore.WebUtilities;
using Microsoft.Net.Http.Headers;
using System.Threading.Channels;
using TinhKhoanApp.Api.Helpers;

namespace TinhKhoanApp.Api.Controllers
{
    /// <summary>
    /// Controller cho Direct Import - Import tr·ª±c ti·∫øp v√†o b·∫£ng ri√™ng bi·ªát
    /// B·ªè ho√†n to√†n ImportedDataItems ƒë·ªÉ tƒÉng hi·ªáu nƒÉng 2-5x
    /// </summary>
    [ApiController]
    [Route("api/[controller]")]
    public class DirectImportController : ControllerBase
    {
        private readonly IDirectImportService _directImportService;
        private readonly ILogger<DirectImportController> _logger;

        public DirectImportController(
            IDirectImportService directImportService,
            ILogger<DirectImportController> logger)
        {
            _directImportService = directImportService;
            _logger = logger;
        }

        /// <summary>
        /// Import th√¥ng minh - t·ª± ƒë·ªông ph√°t hi·ªán lo·∫°i file v√† import tr·ª±c ti·∫øp
        /// </summary>
        /// <param name="file">File d·ªØ li·ªáu CSV/Excel</param>
        /// <param name="statementDate">Ng√†y b√°o c√°o (optional)</param>
        /// <returns>K·∫øt qu·∫£ import v·ªõi th√¥ng tin chi ti·∫øt</returns>
        [HttpPost("smart")]
        [DisableRequestSizeLimit]
        public async Task<ActionResult<DirectImportResult>> ImportSmartDirect(
            IFormFile file,
            [FromQuery] string? statementDate = null)
        {
            try
            {
                if (file == null || file.Length == 0)
                {
                    return BadRequest("File kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng");
                }

                _logger.LogInformation("üöÄ [DIRECT_IMPORT_API] Smart import start: {FileName}, Size: {FileSize}MB",
                    file.FileName, file.Length / 1024.0 / 1024.0);

                var result = await _directImportService.ImportSmartDirectAsync(file, statementDate);

                if (result.Success)
                {
                    _logger.LogInformation("‚úÖ [DIRECT_IMPORT_API] Smart import success: {Records} records in {Duration}ms",
                        result.ProcessedRecords, result.Duration.TotalMilliseconds);
                    return Ok(result);
                }
                else
                {
                    _logger.LogError("‚ùå [DIRECT_IMPORT_API] Smart import failed: {Error}", result.ErrorMessage);
                    return BadRequest(result);
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "üí• [DIRECT_IMPORT_API] Smart import exception: {FileName}", file?.FileName);
                return StatusCode(500, new DirectImportResult
                {
                    Success = false,
                    ErrorMessage = $"L·ªói h·ªá th·ªëng: {ex.Message}",
                    FileName = file?.FileName ?? "Unknown"
                });
            }
        }

        /// <summary>
        /// Import tr·ª±c ti·∫øp file DP01 v√†o b·∫£ng DP01
        /// </summary>
        [HttpPost("dp01")]
        [DisableRequestSizeLimit]
        public async Task<ActionResult<DirectImportResult>> ImportDP01Direct(
            IFormFile file,
            [FromQuery] string? statementDate = null)
        {
            try
            {
                if (file == null || file.Length == 0)
                {
                    return BadRequest("File kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng");
                }

                _logger.LogInformation("üöÄ [DP01_DIRECT_API] Import start: {FileName}", file.FileName);

                var result = await _directImportService.ImportDP01DirectAsync(file, statementDate);

                if (result.Success)
                {
                    _logger.LogInformation("‚úÖ [DP01_DIRECT_API] Import success: {Records} records", result.ProcessedRecords);
                    return Ok(result);
                }
                else
                {
                    _logger.LogError("‚ùå [DP01_DIRECT_API] Import failed: {Error}", result.ErrorMessage);
                    return BadRequest(result);
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "üí• [DP01_DIRECT_API] Import exception: {FileName}", file?.FileName);
                return StatusCode(500, new DirectImportResult
                {
                    Success = false,
                    ErrorMessage = $"L·ªói h·ªá th·ªëng: {ex.Message}",
                    FileName = file?.FileName ?? "Unknown"
                });
            }
        }

        /// <summary>
        /// Import tr·ª±c ti·∫øp file LN01 v√†o b·∫£ng LN01
        /// </summary>
        [HttpPost("ln01")]
        [DisableRequestSizeLimit]
        public async Task<ActionResult<DirectImportResult>> ImportLN01Direct(
            IFormFile file,
            [FromQuery] string? statementDate = null)
        {
            try
            {
                if (file == null || file.Length == 0)
                {
                    return BadRequest("File kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng");
                }

                var result = await _directImportService.ImportLN01DirectAsync(file, statementDate);
                return result.Success ? Ok(result) : BadRequest(result);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "üí• [LN01_DIRECT_API] Import exception: {FileName}", file?.FileName);
                return StatusCode(500, new DirectImportResult
                {
                    Success = false,
                    ErrorMessage = $"L·ªói h·ªá th·ªëng: {ex.Message}",
                    FileName = file?.FileName ?? "Unknown"
                });
            }
        }

        /// <summary>
        /// L·∫•y th√¥ng tin tr·∫°ng th√°i import
        /// </summary>
        [HttpGet("status")]
        public async Task<ActionResult<object>> GetImportStatus()
        {
            try
            {
                // TODO: Implement status tracking
                return Ok(new
                {
                    Status = "Direct Import System Online",
                    Version = "1.0.0",
                    Features = new[]
                    {
                        "‚úÖ Smart Detection - T·ª± ƒë·ªông ph√°t hi·ªán lo·∫°i file",
                        "‚úÖ SqlBulkCopy - TƒÉng t·ªëc import 2-5x",
                        "‚úÖ Temporal Tables - L·ªãch s·ª≠ thay ƒë·ªïi t·ª± ƒë·ªông",
                        "‚úÖ Columnstore Indexes - Hi·ªáu nƒÉng query 10-100x",
                        "‚úÖ Metadata Tracking - Ch·ªâ l∆∞u metadata, kh√¥ng l∆∞u raw data"
                    },
                    SupportedDataTypes = new[]
                    {
                        "DP01 - B√°o c√°o t√†i ch√≠nh",
                        "LN01 - D·ªØ li·ªáu cho vay",
                        "GL01 - D·ªØ li·ªáu s·ªï c√°i",
                        "GL41 - D·ªØ li·ªáu giao d·ªãch",
                        "DPDA - D·ªØ li·ªáu ph√¢n t√≠ch",
                        "EI01 - D·ªØ li·ªáu l√£i su·∫•t",
                        "RR01 - D·ªØ li·ªáu r·ªßi ro",
                    }
                });
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "üí• [DIRECT_IMPORT_API] Status check exception");
                return StatusCode(500, new { Error = ex.Message });
            }
        }

        /// <summary>
        /// L·∫•y s·ªë l∆∞·ª£ng records th·ª±c t·∫ø t·ª´ database tables (kh√¥ng ph·∫£i metadata)
        /// </summary>
        [HttpGet("table-counts")]
        public async Task<ActionResult<Dictionary<string, int>>> GetTableCounts()
        {
            try
            {
                _logger.LogInformation("üìä Getting actual table record counts");

                var counts = await _directImportService.GetTableRecordCountsAsync();

                return Ok(counts);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "‚ùå Error getting table counts");
                return StatusCode(500, new { Error = ex.Message });
            }
        }

        /// <summary>
        /// üöÄ STREAMING UPLOAD - Import file l·ªõn b·∫±ng streaming (h√†ng trƒÉm MB)
        /// Kh√¥ng load to√†n b·ªô file v√†o memory, stream tr·ª±c ti·∫øp v√†o database
        /// </summary>
        [HttpPost("stream")]
        [DisableRequestSizeLimit]
        [RequestFormLimits(ValueLengthLimit = int.MaxValue, MultipartBodyLengthLimit = long.MaxValue)]
        public async Task<IActionResult> StreamImport()
        {
            try
            {
                _logger.LogInformation("üöÄ [STREAM_IMPORT] Starting streaming upload");

                if (!MultipartRequestHelper.IsMultipartContentType(Request.ContentType))
                {
                    return BadRequest("Request must be multipart/form-data");
                }

                var boundary = MultipartRequestHelper.GetBoundary(
                    MediaTypeHeaderValue.Parse(Request.ContentType),
                    70);

                var reader = new MultipartReader(boundary, HttpContext.Request.Body);
                var section = await reader.ReadNextSectionAsync();

                while (section != null)
                {
                    var hasContentDispositionHeader = ContentDispositionHeaderValue.TryParse(
                        section.ContentDisposition, out var contentDisposition);

                    if (hasContentDispositionHeader &&
                        contentDisposition.DispositionType.Equals("form-data") &&
                        !string.IsNullOrEmpty(contentDisposition.FileName.Value))
                    {
                        var fileName = contentDisposition.FileName.Value.Trim('"');
                        var dataType = _directImportService.DetectDataTypeFromFileName(fileName);

                        _logger.LogInformation("üìÇ [STREAM_IMPORT] Processing file: {FileName}, Type: {DataType}",
                            fileName, dataType);

                        // Stream tr·ª±c ti·∫øp v√†o database
                        var result = await _directImportService.StreamImportAsync(
                            section.Body, fileName, dataType);

                        return Ok(result);
                    }

                    section = await reader.ReadNextSectionAsync();
                }

                return BadRequest("No file found in request");
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "‚ùå [STREAM_IMPORT] Stream import error");
                return StatusCode(500, new
                {
                    success = false,
                    error = ex.Message,
                    type = "STREAM_IMPORT_ERROR"
                });
            }
        }

        /// <summary>
        /// üÜî T·∫°o session cho chunked upload
        /// </summary>
        [HttpPost("create-session")]
        public async Task<IActionResult> CreateUploadSession([FromBody] CreateSessionRequest request)
        {
            try
            {
                var sessionId = Guid.NewGuid().ToString();

                // Store session info (c√≥ th·ªÉ d√πng Redis ho·∫∑c database)
                var sessionInfo = new UploadSession
                {
                    SessionId = sessionId,
                    FileName = request.FileName,
                    FileSize = request.FileSize,
                    TotalChunks = request.TotalChunks,
                    DataType = request.DataType,
                    CreatedAt = DateTime.UtcNow,
                    UploadedChunks = new List<int>()
                };

                // L∆∞u session v√†o cache/database
                await _directImportService.CreateUploadSessionAsync(sessionInfo);

                _logger.LogInformation("üÜî [CREATE_SESSION] Created session {SessionId} for file {FileName}",
                    sessionId, request.FileName);

                return Ok(new { sessionId, success = true });
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "‚ùå [CREATE_SESSION] Error creating upload session");
                return StatusCode(500, new { success = false, error = ex.Message });
            }
        }

        /// <summary>
        /// üì§ Upload chunk
        /// </summary>
        [HttpPost("upload-chunk")]
        [DisableRequestSizeLimit]
        public async Task<IActionResult> UploadChunk([FromForm] UploadChunkRequest request)
        {
            try
            {
                var result = await _directImportService.UploadChunkAsync(
                    request.SessionId,
                    request.ChunkIndex,
                    request.Chunk);

                return Ok(result);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "‚ùå [UPLOAD_CHUNK] Error uploading chunk {ChunkIndex} for session {SessionId}",
                    request.ChunkIndex, request.SessionId);
                return StatusCode(500, new { success = false, error = ex.Message });
            }
        }

        /// <summary>
        /// ‚úÖ Finalize chunked upload v√† process file
        /// </summary>
        [HttpPost("finalize/{sessionId}")]
        public async Task<IActionResult> FinalizeUpload(string sessionId)
        {
            try
            {
                var result = await _directImportService.FinalizeUploadAsync(sessionId);
                return Ok(result);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "‚ùå [FINALIZE_UPLOAD] Error finalizing upload for session {SessionId}", sessionId);
                return StatusCode(500, new { success = false, error = ex.Message });
            }
        }

        /// <summary>
        /// üìä Get upload info (for resume functionality)
        /// </summary>
        [HttpGet("upload-info/{sessionId}")]
        public async Task<IActionResult> GetUploadInfo(string sessionId)
        {
            try
            {
                var info = await _directImportService.GetUploadInfoAsync(sessionId);
                return Ok(info);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "‚ùå [UPLOAD_INFO] Error getting upload info for session {SessionId}", sessionId);
                return StatusCode(500, new { success = false, error = ex.Message });
            }
        }

        /// <summary>
        /// üö´ Cancel upload session
        /// </summary>
        [HttpDelete("cancel/{sessionId}")]
        public async Task<IActionResult> CancelUpload(string sessionId)
        {
            try
            {
                await _directImportService.CancelUploadAsync(sessionId);
                return Ok(new { success = true, message = "Upload cancelled" });
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "‚ùå [CANCEL_UPLOAD] Error cancelling upload for session {SessionId}", sessionId);
                return StatusCode(500, new { success = false, error = ex.Message });
            }
        }

        /// <summary>
        /// üîÑ PARALLEL CHUNKED UPLOAD - X·ª≠ l√Ω nhi·ªÅu chunks song song
        /// </summary>
        [HttpPost("parallel")]
        [DisableRequestSizeLimit]
        public async Task<IActionResult> ParallelImport(IFormFile file, [FromQuery] int chunkSize = 50000)
        {
            try
            {
                var dataType = _directImportService.DetectDataTypeFromFileName(file.FileName);

                var result = await _directImportService.ParallelImportAsync(
                    file.OpenReadStream(),
                    file.FileName,
                    dataType,
                    chunkSize);

                return Ok(result);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "‚ùå [PARALLEL_IMPORT] Error in parallel import");
                return StatusCode(500, new { success = false, error = ex.Message });
            }
        }
    }
}
