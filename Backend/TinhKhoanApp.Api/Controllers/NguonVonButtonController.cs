using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using TinhKhoanApp.Api.Data;
using TinhKhoanApp.Api.Models.NguonVon;
using TinhKhoanApp.Api.Services.Interfaces;

namespace TinhKhoanApp.Api.Controllers
{
    /// <summary>
    /// Controller t√≠nh to√°n Ngu·ªìn v·ªën theo y√™u c·∫ßu m·ªõi c·ªßa anh
    /// H·ªó tr·ª£ t√≠nh cho H·ªôi S·ªü, c√°c Chi nh√°nh, PGD v√† To√†n t·ªânh
    /// S·ª¨ D·ª§NG B·∫¢NG DP01_New (DP01_News DbSet) - CH√çNH TH·ª®C
    /// </summary>
    [ApiController]
    [Route("api/[controller]")]
    public class NguonVonButtonController : ControllerBase
    {
        private readonly ApplicationDbContext _context;
        private readonly ILogger<NguonVonButtonController> _logger;

        // Mapping theo y√™u c·∫ßu c·ªßa anh - C·∫¨P NH·∫¨T CH√çNH X√ÅC
        private readonly Dictionary<string, BranchInfo> _branchMapping = new Dictionary<string, BranchInfo>
        {
            // Mapping theo y√™u c·∫ßu c·ªßa anh - C·∫¨P NH·∫¨T CH√çNH X√ÅC
            { "HoiSo", new BranchInfo("7800", null, "H·ªôi S·ªü") },
            { "CnBinhLu", new BranchInfo("7801", null, "CN B√¨nh L∆∞") },
            { "CnPhongTho", new BranchInfo("7802", null, "CN Phong Th·ªï") },
            { "CnSinHo", new BranchInfo("7803", null, "CN S√¨n H·ªì") },
            { "CnBumTo", new BranchInfo("7804", null, "CN Bum T·ªü") },
            { "CnThanUyen", new BranchInfo("7805", null, "CN Than Uy√™n") },
            { "CnDoanKet", new BranchInfo("7806", null, "CN ƒêo√†n K·∫øt") },
            { "CnTanUyen", new BranchInfo("7807", null, "CN T√¢n Uy√™n") },
            { "CnNamNhun", new BranchInfo("7808", null, "CN N·∫≠m Nh√πn") }, // S·ª≠a t·ª´ N·∫≠m H√†ng

            // C√°c PGD
            { "CnPhongTho-PGD5", new BranchInfo("7802", "01", "CN Phong Th·ªï - PGD S·ªë 5") },
            { "CnThanUyen-PGD6", new BranchInfo("7805", "01", "CN Than Uy√™n - PGD S·ªë 6") },
            { "CnDoanKet-PGD1", new BranchInfo("7806", "01", "CN ƒêo√†n K·∫øt - PGD S·ªë 1") },
            { "CnDoanKet-PGD2", new BranchInfo("7806", "02", "CN ƒêo√†n K·∫øt - PGD S·ªë 2") },
            { "CnTanUyen-PGD3", new BranchInfo("7807", "01", "CN T√¢n Uy√™n - PGD S·ªë 3") },

            // To√†n t·ªânh
            { "ToanTinh", new BranchInfo("ALL", null, "To√†n t·ªânh") }
        };

        public NguonVonButtonController(ApplicationDbContext context, ILogger<NguonVonButtonController> logger)
        {
            _context = context;
            _logger = logger;
        }

        /// <summary>
        /// T√≠nh Ngu·ªìn v·ªën theo button ƒë∆∞·ª£c ·∫•n - C·∫¨P NH·∫¨T THEO Y√äU C·∫¶U CH√çNH X√ÅC
        /// H·ªó tr·ª£ l·ªçc theo date/month/year v√† s·ª≠ d·ª•ng b·∫£ng DP01_New
        /// </summary>
        /// <param name="unitKey">Key ƒë∆°n v·ªã (HoiSo, CnBinhLu, CnPhongTho-PGD5, ToanTinh...)</param>
        /// <param name="targetDate">Ng√†y c·ª• th·ªÉ (dd/MM/yyyy)</param>
        /// <param name="targetMonth">Th√°ng v√† nƒÉm (MM/yyyy) - s·∫Ω l·ªçc ng√†y cu·ªëi th√°ng</param>
        /// <param name="targetYear">NƒÉm (yyyy) - s·∫Ω l·ªçc ng√†y 31/12/yyyy</param>
        [HttpPost("calculate/{unitKey}")]
        public async Task<IActionResult> CalculateNguonVon(
            string unitKey,
            [FromQuery] string? targetDate = null,
            [FromQuery] string? targetMonth = null,
            [FromQuery] string? targetYear = null)
        {
            try
            {
                if (!_branchMapping.ContainsKey(unitKey))
                {
                    return BadRequest(new
                    {
                        success = false,
                        message = $"Kh√¥ng t√¨m th·∫•y ƒë∆°n v·ªã '{unitKey}'. C√°c ƒë∆°n v·ªã h·ªó tr·ª£: {string.Join(", ", _branchMapping.Keys)}"
                    });
                }

                var branchInfo = _branchMapping[unitKey];

                // X√°c ƒë·ªãnh NgayDL ƒë·ªÉ l·ªçc theo y√™u c·∫ßu c·ªßa anh
                string ngayDLFilter = DetermineNgayDLFilter(targetDate, targetMonth, targetYear);

                _logger.LogInformation("üí∞ B·∫Øt ƒë·∫ßu t√≠nh Ngu·ªìn v·ªën cho {UnitName} ({UnitKey}) - MA_CN: {MaCN}, MA_PGD: {MaPGD}, NgayDL: {NgayDL}",
                    branchInfo.DisplayName, unitKey, branchInfo.MaCN, branchInfo.MaPGD ?? "ALL", ngayDLFilter);

                decimal totalNguonVon;
                int recordCount;
                List<object> topAccounts;

                if (unitKey == "ToanTinh")
                {
                    // T√≠nh to√†n t·ªânh (t·ªïng t·ª´ 7800-7808)
                    var result = await CalculateAllProvince(ngayDLFilter);
                    totalNguonVon = result.Total;
                    recordCount = result.RecordCount;
                    topAccounts = result.TopAccounts;
                }
                else
                {
                    // T√≠nh cho ƒë∆°n v·ªã c·ª• th·ªÉ
                    var result = await CalculateSingleUnit(branchInfo, ngayDLFilter);
                    totalNguonVon = result.Total;
                    recordCount = result.RecordCount;
                    topAccounts = result.TopAccounts;
                }

                _logger.LogInformation("‚úÖ K·∫øt qu·∫£ t√≠nh Ngu·ªìn v·ªën: {Total:N0} VND t·ª´ {Count} b·∫£n ghi", totalNguonVon, recordCount);

                return Ok(new
                {
                    success = true,
                    data = new
                    {
                        unitKey = unitKey,
                        unitName = branchInfo.DisplayName,
                        maCN = branchInfo.MaCN,
                        maPGD = branchInfo.MaPGD,
                        totalNguonVon = totalNguonVon,
                        totalNguonVonTrieuVND = Math.Round(totalNguonVon / 1_000_000m, 2),
                        recordCount = recordCount,
                        filterDate = ngayDLFilter,
                        topAccounts = topAccounts.Take(10).ToList(), // Top 10 t√†i kho·∫£n
                        formula = "T·ªïng CURRENT_BALANCE t·ª´ DP01_New - (lo·∫°i tr·ª´ TK 40*, 41*, 427*, 211108)",
                        appliedFilters = new
                        {
                            maCN = branchInfo.MaCN,
                            maPGD = branchInfo.MaPGD,
                            ngayDL = ngayDLFilter,
                            excludedAccounts = new[] { "40*", "41*", "427*", "211108" }
                        }
                    },
                    message = $"T√≠nh to√°n th√†nh c√¥ng cho {branchInfo.DisplayName}"
                });
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "‚ùå L·ªói khi t√≠nh Ngu·ªìn v·ªën cho {UnitKey}", unitKey);
                return StatusCode(500, new
                {
                    success = false,
                    message = $"L·ªói khi t√≠nh to√°n: {ex.Message}"
                });
            }
        }

        /// <summary>
        /// X√°c ƒë·ªãnh NgayDL filter theo priority: targetDate > targetMonth > targetYear > today
        /// </summary>
        private string DetermineNgayDLFilter(string? targetDate, string? targetMonth, string? targetYear)
        {
            // 1. N·∫øu c√≥ targetDate c·ª• th·ªÉ (dd/MM/yyyy)
            if (!string.IsNullOrEmpty(targetDate))
            {
                return targetDate;
            }

            // 2. N·∫øu c√≥ targetMonth (MM/yyyy) -> l·∫•y ng√†y cu·ªëi th√°ng
            if (!string.IsNullOrEmpty(targetMonth))
            {
                if (DateTime.TryParseExact(targetMonth, "MM/yyyy", null, System.Globalization.DateTimeStyles.None, out DateTime monthDate))
                {
                    var lastDayOfMonth = new DateTime(monthDate.Year, monthDate.Month, DateTime.DaysInMonth(monthDate.Year, monthDate.Month));
                    return lastDayOfMonth.ToString("dd/MM/yyyy");
                }
            }

            // 3. N·∫øu c√≥ targetYear (yyyy) -> l·∫•y ng√†y 31/12/yyyy
            if (!string.IsNullOrEmpty(targetYear))
            {
                if (int.TryParse(targetYear, out int year))
                {
                    var lastDayOfYear = new DateTime(year, 12, 31);
                    return lastDayOfYear.ToString("dd/MM/yyyy");
                }
            }

            // 4. M·∫∑c ƒë·ªãnh l√† ng√†y h√¥m nay
            return DateTime.Now.ToString("dd/MM/yyyy");
        }

        /// <summary>
        /// T√≠nh Ngu·ªìn v·ªën cho to√†n t·ªânh (t·ªïng t·ª´ 7800-7808) - S·ª¨ D·ª§NG DP01_New
        /// L·ªçc theo MA_CN + NgayDL (dd/MM/yyyy) + lo·∫°i tr·ª´ t√†i kho·∫£n theo nghi·ªáp v·ª•
        /// </summary>
        private async Task<CalculationResult> CalculateAllProvince(string ngayDLFilter)
        {
            var allBranchCodes = new[] { "7800", "7801", "7802", "7803", "7804", "7805", "7806", "7807", "7808" };

            decimal totalNguonVon = 0;
            int totalRecordCount = 0;
            var allTopAccounts = new List<object>();

            // T√≠nh t·ªïng cho t·ª´ng chi nh√°nh d·ª±a tr√™n MA_CN v√† NgayDL t·ª´ b·∫£ng DP01_New
            foreach (var maCN in allBranchCodes)
            {
                _logger.LogInformation("üìä ƒêang t√≠nh cho chi nh√°nh: {MaCN} ng√†y {Date}", maCN, ngayDLFilter);

                // Query d·ªØ li·ªáu t·ª´ b·∫£ng DP01_New theo y√™u c·∫ßu c·ªßa anh
                var query = _context.DP01_News
                    .Where(d => d.MA_CN == maCN && d.NgayDL == ngayDLFilter)
                    .Where(d =>
                        !d.TAI_KHOAN_HACH_TOAN.StartsWith("40") &&
                        !d.TAI_KHOAN_HACH_TOAN.StartsWith("41") &&
                        !d.TAI_KHOAN_HACH_TOAN.StartsWith("427") &&
                        d.TAI_KHOAN_HACH_TOAN != "211108"
                    );

                var branchTotal = await query.SumAsync(d => d.CURRENT_BALANCE ?? 0);
                var branchCount = await query.CountAsync();

                totalNguonVon += branchTotal;
                totalRecordCount += branchCount;

                _logger.LogInformation("‚úÖ Chi nh√°nh {MaCN}: {Total:N0} VND t·ª´ {Count} b·∫£n ghi",
                    maCN, branchTotal, branchCount);

                // L·∫•y top accounts c·ªßa chi nh√°nh n√†y
                if (branchCount > 0)
                {
                    var branchTopAccounts = await query
                        .OrderByDescending(d => Math.Abs(d.CURRENT_BALANCE ?? 0))
                        .Take(5)
                        .Select(d => new
                        {
                            MaCN = maCN,
                            AccountCode = d.TAI_KHOAN_HACH_TOAN,
                            CurrentBalance = d.CURRENT_BALANCE ?? 0,
                            NgayDL = d.NgayDL
                        })
                        .ToListAsync();

                    allTopAccounts.AddRange(branchTopAccounts.Cast<object>());
                }
            }

            // S·∫Øp x·∫øp l·∫°i top accounts theo s·ªë d∆∞
            var topAccounts = allTopAccounts
                .Cast<dynamic>()
                .OrderByDescending(x => Math.Abs((decimal)x.CurrentBalance))
                .Take(20)
                .Cast<object>()
                .ToList();

            _logger.LogInformation("üèÜ T·ªïng ngu·ªìn v·ªën to√†n t·ªânh: {Total:N0} VND t·ª´ {Count} b·∫£n ghi (NgayDL: {NgayDL})",
                totalNguonVon, totalRecordCount, ngayDLFilter);

            return new CalculationResult
            {
                Total = totalNguonVon,
                RecordCount = totalRecordCount,
                TopAccounts = topAccounts
            };
        }

        /// <summary>
        /// T√≠nh Ngu·ªìn v·ªën cho m·ªôt ƒë∆°n v·ªã c·ª• th·ªÉ - S·ª¨ D·ª§NG DP01_New
        /// L·ªçc theo MA_CN + MA_PGD (n·∫øu c√≥) + NgayDL + lo·∫°i tr·ª´ t√†i kho·∫£n
        /// </summary>
        private async Task<CalculationResult> CalculateSingleUnit(BranchInfo branchInfo, string ngayDLFilter)
        {
            _logger.LogInformation("üí∞ T√≠nh ngu·ªìn v·ªën cho {UnitName} (MA_CN: {MaCN}) ng√†y {NgayDL}",
                branchInfo.DisplayName, branchInfo.MaCN, ngayDLFilter);

            // Query d·ªØ li·ªáu t·ª´ b·∫£ng DP01_New theo y√™u c·∫ßu c·ªßa anh
            var query = _context.DP01_News
                .Where(d => d.MA_CN == branchInfo.MaCN && d.NgayDL == ngayDLFilter);

            // √Åp d·ª•ng ƒëi·ªÅu ki·ªán l·ªçc t√†i kho·∫£n theo y√™u c·∫ßu c·ªßa anh
            query = query.Where(d =>
                !d.TAI_KHOAN_HACH_TOAN.StartsWith("40") &&
                !d.TAI_KHOAN_HACH_TOAN.StartsWith("41") &&
                !d.TAI_KHOAN_HACH_TOAN.StartsWith("427") &&
                d.TAI_KHOAN_HACH_TOAN != "211108"
            );

            // N·∫øu l√† PGD th√¨ l·ªçc th√™m theo MA_PGD
            if (!string.IsNullOrEmpty(branchInfo.MaPGD))
            {
                query = query.Where(d => d.MA_PGD == branchInfo.MaPGD);
                _logger.LogInformation("üè™ L·ªçc th√™m theo PGD: {MaPGD}", branchInfo.MaPGD);
            }

            var totalNguonVon = await query.SumAsync(d => d.CURRENT_BALANCE ?? 0);
            var recordCount = await query.CountAsync();

            // L·∫•y top 20 t√†i kho·∫£n c√≥ s·ªë d∆∞ l·ªõn nh·∫•t ƒë·ªÉ debug v√† b√°o c√°o
            var topAccounts = await query
                .OrderByDescending(d => Math.Abs(d.CURRENT_BALANCE ?? 0))
                .Take(20)
                .Select(d => new
                {
                    AccountCode = d.TAI_KHOAN_HACH_TOAN,
                    CurrentBalance = d.CURRENT_BALANCE ?? 0,
                    MaCN = d.MA_CN,
                    MaPGD = d.MA_PGD,
                    NgayDL = d.NgayDL,
                    FileName = d.FileName
                })
                .ToListAsync();

            _logger.LogInformation("‚úÖ K·∫øt qu·∫£ {UnitName}: {Total:N0} VND t·ª´ {Count} b·∫£n ghi (NgayDL: {NgayDL})",
                branchInfo.DisplayName, totalNguonVon, recordCount, ngayDLFilter);

            if (recordCount == 0)
            {
                _logger.LogWarning("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu cho MA_CN: {MaCN}, NgayDL: {NgayDL}", branchInfo.MaCN, ngayDLFilter);
            }

            return new CalculationResult
            {
                Total = totalNguonVon,
                RecordCount = recordCount,
                TopAccounts = topAccounts.Cast<object>().ToList()
            };
        }

        /// <summary>
        /// L·∫•y danh s√°ch t·∫•t c·∫£ ƒë∆°n v·ªã h·ªó tr·ª£
        /// </summary>
        [HttpGet("units")]
        public IActionResult GetSupportedUnits()
        {
            var units = _branchMapping.Select(kvp => new
            {
                unitKey = kvp.Key,
                unitName = kvp.Value.DisplayName,
                maCN = kvp.Value.MaCN,
                maPGD = kvp.Value.MaPGD
            }).ToList();

            return Ok(new
            {
                success = true,
                data = units,
                message = "Danh s√°ch c√°c ƒë∆°n v·ªã h·ªó tr·ª£"
            });
        }

        /// <summary>
        /// Debug: L·∫•y danh s√°ch c√°c file DP01_New c√≥ trong database
        /// </summary>
        [HttpGet("debug/files")]
        public async Task<IActionResult> GetDP01Files()
        {
            try
            {
                var files = await _context.DP01_News
                    .Where(d => d.FileName != null)
                    .Select(d => d.FileName)
                    .Distinct()
                    .OrderBy(f => f)
                    .ToListAsync();

                var fileInfo = files.Select(f => new
                {
                    FileName = f,
                    MaCN = f?.Length >= 4 ? f.Substring(0, 4) : "",
                    DatePart = f?.Length >= 18 ? f.Substring(10, 8) : "",
                    ParsedDate = f?.Length >= 18 ? ParseDateFromFileName(f.Substring(10, 8)) : null
                }).ToList();

                // Th·ªëng k√™ theo NgayDL
                var dateStats = await _context.DP01_News
                    .GroupBy(d => d.NgayDL)
                    .Select(g => new
                    {
                        NgayDL = g.Key,
                        RecordCount = g.Count()
                    })
                    .OrderBy(x => x.NgayDL)
                    .ToListAsync();

                _logger.LogInformation("üîç T√¨m th·∫•y {Count} file DP01_New trong database", files.Count);

                return Ok(new
                {
                    success = true,
                    totalFiles = files.Count,
                    files = fileInfo.Take(20), // Ch·ªâ hi·ªÉn th·ªã 20 files ƒë·∫ßu
                    dateStatistics = dateStats.Take(20), // Top 20 ng√†y c√≥ d·ªØ li·ªáu
                    message = "Danh s√°ch c√°c file DP01_New trong database"
                });
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "‚ùå L·ªói khi l·∫•y danh s√°ch file DP01_New");
                return StatusCode(500, new { success = false, message = ex.Message });
            }
        }

        /// <summary>
        /// Parse ng√†y t·ª´ t√™n file (yyyyMMdd -> DateTime)
        /// </summary>
        private DateTime? ParseDateFromFileName(string datePart)
        {
            if (string.IsNullOrEmpty(datePart) || datePart.Length != 8) return null;

            if (DateTime.TryParseExact(datePart, "yyyyMMdd", null, System.Globalization.DateTimeStyles.None, out DateTime date))
            {
                return date;
            }
            return null;
        }

        /// <summary>
        /// Test endpoint ƒë·ªÉ verify logic theo v√≠ d·ª• c·ªßa anh
        /// VD: Chi nh√°nh B√¨nh L∆∞ (7801) v·ªõi ng√†y 30/04/2025
        /// </summary>
        [HttpPost("test-logic")]
        public async Task<IActionResult> TestNguonVonLogic([FromBody] TestNguonVonRequest request)
        {
            try
            {
                _logger.LogInformation("üß™ Testing Ngu·ªìn v·ªën logic: {BranchName} - {Date}", request.BranchName, request.Date);

                // T√¨m branch mapping
                var branchKey = request.BranchKey ??
                    _branchMapping.FirstOrDefault(kvp => kvp.Value.DisplayName.Contains(request.BranchName ?? "")).Key;

                if (string.IsNullOrEmpty(branchKey) || !_branchMapping.ContainsKey(branchKey))
                {
                    return BadRequest(new
                    {
                        success = false,
                        message = $"Kh√¥ng t√¨m th·∫•y chi nh√°nh '{request.BranchName}'. Available: {string.Join(", ", _branchMapping.Values.Select(v => v.DisplayName))}"
                    });
                }

                var branchInfo = _branchMapping[branchKey];
                var ngayDL = request.Date;

                _logger.LogInformation("üìã Test parameters: MaCN={MaCN}, MaPGD={MaPGD}, NgayDL={NgayDL}",
                    branchInfo.MaCN, branchInfo.MaPGD, ngayDL);

                // Query step by step ƒë·ªÉ debug
                var allRecords = await _context.DP01_News
                    .Where(d => d.MA_CN == branchInfo.MaCN && d.NgayDL == ngayDL)
                    .CountAsync();

                var afterAccountFilter = await _context.DP01_News
                    .Where(d => d.MA_CN == branchInfo.MaCN && d.NgayDL == ngayDL)
                    .Where(d =>
                        !d.TAI_KHOAN_HACH_TOAN.StartsWith("40") &&
                        !d.TAI_KHOAN_HACH_TOAN.StartsWith("41") &&
                        !d.TAI_KHOAN_HACH_TOAN.StartsWith("427") &&
                        d.TAI_KHOAN_HACH_TOAN != "211108"
                    )
                    .CountAsync();

                var finalQuery = _context.DP01_News
                    .Where(d => d.MA_CN == branchInfo.MaCN && d.NgayDL == ngayDL)
                    .Where(d =>
                        !d.TAI_KHOAN_HACH_TOAN.StartsWith("40") &&
                        !d.TAI_KHOAN_HACH_TOAN.StartsWith("41") &&
                        !d.TAI_KHOAN_HACH_TOAN.StartsWith("427") &&
                        d.TAI_KHOAN_HACH_TOAN != "211108"
                    );

                if (!string.IsNullOrEmpty(branchInfo.MaPGD))
                {
                    finalQuery = finalQuery.Where(d => d.MA_PGD == branchInfo.MaPGD);
                }

                var finalCount = await finalQuery.CountAsync();
                var totalBalance = await finalQuery.SumAsync(d => d.CURRENT_BALANCE ?? 0);

                var excludedAccounts = await _context.DP01_News
                    .Where(d => d.MA_CN == branchInfo.MaCN && d.NgayDL == ngayDL)
                    .Where(d =>
                        d.TAI_KHOAN_HACH_TOAN.StartsWith("40") ||
                        d.TAI_KHOAN_HACH_TOAN.StartsWith("41") ||
                        d.TAI_KHOAN_HACH_TOAN.StartsWith("427") ||
                        d.TAI_KHOAN_HACH_TOAN == "211108"
                    )
                    .GroupBy(d => d.TAI_KHOAN_HACH_TOAN)
                    .Select(g => new
                    {
                        AccountCode = g.Key,
                        Count = g.Count(),
                        TotalBalance = g.Sum(d => d.CURRENT_BALANCE ?? 0)
                    })
                    .OrderByDescending(x => Math.Abs(x.TotalBalance))
                    .Take(10)
                    .ToListAsync();

                var topAccounts = await finalQuery
                    .OrderByDescending(d => Math.Abs(d.CURRENT_BALANCE ?? 0))
                    .Take(10)
                    .Select(d => new
                    {
                        AccountCode = d.TAI_KHOAN_HACH_TOAN,
                        CurrentBalance = d.CURRENT_BALANCE ?? 0,
                        MaCN = d.MA_CN,
                        MaPGD = d.MA_PGD
                    })
                    .ToListAsync();

                return Ok(new
                {
                    success = true,
                    testInput = new
                    {
                        branchName = request.BranchName,
                        branchKey = branchKey,
                        date = request.Date,
                        maCN = branchInfo.MaCN,
                        maPGD = branchInfo.MaPGD
                    },
                    filterSteps = new
                    {
                        step1_totalRecords = allRecords,
                        step2_afterAccountFilter = afterAccountFilter,
                        step3_finalWithPGD = finalCount,
                        step4_totalBalance = totalBalance,
                        step5_balanceInTrieuVND = Math.Round(totalBalance / 1_000_000m, 2)
                    },
                    excludedAccountsSample = excludedAccounts,
                    topAccountsIncluded = topAccounts,
                    conclusion = new
                    {
                        isImplementedCorrectly = finalCount > 0,
                        message = finalCount > 0
                            ? $"‚úÖ Logic implemented correctly. Found {finalCount} records with total balance {totalBalance:N0} VND"
                            : $"‚ùå No data found for MaCN={branchInfo.MaCN}, NgayDL={ngayDL}. Check data availability."
                    }
                });
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "‚ùå Error testing Ngu·ªìn v·ªën logic");
                return StatusCode(500, new { success = false, message = ex.Message });
            }
        }
    }

    /// <summary>
    /// Request model cho test endpoint
    /// </summary>
    public class TestNguonVonRequest
    {
        public string? BranchKey { get; set; }
        public string? BranchName { get; set; }
        public string Date { get; set; } = "";
    }

    /// <summary>
    /// Th√¥ng tin chi nh√°nh/PGD
    /// </summary>
    public class BranchInfo
    {
        public string MaCN { get; set; }
        public string? MaPGD { get; set; }
        public string DisplayName { get; set; }

        public BranchInfo(string maCN, string? maPGD, string displayName)
        {
            MaCN = maCN;
            MaPGD = maPGD;
            DisplayName = displayName;
        }
    }

    /// <summary>
    /// K·∫øt qu·∫£ t√≠nh to√°n
    /// </summary>
    public class CalculationResult
    {
        public decimal Total { get; set; }
        public int RecordCount { get; set; }
        public List<object> TopAccounts { get; set; } = new List<object>();
    }
}
