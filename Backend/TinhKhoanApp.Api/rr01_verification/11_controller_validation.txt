3-using TinhKhoanApp.Api.Services;
4-
5-namespace TinhKhoanApp.Api.Controllers
6-{
7-    [ApiController]
8:    [Route("api/rr01")]
9-    public class RR01Controller : ControllerBase
10-    {
11:        private readonly IRR01Service _rr01Service;
12-        private readonly DirectImportService _importService;
13-        private readonly ILogger<RR01Controller> _logger;
14-
15-        public RR01Controller(
16:            IRR01Service rr01Service,
17-            DirectImportService importService,
18-            ILogger<RR01Controller> logger)
19-        {
20:            _rr01Service = rr01Service;
21-            _importService = importService;
22-            _logger = logger;
23-        }
24-
25-        /// <summary>
--
27-        /// </summary>
28-        [HttpGet]
29-        [ProducesResponseType(typeof(IEnumerable<RR01DTO>), 200)]
30-        public async Task<IActionResult> GetAll()
31-        {
32:            var records = await _rr01Service.GetAllAsync();
33-            return Ok(records);
34-        }
35-
36-        /// <summary>
37-        /// Get RR01 record by ID
--
39-        [HttpGet("{id}")]
40-        [ProducesResponseType(typeof(RR01DTO), 200)]
41-        [ProducesResponseType(404)]
42-        public async Task<IActionResult> GetById(long id)
43-        {
44:            var record = await _rr01Service.GetByIdAsync(id);
45-            if (record == null)
46-            {
47-                return NotFound();
48-            }
49-            return Ok(record);
--
54-        /// </summary>
55-        [HttpGet("by-date/{date}")]
56-        [ProducesResponseType(typeof(IEnumerable<RR01DTO>), 200)]
57-        public async Task<IActionResult> GetByDate(DateTime date)
58-        {
59:            var records = await _rr01Service.GetByDateAsync(date);
60-            return Ok(records);
61-        }
62-
63-        /// <summary>
64-        /// Get RR01 records by branch
65-        /// </summary>
66-        [HttpGet("by-branch/{branchCode}")]
67-        [ProducesResponseType(typeof(IEnumerable<RR01DTO>), 200)]
68-        public async Task<IActionResult> GetByBranch(string branchCode, [FromQuery] DateTime? date = null)
69-        {
70:            var records = await _rr01Service.GetByBranchAsync(branchCode, date);
71-            return Ok(records);
72-        }
73-
74-        /// <summary>
75-        /// Get RR01 records by customer ID
76-        /// </summary>
77-        [HttpGet("by-customer/{customerId}")]
78-        [ProducesResponseType(typeof(IEnumerable<RR01DTO>), 200)]
79-        public async Task<IActionResult> GetByCustomer(string customerId, [FromQuery] DateTime? date = null)
80-        {
81:            var records = await _rr01Service.GetByCustomerAsync(customerId, date);
82-            return Ok(records);
83-        }
84-
85-        /// <summary>
86-        /// Get paged RR01 records with optional filters
--
95-            [FromQuery] string? customerId = null)
96-        {
97-            if (pageNumber < 1) pageNumber = 1;
98-            if (pageSize < 1 || pageSize > 100) pageSize = 20;
99-
100:            var (records, totalCount) = await _rr01Service.GetPagedAsync(
101-                pageNumber,
102-                pageSize,
103-                date,
104-                branchCode,
105-                customerId);
--
125-            if (!ModelState.IsValid)
126-            {
127-                return BadRequest(ModelState);
128-            }
129-
130:            var createdRecord = await _rr01Service.CreateAsync(createDto);
131-            return CreatedAtAction(nameof(GetById), new { id = createdRecord.Id }, createdRecord);
132-        }
133-
134-        /// <summary>
135-        /// Update an existing RR01 record
--
143-            if (!ModelState.IsValid)
144-            {
145-                return BadRequest(ModelState);
146-            }
147-
148:            var updatedRecord = await _rr01Service.UpdateAsync(id, updateDto);
149-            if (updatedRecord == null)
150-            {
151-                return NotFound();
152-            }
153-            return Ok(updatedRecord);
--
159-        [HttpDelete("{id}")]
160-        [ProducesResponseType(204)]
161-        [ProducesResponseType(404)]
162-        public async Task<IActionResult> Delete(long id)
163-        {
164:            var result = await _rr01Service.DeleteAsync(id);
165-            if (!result)
166-            {
167-                return NotFound();
168-            }
169-            return NoContent();
--
174-        /// </summary>
175-        [HttpGet("dates")]
176-        [ProducesResponseType(typeof(IEnumerable<DateTime>), 200)]
177-        public async Task<IActionResult> GetDistinctDates()
178-        {
179:            var dates = await _rr01Service.GetDistinctDatesAsync();
180-            return Ok(dates);
181-        }
182-
183-        /// <summary>
184-        /// Get distinct branch codes for RR01 records
185-        /// </summary>
186-        [HttpGet("branches")]
187-        [ProducesResponseType(typeof(IEnumerable<string>), 200)]
188-        public async Task<IActionResult> GetDistinctBranches([FromQuery] DateTime? date = null)
189-        {
190:            var branches = await _rr01Service.GetDistinctBranchesAsync(date);
191-            return Ok(branches);
192-        }
193-
194-        /// <summary>
195-        /// Get summary statistics for RR01 data
196-        /// </summary>
197-        [HttpGet("statistics/{date}")]
198-        [ProducesResponseType(typeof(object), 200)]
199-        public async Task<IActionResult> GetStatistics(DateTime date)
200-        {
201:            var statistics = await _rr01Service.GetSummaryStatisticsAsync(date);
202-            return Ok(statistics);
203-        }
204-
205-        /// <summary>
206-        /// Import RR01 data from a CSV file
--
213-            if (file == null || file.Length == 0)
214-            {
215-                return BadRequest("No file uploaded.");
216-            }
217-
218:            if (!file.FileName.ToLower().Contains("rr01"))
219-            {
220:                return BadRequest("Invalid file. File name must contain 'rr01'.");
221-            }
222-
223-            try
224-            {
225-                _logger.LogInformation("Importing RR01 data from file {FileName}", file.FileName);
