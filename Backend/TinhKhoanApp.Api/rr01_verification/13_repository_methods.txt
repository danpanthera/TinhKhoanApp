1-using TinhKhoanApp.Api.Models.DataTables;
2-
3-namespace TinhKhoanApp.Api.Repositories
4-{
5-    /// <summary>
6:    /// Interface for RR01 Repository operations
7-    /// </summary>
8:    public interface IRR01Repository : IRepository<RR01>
9-    {
10-        /// <summary>
11:        /// Get all RR01 records for a specific statement date
12-        /// </summary>
13:        Task<IEnumerable<RR01>> GetByDateAsync(DateTime statementDate);
14-
15-        /// <summary>
16:        /// Get all RR01 records for a specific branch
17-        /// </summary>
18:        Task<IEnumerable<RR01>> GetByBranchAsync(string branchCode, DateTime? statementDate = null);
19-
20-        /// <summary>
21:        /// Get all RR01 records for a specific customer
22-        /// </summary>
23:        Task<IEnumerable<RR01>> GetByCustomerAsync(string customerId, DateTime? statementDate = null);
24-
25-        /// <summary>
26:        /// Get all RR01 records imported from a specific file
27-        /// </summary>
28:        Task<IEnumerable<RR01>> GetByFileNameAsync(string fileName);
29-
30-        /// <summary>
31:        /// Get RR01 records with pagination
32-        /// </summary>
33:        Task<(IEnumerable<RR01> Records, int TotalCount)> GetPagedAsync(
34-            int pageNumber,
35-            int pageSize,
36-            DateTime? statementDate = null,
37-            string? branchCode = null,
38-            string? customerId = null);
39-
40-        /// <summary>
41:        /// Add a new RR01 record
42-        /// </summary>
43:        new Task<RR01> AddAsync(RR01 entity);
44-
45-        /// <summary>
46:        /// Update an existing RR01 record
47-        /// </summary>
48:        Task UpdateAsync(RR01 entity);
49-
50-        /// <summary>
51:        /// Delete an RR01 record
52-        /// </summary>
53:        Task DeleteAsync(RR01 entity);
54-    }
55-}
