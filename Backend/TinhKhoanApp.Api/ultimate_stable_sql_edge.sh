#!/bin/bash

# =============================================================================
# ULTIMATE AZURE SQL EDGE OPTIMIZED FOR APPLE SILICON M3 MAX
# Gi·∫£i ph√°p t·ªëi ∆∞u nh·∫•t cho ARM64 v·ªõi Azure SQL Edge ·ªïn ƒë·ªãnh
# =============================================================================

set -e

# Colors for beautiful output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
WHITE='\033[1;37m'
BOLD='\033[1m'
NC='\033[0m' # No Color

echo -e "${WHITE}${BOLD}üî• ULTIMATE AZURE SQL EDGE FOR M3 MAX${NC}"
echo "=================================================================="
echo -e "${CYAN}üéØ Target: Azure SQL Edge ARM64 - Ultra Stable & Optimized${NC}"
echo -e "${CYAN}üíé Optimization: 8GB RAM + 8 CPU Cores + Maximum Stability${NC}"
echo ""
echo -e "${YELLOW}‚ö†Ô∏è  Script n√†y s·∫Ω X√ìA S·∫†CH t·∫•t c·∫£ Docker v√† t·∫°o SQL Edge t·ªëi ∆∞u${NC}"
echo -e "${YELLOW}‚ö†Ô∏è  V·ªõi c·∫•u h√¨nh ƒë·∫∑c bi·ªát ƒë·ªÉ tr√°nh SIGABRT crash${NC}"
echo -e "${YELLOW}‚ö†Ô∏è  B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën ti·∫øp t·ª•c? (y/N)${NC}"
read -p "Nh·∫≠p 'y' ƒë·ªÉ ti·∫øp t·ª•c: " -n 1 -r
echo
if [[ ! $REPLY =~ ^[Yy]$ ]]; then
    echo -e "${RED}‚ùå H·ªßy thao t√°c${NC}"
    exit 1
fi

echo ""
echo -e "${RED}${BOLD}üßπ PHASE 1: NUCLEAR DOCKER CLEANUP${NC}"
echo "================================================"

# Nuclear cleanup
echo -e "${YELLOW}üí• D·ª´ng T·∫§T C·∫¢ containers...${NC}"
docker stop $(docker ps -aq) 2>/dev/null || echo "Kh√¥ng c√≥ containers n√†o ƒëang ch·∫°y"

echo -e "${YELLOW}üóëÔ∏è  X√≥a T·∫§T C·∫¢ containers...${NC}"
docker rm $(docker ps -aq) -f 2>/dev/null || echo "Kh√¥ng c√≥ containers n√†o ƒë·ªÉ x√≥a"

echo -e "${YELLOW}üñºÔ∏è  X√≥a T·∫§T C·∫¢ images...${NC}"
docker rmi $(docker images -q) -f 2>/dev/null || echo "Kh√¥ng c√≥ images n√†o ƒë·ªÉ x√≥a"

echo -e "${YELLOW}üíæ X√≥a T·∫§T C·∫¢ volumes...${NC}"
docker volume rm $(docker volume ls -q) -f 2>/dev/null || echo "Kh√¥ng c√≥ volumes n√†o ƒë·ªÉ x√≥a"

echo -e "${YELLOW}üåê X√≥a T·∫§T C·∫¢ networks...${NC}"
docker network rm $(docker network ls --filter type=custom -q) 2>/dev/null || echo "Kh√¥ng c√≥ networks t√πy ch·ªânh n√†o"

echo -e "${YELLOW}üßΩ Docker system prune TO√ÄN B·ªò...${NC}"
docker system prune -a -f --volumes

echo -e "${YELLOW}üóÇÔ∏è  X√≥a build cache...${NC}"
docker builder prune -a -f

echo -e "${YELLOW}üîÑ Reset Docker Desktop...${NC}"
killall "Docker Desktop" 2>/dev/null || true
sleep 5

echo -e "${GREEN}‚úÖ Docker environment ƒë√£ ƒë∆∞·ª£c X√ìA S·∫†CH ho√†n to√†n${NC}"

echo ""
echo -e "${BLUE}${BOLD}üèóÔ∏è  PHASE 2: M3 MAX DOCKER OPTIMIZATION${NC}"
echo "================================================"

# Restart Docker Desktop
echo -e "${PURPLE}üîÑ Kh·ªüi ƒë·ªông l·∫°i Docker Desktop...${NC}"
open -a "Docker Desktop"
echo "Ch·ªù Docker Desktop kh·ªüi ƒë·ªông v·ªõi c·∫•u h√¨nh m·ªõi..."
sleep 25

# Wait for Docker to be ready
echo -e "${PURPLE}‚è≥ Ch·ªù Docker daemon s·∫µn s√†ng...${NC}"
for i in {1..40}; do
    if docker info >/dev/null 2>&1; then
        echo -e "${GREEN}‚úÖ Docker daemon ƒë√£ s·∫µn s√†ng${NC}"
        break
    fi
    if [ $i -eq 40 ]; then
        echo -e "${RED}‚ùå Docker daemon kh√¥ng kh·ªüi ƒë·ªông ƒë∆∞·ª£c${NC}"
        exit 1
    fi
    echo "Ch·ªù Docker daemon... ($i/40)"
    sleep 3
done

echo ""
echo -e "${PURPLE}${BOLD}üì• PHASE 3: PULL AZURE SQL EDGE ULTIMATE${NC}"
echo "================================================"

# Pull Azure SQL Edge ARM64
echo -e "${PURPLE}üöÄ Pull Azure SQL Edge ARM64 latest...${NC}"
docker pull --platform linux/arm64 mcr.microsoft.com/azure-sql-edge:latest

echo -e "${GREEN}‚úÖ Azure SQL Edge image ƒë√£ ƒë∆∞·ª£c pull th√†nh c√¥ng${NC}"

echo ""
echo -e "${CYAN}${BOLD}üåê PHASE 4: ULTIMATE NETWORK SETUP${NC}"
echo "================================================"

# Create optimized network
echo -e "${PURPLE}üåê T·∫°o network si√™u t·ªëi ∆∞u...${NC}"
docker network create \
  --driver bridge \
  --opt com.docker.network.driver.mtu=1500 \
  --opt com.docker.network.bridge.enable_icc=true \
  --opt com.docker.network.bridge.enable_ip_masquerade=true \
  --subnet=172.25.0.0/16 \
  --gateway=172.25.0.1 \
  tinhkhoan_ultimate_network

echo -e "${GREEN}‚úÖ Network 'tinhkhoan_ultimate_network' ƒë√£ t·∫°o${NC}"

echo ""
echo -e "${BLUE}${BOLD}üíæ PHASE 5: ULTIMATE STORAGE SETUP${NC}"
echo "================================================"

# Create optimized storage directories
echo -e "${PURPLE}üíæ T·∫°o storage directories...${NC}"
sudo mkdir -p /opt/sqlserver_m3_ultimate/data
sudo mkdir -p /opt/sqlserver_m3_ultimate/logs
sudo mkdir -p /opt/sqlserver_m3_ultimate/backup
sudo chmod -R 755 /opt/sqlserver_m3_ultimate/

# Create optimized volume
docker volume create \
  --driver local \
  sqldata_ultimate_m3_max

echo -e "${GREEN}‚úÖ Storage 'sqldata_ultimate_m3_max' ƒë√£ t·∫°o${NC}"

echo ""
echo -e "${CYAN}${BOLD}‚öôÔ∏è  PHASE 6: ULTIMATE SQL EDGE CONFIGURATION${NC}"
echo "================================================"

# Create ULTIMATE configuration for stability
echo -e "${PURPLE}üìù T·∫°o c·∫•u h√¨nh SQL Edge si√™u ·ªïn ƒë·ªãnh...${NC}"
mkdir -p /tmp/mssql_ultimate_m3_config

cat > /tmp/mssql_ultimate_m3_config/mssql.conf << 'EOF'
[EULA]
accepteula = Y

[memory]
memorylimitmb = 5120

[network]
forceencryption = 0
tcpport = 1433
ipaddress = 0.0.0.0

[sqlagent]
enabled = false

[telemetry]
customerfeedback = false

[coredump]
enabled = 0
captureminiandfull = false

[errorlog]
numerrorlogfiles = 10
errorlogsizemb = 50

[filelocation]
defaultdatadir = /var/opt/mssql/data
defaultlogdir = /var/opt/mssql/log
defaultbackupdir = /var/opt/mssql/backup

[tempdb]
defaultsize = 512
defaultgrowth = 128
numfiles = 4

[traceflag]
traceflag0 = 3226
traceflag1 = 4199
EOF

# Create stability-focused startup script
cat > /tmp/mssql_ultimate_m3_config/init_stability.sql << 'EOF'
-- ULTIMATE STABILITY CONFIGURATION FOR M3 MAX
-- T·ªëi ∆∞u cho Apple Silicon ARM64

USE master;
GO

-- Configure memory for M3 Max (5GB)
EXEC sp_configure 'show advanced options', 1;
RECONFIGURE;
GO

EXEC sp_configure 'max server memory (MB)', 5120;
RECONFIGURE;
GO

-- Configure worker threads for 8 cores
EXEC sp_configure 'max worker threads', 512;
RECONFIGURE;
GO

-- Configure parallelism for stability
EXEC sp_configure 'cost threshold for parallelism', 25;
RECONFIGURE;
GO

EXEC sp_configure 'max degree of parallelism', 4;
RECONFIGURE;
GO

-- Disable features that might cause crashes
EXEC sp_configure 'remote admin connections', 0;
RECONFIGURE;
GO

EXEC sp_configure 'backup compression default', 0;
RECONFIGURE;
GO

PRINT '‚úÖ SQL Edge ULTIMATE stability configuration applied!';
GO
EOF

echo -e "${GREEN}‚úÖ C·∫•u h√¨nh SQL Edge si√™u ·ªïn ƒë·ªãnh ƒë√£ t·∫°o${NC}"

echo ""
echo -e "${WHITE}${BOLD}üöÄ PHASE 7: LAUNCH ULTIMATE STABLE CONTAINER${NC}"
echo "================================================"

# Launch ULTIMATE stable SQL Edge container
echo -e "${PURPLE}üöÄ Kh·ªüi ƒë·ªông SQL Edge ULTIMATE container...${NC}"
docker run -d \
  --name azure_sql_edge_tinhkhoan \
  --platform linux/arm64 \
  --network tinhkhoan_ultimate_network \
  --ip 172.25.0.10 \
  --restart unless-stopped \
  --memory=6g \
  --memory-swap=6g \
  --memory-swappiness=1 \
  --cpus="6" \
  --cpu-shares=1024 \
  --oom-kill-disable=true \
  --security-opt seccomp=unconfined \
  --cap-add=SYS_PTRACE \
  --shm-size=2g \
  --ulimit nofile=65536:65536 \
  --ulimit memlock=67108864:67108864 \
  --tmpfs /tmp:noexec,nosuid,size=512m \
  -e "ACCEPT_EULA=Y" \
  -e "SA_PASSWORD=Dientoan@303" \
  -e "MSSQL_PID=Developer" \
  -e "MSSQL_AGENT_ENABLED=false" \
  -e "MSSQL_ENABLE_HADR=0" \
  -e "MSSQL_MEMORY_LIMIT_MB=5120" \
  -e "MSSQL_TCP_PORT=1433" \
  -e "MSSQL_COLLATION=SQL_Latin1_General_CP1_CI_AS" \
  -e "MSSQL_LCID=1033" \
  -e "MSSQL_DATA_DIR=/var/opt/mssql/data" \
  -e "MSSQL_LOG_DIR=/var/opt/mssql/log" \
  -e "MSSQL_BACKUP_DIR=/var/opt/mssql/backup" \
  -p 1433:1433 \
  -v sqldata_ultimate_m3_max:/var/opt/mssql/data \
  -v /opt/sqlserver_m3_ultimate/logs:/var/opt/mssql/log \
  -v /opt/sqlserver_m3_ultimate/backup:/var/opt/mssql/backup \
  -v /tmp/mssql_ultimate_m3_config:/var/opt/mssql/config \
  mcr.microsoft.com/azure-sql-edge:latest

echo -e "${GREEN}‚úÖ SQL Edge ULTIMATE container ƒë√£ ƒë∆∞·ª£c kh·ªüi ƒë·ªông${NC}"

echo ""
echo -e "${YELLOW}${BOLD}‚è≥ PHASE 8: ULTIMATE STABILITY CHECK${NC}"
echo "================================================"

# Extended stability check
echo -e "${PURPLE}üîç Th·ª±c hi·ªán stability check (3 ph√∫t)...${NC}"
sleep 60

# Check container status multiple times
echo -e "${CYAN}üìä Container status check:${NC}"
for check in {1..3}; do
    echo "Check $check/3:"
    docker ps --filter "name=azure_sql_edge_tinhkhoan" --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}" || true
    sleep 10
done

# Extended SQL connection test with patience
echo -e "${CYAN}üîå ULTIMATE stability SQL test (15 ph√∫t timeout):${NC}"
CONNECTION_SUCCESS=false

for i in {1..90}; do
    echo "üîç Stability test $i/90..."

    # Check if container is still running first
    if ! docker ps --filter "name=azure_sql_edge_tinhkhoan" --format "{{.Names}}" | grep -q azure_sql_edge_tinhkhoan; then
        echo -e "${RED}‚ùå Container ƒë√£ d·ª´ng ho·∫°t ƒë·ªông${NC}"
        echo -e "${YELLOW}üìã Container logs:${NC}"
        docker logs azure_sql_edge_tinhkhoan --tail 50
        break
    fi

    # Try SQL connection
    if sqlcmd -S localhost,1433 -U sa -P "Dientoan@303" -Q "SELECT @@VERSION" -C -t 20 >/dev/null 2>&1; then
        echo -e "${GREEN}‚úÖ SQL Edge ULTIMATE ƒë√£ s·∫µn s√†ng v√† ·ªïn ƒë·ªãnh!${NC}"
        CONNECTION_SUCCESS=true
        break
    fi

    echo "‚è≥ Ch·ªù 10 gi√¢y (container v·∫´n ch·∫°y)..."
    sleep 10
done

if [ "$CONNECTION_SUCCESS" = true ]; then
    echo ""
    echo -e "${WHITE}${BOLD}üéâ ULTIMATE SUCCESS! SQL EDGE STABLE & READY!${NC}"
    echo "=================================================================="

    # Apply stability configurations
    echo -e "${PURPLE}‚ö° √Åp d·ª•ng stability optimizations...${NC}"
    sqlcmd -S localhost,1433 -U sa -P "Dientoan@303" -i /tmp/mssql_ultimate_m3_config/init_stability.sql -C

    # Display SQL Edge information
    echo -e "${BLUE}üìã SQL Edge ULTIMATE Info:${NC}"
    sqlcmd -S localhost,1433 -U sa -P "Dientoan@303" -Q "
    SELECT
        'SQL Server Version' as Info, @@VERSION as Value
    UNION ALL
    SELECT
        'Server Name', @@SERVERNAME
    UNION ALL
    SELECT
        'Edition', SERVERPROPERTY('Edition')
    UNION ALL
    SELECT
        'Max Memory (MB)', CAST(value_in_use as VARCHAR) FROM sys.configurations WHERE name = 'max server memory (MB)'
    " -C

    # Create TinhKhoanDB with ultimate settings
    echo -e "${PURPLE}üóÑÔ∏è  T·∫°o TinhKhoanDB v·ªõi ULTIMATE stability...${NC}"
    sqlcmd -S localhost,1433 -U sa -P "Dientoan@303" -Q "
    IF NOT EXISTS (SELECT name FROM sys.databases WHERE name = 'TinhKhoanDB')
    BEGIN
        CREATE DATABASE TinhKhoanDB
        ON (
            NAME = 'TinhKhoanDB_Data',
            FILENAME = '/var/opt/mssql/data/TinhKhoanDB.mdf',
            SIZE = 512MB,
            MAXSIZE = 4096MB,
            FILEGROWTH = 128MB
        )
        LOG ON (
            NAME = 'TinhKhoanDB_Log',
            FILENAME = '/var/opt/mssql/log/TinhKhoanDB.ldf',
            SIZE = 128MB,
            MAXSIZE = 1024MB,
            FILEGROWTH = 32MB
        )
        COLLATE SQL_Latin1_General_CP1_CI_AS

        -- Set database for maximum stability
        ALTER DATABASE TinhKhoanDB SET RECOVERY SIMPLE
        ALTER DATABASE TinhKhoanDB SET PAGE_VERIFY CHECKSUM
        ALTER DATABASE TinhKhoanDB SET AUTO_CREATE_STATISTICS ON
        ALTER DATABASE TinhKhoanDB SET AUTO_UPDATE_STATISTICS ON

        PRINT '‚úÖ TinhKhoanDB created with ULTIMATE stability'
    END
    ELSE
        PRINT 'TinhKhoanDB already exists'
    " -C

    # Show performance stats
    echo -e "${BLUE}üìä ULTIMATE Performance Stats:${NC}"
    docker stats azure_sql_edge_tinhkhoan --no-stream --format "table {{.Container}}\t{{.CPUPerc}}\t{{.MemUsage}}\t{{.MemPerc}}\t{{.NetIO}}\t{{.BlockIO}}"

    echo ""
    echo -e "${WHITE}${BOLD}üî• ULTIMATE STABLE ENVIRONMENT READY!${NC}"
    echo "=================================================================="
    echo -e "${CYAN}üíé Azure SQL Edge - ULTIMATE Stability for M3 Max${NC}"
    echo -e "${CYAN}üéØ Optimized: ARM64 + 6GB RAM + 6 CPU + Anti-Crash${NC}"
    echo ""
    echo -e "${YELLOW}üìù Connection Info:${NC}"
    echo "   Server: localhost,1433"
    echo "   Username: sa"
    echo "   Password: Dientoan@303"
    echo "   Database: TinhKhoanDB"
    echo ""
    echo -e "${YELLOW}üöÄ Next Steps:${NC}"
    echo "   1. Restore database: ./restore_database_complete.sh"
    echo "   2. Start backend: ./start_backend.sh"
    echo "   3. Start frontend: cd ../Frontend/tinhkhoan-app-ui-vite && ./start_frontend.sh"
    echo ""
    echo -e "${GREEN}‚úÖ ULTIMATE STABLE SETUP COMPLETED!${NC}"

else
    echo -e "${RED}‚ùå SQL EDGE KH√îNG ·ªîN ƒê·ªäNH${NC}"
    echo -e "${YELLOW}üìã Container logs ƒë·ªÉ debug:${NC}"
    docker logs azure_sql_edge_tinhkhoan --tail 50

    echo -e "${CYAN}üí° Troubleshooting:${NC}"
    echo "   1. Restart Docker Desktop v√† tƒÉng memory"
    echo "   2. Ki·ªÉm tra Docker settings >= 8GB RAM"
    echo "   3. Th·ª≠ ch·∫°y l·∫°i script"

    exit 1
fi

echo ""
echo -e "${WHITE}${BOLD}üî• ULTIMATE SCRIPT HO√ÄN TH√ÄNH!${NC}"
