#!/bin/bash

echo "=== üìã K·∫ø ho·∫°ch ki·ªÉm th·ª≠ tri·ªÉn khai RR01 v·ªõi ki·ªÉu d·ªØ li·ªáu m·ªõi ==="

# Ph·∫ßn 1: T·∫°o d·ªØ li·ªáu m·∫´u ƒë·ªÉ ki·ªÉm th·ª≠
echo -e "\n=== üîÑ 1. T·∫°o d·ªØ li·ªáu m·∫´u RR01 ==="
cat > sample_rr01_test.csv << 'CSV_CONTENT'
CN_LOAI_I,BRCD,MA_KH,TEN_KH,SO_LDS,CCY,SO_LAV,LOAI_KH,NGAY_GIAI_NGAN,NGAY_DEN_HAN,VAMC_FLG,NGAY_XLRR,DUNO_GOC_BAN_DAU,DUNO_LAI_TICHLUY_BD,DOC_DAUKY_DA_THU_HT,DUNO_GOC_HIENTAI,DUNO_LAI_HIENTAI,DUNO_NGAN_HAN,DUNO_TRUNG_HAN,DUNO_DAI_HAN,THU_GOC,THU_LAI,BDS,DS,TSK
CN,7800,KH123,NGUY·ªÑN VƒÇN A,123.45,VND,LAV001,CN,20250601,20251231,Y,20250701,1000000.00,50000.00,25000.00,975000.00,45000.00,100000.00,400000.00,475000.00,25000.00,5000.00,500000.00,600000.00,1100000.00
CN,7800,KH124,TR·∫¶N TH·ªä B,456.78,VND,LAV002,CN,20250501,20251130,N,20250615,2000000.00,75000.00,40000.00,1960000.00,72000.00,200000.00,800000.00,960000.00,40000.00,3000.00,1000000.00,1200000.00,2200000.00
CN,7800,KH125,L√ä VƒÇN C,789.10,VND,LAV003,CN,20250401,20251031,Y,20250520,3000000.00,100000.00,60000.00,2940000.00,95000.00,300000.00,1200000.00,1440000.00,60000.00,5000.00,1500000.00,1800000.00,3300000.00
CS,7800,KH126,PH·∫†M TH·ªä D,,USD,LAV004,CS,20250301,20250930,N,20250410,500000.00,25000.00,10000.00,490000.00,23000.00,50000.00,200000.00,240000.00,10000.00,2000.00,300000.00,350000.00,650000.00
CSV_CONTENT
echo "‚úÖ ƒê√£ t·∫°o t·∫≠p tin m·∫´u v·ªõi 4 b·∫£n ghi c√≥ d·ªØ li·ªáu s·ªë v√† ng√†y th√°ng ƒëa d·∫°ng"

# Ph·∫ßn 2: Ki·ªÉm tra c·∫•u tr√∫c SQL
echo -e "\n=== üîç 2. Ki·ªÉm tra script SQL c·∫≠p nh·∫≠t c·∫•u tr√∫c ==="
if [ -f "update_rr01_datatypes.sql" ]; then
    echo "‚úÖ ƒê√£ t√¨m th·∫•y script SQL c·∫≠p nh·∫≠t c·∫•u tr√∫c"
    grep -n "ALTER TABLE RR01" update_rr01_datatypes.sql | head -5
    echo "... v√† c√°c l·ªánh kh√°c (t·ªïng c·ªông $(grep -c "ALTER TABLE RR01" update_rr01_datatypes.sql) l·ªánh ALTER)"
else
    echo "‚ùå Kh√¥ng t√¨m th·∫•y script SQL. T·∫°o m·ªõi script ƒë·ªÉ c·∫≠p nh·∫≠t c·∫•u tr√∫c b·∫£ng."
fi

# Ph·∫ßn 3: Ki·ªÉm tra m√£ ngu·ªìn C# x·ª≠ l√Ω chuy·ªÉn ƒë·ªïi ki·ªÉu d·ªØ li·ªáu
echo -e "\n=== üîç 3. Ki·ªÉm tra h√†m chuy·ªÉn ƒë·ªïi ki·ªÉu d·ªØ li·ªáu ==="
echo "Ki·ªÉm tra h√†m ConvertCsvValue trong DirectImportService.cs:"
grep -n -A 5 "underlyingType == typeof(decimal)" Services/DirectImportService.cs | head -6
echo "..."
grep -n -A 5 "underlyingType == typeof(DateTime)" Services/DirectImportService.cs | head -6
echo "‚úÖ H√†m chuy·ªÉn ƒë·ªïi ki·ªÉu d·ªØ li·ªáu ƒë√£ h·ªó tr·ª£ decimal v√† DateTime"

# Ph·∫ßn 4: T·∫°o k·ªãch b·∫£n ki·ªÉm th·ª≠ ƒë∆°n v·ªã
echo -e "\n=== üß™ 4. T·∫°o k·ªãch b·∫£n ki·ªÉm th·ª≠ ==="
cat > TestRR01DataTypes.cs << 'TEST_CODE'
using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Http;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;
using TinhKhoanApp.Api.Data;
using TinhKhoanApp.Api.Models.DataTables;
using TinhKhoanApp.Api.Models.DTOs;
using TinhKhoanApp.Api.Services;

namespace TinhKhoanApp.Api.Tests
{
    /// <summary>
    /// K·ªãch b·∫£n ki·ªÉm th·ª≠ cho RR01 v·ªõi ki·ªÉu d·ªØ li·ªáu m·ªõi
    /// </summary>
    public class TestRR01DataTypes
    {
        /// <summary>
        /// Ki·ªÉm th·ª≠ import d·ªØ li·ªáu RR01 v·ªõi c√°c ki·ªÉu d·ªØ li·ªáu m·ªõi (decimal, DateTime)
        /// </summary>
        public static async Task TestImportAndConversion()
        {
            Console.WriteLine("=== Ki·ªÉm th·ª≠ chuy·ªÉn ƒë·ªïi ki·ªÉu d·ªØ li·ªáu RR01 ===");
            
            // 1. T·∫°o m·ªôt b·∫£n ghi RR01 v·ªõi d·ªØ li·ªáu m·∫´u
            var testRecord = new RR01
            {
                NGAY_DL = DateTime.Parse("2025-07-30"),
                CN_LOAI_I = "CN",
                BRCD = "7800",
                MA_KH = "KH123",
                TEN_KH = "NGUY·ªÑN VƒÇN A",
                SO_LDS = 123.45m,
                CCY = "VND",
                SO_LAV = "LAV001",
                LOAI_KH = "CN",
                NGAY_GIAI_NGAN = DateTime.Parse("2025-06-01"),
                NGAY_DEN_HAN = DateTime.Parse("2025-12-31"),
                VAMC_FLG = "Y",
                NGAY_XLRR = DateTime.Parse("2025-07-01"),
                DUNO_GOC_BAN_DAU = 1000000.00m,
                DUNO_LAI_TICHLUY_BD = 50000.00m,
                DOC_DAUKY_DA_THU_HT = 25000.00m,
                DUNO_GOC_HIENTAI = 975000.00m,
                DUNO_LAI_HIENTAI = 45000.00m,
                DUNO_NGAN_HAN = 100000.00m,
                DUNO_TRUNG_HAN = 400000.00m,
                DUNO_DAI_HAN = 475000.00m,
                THU_GOC = 25000.00m,
                THU_LAI = 5000.00m,
                BDS = 500000.00m,
                DS = 600000.00m,
                TSK = 1100000.00m,
                FILE_NAME = "test_7800_rr01_20250730.csv"
            };
            
            // 2. Ki·ªÉm tra ki·ªÉu d·ªØ li·ªáu
            Console.WriteLine($"SO_LDS: {testRecord.SO_LDS?.GetType().Name} = {testRecord.SO_LDS}");
            Console.WriteLine($"NGAY_GIAI_NGAN: {testRecord.NGAY_GIAI_NGAN?.GetType().Name} = {testRecord.NGAY_GIAI_NGAN:yyyy-MM-dd}");
            Console.WriteLine($"DUNO_GOC_BAN_DAU: {testRecord.DUNO_GOC_BAN_DAU?.GetType().Name} = {testRecord.DUNO_GOC_BAN_DAU:N2}");
            
            // 3. Chuy·ªÉn ƒë·ªïi t·ª´ Entity sang DTO
            var dto = RR01DTO.FromEntity(testRecord);
            Console.WriteLine("\nKi·ªÉm tra chuy·ªÉn ƒë·ªïi Entity -> DTO:");
            Console.WriteLine($"DTO.SO_LDS: {dto.SO_LDS?.GetType().Name} = {dto.SO_LDS}");
            Console.WriteLine($"DTO.NGAY_GIAI_NGAN: {dto.NGAY_GIAI_NGAN?.GetType().Name} = {dto.NGAY_GIAI_NGAN:yyyy-MM-dd}");
            Console.WriteLine($"DTO.DUNO_GOC_BAN_DAU: {dto.DUNO_GOC_BAN_DAU?.GetType().Name} = {dto.DUNO_GOC_BAN_DAU:N2}");
            
            // 4. M√¥ ph·ªèng vi·ªác parse CSV ƒë·ªÉ ki·ªÉm tra ConvertCsvValue
            Console.WriteLine("\nKi·ªÉm tra m√¥ ph·ªèng parse CSV:");
            string csvLine = "CN,7800,KH123,NGUY·ªÑN VƒÇN A,123.45,VND,LAV001,CN,20250601,20251231,Y,20250701,1000000.00,50000.00,25000.00,975000.00,45000.00,100000.00,400000.00,475000.00,25000.00,5000.00,500000.00,600000.00,1100000.00";
            
            // Gi·∫£ l·∫≠p h√†m ConvertCsvValue - ƒë∆°n gi·∫£n h√≥a cho m·ª•c ƒë√≠ch ki·ªÉm th·ª≠
            decimal? ParseDecimal(string value)
            {
                if (string.IsNullOrWhiteSpace(value))
                    return null;
                    
                var normalizedValue = value.Replace(",", "").Trim();
                if (decimal.TryParse(normalizedValue, NumberStyles.Any, CultureInfo.InvariantCulture, out var result))
                    return result;
                return null;
            }
            
            DateTime? ParseDateTime(string value)
            {
                if (string.IsNullOrWhiteSpace(value))
                    return null;
                    
                string[] formats = { "yyyyMMdd", "yyyy-MM-dd", "dd/MM/yyyy" };
                if (DateTime.TryParseExact(value.Trim(), formats, CultureInfo.InvariantCulture, DateTimeStyles.None, out var result))
                    return result;
                return null;
            }
            
            var fields = csvLine.Split(',');
            var so_lds = ParseDecimal(fields[4]);
            var ngay_giai_ngan = ParseDateTime(fields[8]);
            var duno_goc = ParseDecimal(fields[12]);
            
            Console.WriteLine($"CSV Parse - SO_LDS: {so_lds?.GetType().Name} = {so_lds}");
            Console.WriteLine($"CSV Parse - NGAY_GIAI_NGAN: {ngay_giai_ngan?.GetType().Name} = {ngay_giai_ngan:yyyy-MM-dd}");
            Console.WriteLine($"CSV Parse - DUNO_GOC_BAN_DAU: {duno_goc?.GetType().Name} = {duno_goc:N2}");
            
            Console.WriteLine("\n‚úÖ Ki·ªÉm th·ª≠ ho√†n t·∫•t: C√°c ki·ªÉu d·ªØ li·ªáu ƒë√∫ng theo y√™u c·∫ßu");
        }
    }
}
TEST_CODE
echo "‚úÖ ƒê√£ t·∫°o k·ªãch b·∫£n ki·ªÉm th·ª≠ cho RR01 v·ªõi ki·ªÉu d·ªØ li·ªáu m·ªõi"

# Ph·∫ßn 5: T·∫°o SQL ƒë·ªÉ ki·ªÉm tra d·ªØ li·ªáu sau khi import
echo -e "\n=== üîç 5. T·∫°o c√¢u l·ªánh SQL ki·ªÉm tra d·ªØ li·ªáu sau khi import ==="
cat > verify_rr01_imported_data.sql << 'SQL_VERIFY'
-- Ki·ªÉm tra d·ªØ li·ªáu s·ªë v√† ng√†y trong b·∫£ng RR01 sau khi import
SELECT 
    MA_KH,
    TEN_KH,
    SO_LDS,
    NGAY_GIAI_NGAN,
    NGAY_DEN_HAN,
    NGAY_XLRR,
    DUNO_GOC_BAN_DAU,
    DUNO_LAI_TICHLUY_BD,
    DUNO_GOC_HIENTAI,
    DUNO_LAI_HIENTAI,
    DUNO_NGAN_HAN + DUNO_TRUNG_HAN + DUNO_DAI_HAN AS TONG_DU_NO,
    THU_GOC,
    THU_LAI,
    BDS + DS AS TONG_BAO_DAM,
    TSK,
    FILE_NAME,
    CREATED_DATE
FROM 
    RR01
WHERE 
    NGAY_DL = CONVERT(DATETIME, '20250730')
    AND FILE_NAME LIKE '%test%'
ORDER BY 
    MA_KH;
    
-- Ki·ªÉm tra t√≠nh to√°n v·ªõi ki·ªÉu s·ªë
SELECT
    MA_KH,
    TEN_KH,
    DUNO_GOC_BAN_DAU,
    DUNO_GOC_HIENTAI,
    (DUNO_GOC_BAN_DAU - DUNO_GOC_HIENTAI) AS GOC_DA_TRA,
    DUNO_NGAN_HAN,
    DUNO_TRUNG_HAN,
    DUNO_DAI_HAN,
    (DUNO_NGAN_HAN + DUNO_TRUNG_HAN + DUNO_DAI_HAN) AS TONG_DU_NO,
    CASE 
        WHEN DUNO_GOC_HIENTAI > 0 THEN 
            (BDS + DS) / DUNO_GOC_HIENTAI * 100 
        ELSE 0 
    END AS TY_LE_BAO_DAM
FROM
    RR01
WHERE 
    NGAY_DL = CONVERT(DATETIME, '20250730')
    AND FILE_NAME LIKE '%test%'
ORDER BY 
    MA_KH;
SQL_VERIFY
echo "‚úÖ ƒê√£ t·∫°o c√¢u l·ªánh SQL ƒë·ªÉ ki·ªÉm tra d·ªØ li·ªáu ƒë√£ import"

# Ph·∫ßn 6: T·∫°o h∆∞·ªõng d·∫´n tri·ªÉn khai
echo -e "\n=== üìù 6. H∆∞·ªõng d·∫´n tri·ªÉn khai ==="
cat > rr01_implementation_guide.md << 'GUIDE'
# H∆∞·ªõng d·∫´n tri·ªÉn khai c·∫≠p nh·∫≠t ki·ªÉu d·ªØ li·ªáu RR01

## Chu·∫©n b·ªã
1. T·∫°o b·∫£n backup c∆° s·ªü d·ªØ li·ªáu tr∆∞·ªõc khi th·ª±c hi·ªán thay ƒë·ªïi
2. ƒê·∫£m b·∫£o ƒë√£ c·∫≠p nh·∫≠t m√£ ngu·ªìn v·ªõi ki·ªÉu d·ªØ li·ªáu m·ªõi (Model v√† DTO)
3. Chu·∫©n b·ªã script SQL ƒë·ªÉ c·∫≠p nh·∫≠t c·∫•u tr√∫c b·∫£ng

## C√°c b∆∞·ªõc th·ª±c hi·ªán

### 1. C·∫≠p nh·∫≠t c·∫•u tr√∫c c∆° s·ªü d·ªØ li·ªáu
```sql
-- Th·ª±c hi·ªán script update_rr01_datatypes.sql trong SQL Server Management Studio
```

### 2. Ki·ªÉm th·ª≠ import d·ªØ li·ªáu
1. T·∫°o m·ªôt t·∫≠p tin CSV m·∫´u ƒë·ªÉ ki·ªÉm th·ª≠ (ƒë√£ c√≥ sample_rr01_test.csv)
2. S·ª≠ d·ª•ng API ho·∫∑c giao di·ªán import ƒë·ªÉ nh·∫≠p li·ªáu
3. Ki·ªÉm tra log ƒë·ªÉ x√°c nh·∫≠n kh√¥ng c√≥ l·ªói trong qu√° tr√¨nh chuy·ªÉn ƒë·ªïi ki·ªÉu d·ªØ li·ªáu

### 3. X√°c minh d·ªØ li·ªáu ƒë√£ import
1. Th·ª±c hi·ªán script verify_rr01_imported_data.sql ƒë·ªÉ ki·ªÉm tra d·ªØ li·ªáu
2. X√°c nh·∫≠n c√°c gi√° tr·ªã s·ªë v√† ng√†y th√°ng ƒë∆∞·ª£c l∆∞u tr·ªØ ch√≠nh x√°c
3. X√°c nh·∫≠n c√≥ th·ªÉ th·ª±c hi·ªán c√°c ph√©p t√≠nh tr√™n d·ªØ li·ªáu s·ªë

### 4. Ki·ªÉm th·ª≠ to√†n di·ªán
1. Ki·ªÉm tra c√°c ch·ª©c nƒÉng kh√°c li√™n quan ƒë·∫øn RR01
2. Ki·ªÉm tra b√°o c√°o v√† ph√¢n t√≠ch d·ªØ li·ªáu RR01
3. X√°c nh·∫≠n kh√¥ng c√≥ l·ªói khi hi·ªÉn th·ªã, xu·∫•t b√°o c√°o

## X·ª≠ l√Ω s·ª± c·ªë
N·∫øu g·∫∑p v·∫•n ƒë·ªÅ trong qu√° tr√¨nh tri·ªÉn khai, c√≥ th·ªÉ:
1. Kh√¥i ph·ª•c c∆° s·ªü d·ªØ li·ªáu t·ª´ b·∫£n backup
2. Ki·ªÉm tra logs ƒë·ªÉ x√°c ƒë·ªãnh l·ªói
3. Xem x√©t ch·∫°y m·ªôt ph·∫ßn script (ch·ªâ c·∫≠p nh·∫≠t m·ªôt s·ªë c·ªôt)

## X√°c nh·∫≠n ho√†n t·∫•t
Sau khi ho√†n t·∫•t tri·ªÉn khai, ki·ªÉm tra:
1. C·∫•u tr√∫c b·∫£ng RR01 ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t
2. D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c chuy·ªÉn ƒë·ªïi ƒë√∫ng ki·ªÉu
3. C√°c ch·ª©c nƒÉng li√™n quan ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng
GUIDE
echo "‚úÖ ƒê√£ t·∫°o h∆∞·ªõng d·∫´n tri·ªÉn khai chi ti·∫øt"

echo -e "\n=== ‚úÖ Ho√†n t·∫•t k·∫ø ho·∫°ch ki·ªÉm th·ª≠ tri·ªÉn khai RR01 ==="
echo "C√°c t√†i nguy√™n ƒë√£ ƒë∆∞·ª£c t·∫°o:"
echo "1. sample_rr01_test.csv - D·ªØ li·ªáu m·∫´u ƒë·ªÉ ki·ªÉm th·ª≠"
echo "2. TestRR01DataTypes.cs - K·ªãch b·∫£n ki·ªÉm th·ª≠ ƒë∆°n v·ªã"
echo "3. verify_rr01_imported_data.sql - SQL ki·ªÉm tra d·ªØ li·ªáu ƒë√£ import"
echo "4. rr01_implementation_guide.md - H∆∞·ªõng d·∫´n tri·ªÉn khai chi ti·∫øt"
echo ""
echo "B·∫°n c√≥ th·ªÉ s·ª≠ d·ª•ng c√°c t√†i nguy√™n n√†y ƒë·ªÉ tri·ªÉn khai v√† ki·ªÉm th·ª≠ c·∫≠p nh·∫≠t ki·ªÉu d·ªØ li·ªáu RR01."
