#!/bin/bash

# Script ƒë·ªÉ x√≥a h·∫øt c√°c ƒë∆°n v·ªã hi·ªán t·∫°i v√† t·∫°o l·∫°i theo s∆° ƒë·ªì h√¨nh c√¢y m·ªõi
# Restructure Organizational Units - Complete Redesign

set -e

API_BASE="http://localhost:5055/api"
LOG_FILE="restructure_units_$(date +%Y%m%d_%H%M%S).log"

echo "üöÄ Starting Organizational Units Restructuring..." | tee -a $LOG_FILE
echo "üìù Log file: $LOG_FILE" | tee -a $LOG_FILE
echo "üìÖ Started at: $(date)" | tee -a $LOG_FILE

# Function to call API with error handling
call_api() {
    local method=$1
    local endpoint=$2
    local data=$3
    local description=$4
    
    echo "üîÑ $description..." | tee -a $LOG_FILE
    
    if [ "$method" = "DELETE" ]; then
        response=$(curl -s -w "\nHTTP_STATUS:%{http_code}" -X DELETE "$API_BASE$endpoint")
    elif [ "$method" = "POST" ]; then
        response=$(curl -s -w "\nHTTP_STATUS:%{http_code}" -X POST "$API_BASE$endpoint" \
            -H "Content-Type: application/json" \
            -d "$data")
    else
        echo "‚ùå Unknown HTTP method: $method" | tee -a $LOG_FILE
        return 1
    fi
    
    http_status=$(echo "$response" | grep "HTTP_STATUS:" | cut -d: -f2)
    response_body=$(echo "$response" | sed '/HTTP_STATUS:/d')
    
    if [ "$http_status" -ge 200 ] && [ "$http_status" -lt 300 ]; then
        echo "‚úÖ Success: $description (HTTP $http_status)" | tee -a $LOG_FILE
        echo "$response_body"
        return 0
    else
        echo "‚ùå Failed: $description (HTTP $http_status)" | tee -a $LOG_FILE
        echo "Response: $response_body" | tee -a $LOG_FILE
        return 1
    fi
}

# Step 1: Backup current data
echo "" | tee -a $LOG_FILE
echo "üì¶ Step 1: Backing up current organizational units..." | tee -a $LOG_FILE
curl -s "$API_BASE/Units" > "backup_units_$(date +%Y%m%d_%H%M%S).json"
echo "‚úÖ Backup completed" | tee -a $LOG_FILE

# Step 2: Get current units for deletion (in reverse dependency order)
echo "" | tee -a $LOG_FILE
echo "üóëÔ∏è  Step 2: Deleting all current organizational units..." | tee -a $LOG_FILE

# Get all units and delete children first (by Type priority)
units_json=$(curl -s "$API_BASE/Units")

# Delete units by type priority (PGD -> PNVL2 -> PNVL1 -> CNL2 -> CNL1)
for unit_type in "PGD" "PNVL2" "PNVL1" "CNL2" "CNL1"; do
    echo "üóëÔ∏è  Deleting all $unit_type units..." | tee -a $LOG_FILE
    unit_ids=$(echo "$units_json" | jq -r ".[] | select(.Type == \"$unit_type\") | .Id")
    
    for unit_id in $unit_ids; do
        if [ "$unit_id" != "null" ] && [ "$unit_id" != "" ]; then
            call_api "DELETE" "/Units/$unit_id" "" "Delete $unit_type unit ID $unit_id" || true
            sleep 0.5
        fi
    done
done

echo "‚úÖ All existing units deleted" | tee -a $LOG_FILE

# Step 3: Create new organizational structure
echo "" | tee -a $LOG_FILE
echo "üèóÔ∏è  Step 3: Creating new organizational structure..." | tee -a $LOG_FILE

# 1. Chi nh√°nh Lai Ch√¢u (CNL1) - Root
echo "üè¢ Creating Chi nh√°nh Lai Ch√¢u (CNL1)..." | tee -a $LOG_FILE
lai_chau_data='{"Code":"CNL1_LaiChau","Name":"Chi nh√°nh Lai Ch√¢u","Type":"CNL1","ParentUnitId":null}'
lai_chau_response=$(call_api "POST" "/Units" "$lai_chau_data" "Create Chi nh√°nh Lai Ch√¢u")
lai_chau_id=$(echo "$lai_chau_response" | jq -r '.Id // .id // empty')

if [ -z "$lai_chau_id" ] || [ "$lai_chau_id" = "null" ]; then
    echo "‚ùå Failed to create Chi nh√°nh Lai Ch√¢u - cannot continue" | tee -a $LOG_FILE
    exit 1
fi

echo "‚úÖ Chi nh√°nh Lai Ch√¢u created with ID: $lai_chau_id" | tee -a $LOG_FILE

# 2. H·ªôi s·ªü (CNL2) + 7 Ph√≤ng NVL1
echo "üè¢ Creating H·ªôi s·ªü (CNL2)..." | tee -a $LOG_FILE
hoi_so_data="{\"Code\":\"CNL2_HoiSo\",\"Name\":\"H·ªôi s·ªü\",\"Type\":\"CNL2\",\"ParentUnitId\":$lai_chau_id}"
hoi_so_response=$(call_api "POST" "/Units" "$hoi_so_data" "Create H·ªôi s·ªü")
hoi_so_id=$(echo "$hoi_so_response" | jq -r '.Id // .id // empty')

if [ -z "$hoi_so_id" ] || [ "$hoi_so_id" = "null" ]; then
    echo "‚ùå Failed to create H·ªôi s·ªü" | tee -a $LOG_FILE
else
    echo "‚úÖ H·ªôi s·ªü created with ID: $hoi_so_id" | tee -a $LOG_FILE
    
    # Create 7 Ph√≤ng NVL1 under H·ªôi s·ªü
    departments_hoi_so=(
        "PNVL1_KinhDoanh:Ph√≤ng Kinh doanh"
        "PNVL1_TinDung:Ph√≤ng T√≠n d·ª•ng"
        "PNVL1_KeToan:Ph√≤ng K·∫ø to√°n"
        "PNVL1_NhanSu:Ph√≤ng Nh√¢n s·ª±"
        "PNVL1_CongNghe:Ph√≤ng C√¥ng ngh·ªá th√¥ng tin"
        "PNVL1_KiemSoat:Ph√≤ng Ki·ªÉm so√°t r·ªßi ro"
        "PNVL1_HanhChinh:Ph√≤ng H√†nh ch√≠nh"
    )
    
    for dept in "${departments_hoi_so[@]}"; do
        code=$(echo "$dept" | cut -d: -f1)
        name=$(echo "$dept" | cut -d: -f2)
        dept_data="{\"Code\":\"$code\",\"Name\":\"$name\",\"Type\":\"PNVL1\",\"ParentUnitId\":$hoi_so_id}"
        call_api "POST" "/Units" "$dept_data" "Create $name" || true
        sleep 0.3
    done
fi

# 3. CN B√¨nh L∆∞ (CNL2) + 3 Ph√≤ng NVL2
echo "üè¢ Creating CN B√¨nh L∆∞ (CNL2)..." | tee -a $LOG_FILE
binh_lu_data="{\"Code\":\"CNL2_BinhLu\",\"Name\":\"Chi nh√°nh B√¨nh L∆∞\",\"Type\":\"CNL2\",\"ParentUnitId\":$lai_chau_id}"
binh_lu_response=$(call_api "POST" "/Units" "$binh_lu_data" "Create CN B√¨nh L∆∞")
binh_lu_id=$(echo "$binh_lu_response" | jq -r '.Id // .id // empty')

if [ -z "$binh_lu_id" ] || [ "$binh_lu_id" = "null" ]; then
    echo "‚ùå Failed to create CN B√¨nh L∆∞" | tee -a $LOG_FILE
else
    echo "‚úÖ CN B√¨nh L∆∞ created with ID: $binh_lu_id" | tee -a $LOG_FILE
    
    # Create 3 Ph√≤ng NVL2 under CN B√¨nh L∆∞
    departments_binh_lu=(
        "PNVL2_BinhLu_KinhDoanh:Ph√≤ng Kinh doanh B√¨nh L∆∞"
        "PNVL2_BinhLu_TinDung:Ph√≤ng T√≠n d·ª•ng B√¨nh L∆∞"
        "PNVL2_BinhLu_HanhChinh:Ph√≤ng H√†nh ch√≠nh B√¨nh L∆∞"
    )
    
    for dept in "${departments_binh_lu[@]}"; do
        code=$(echo "$dept" | cut -d: -f1)
        name=$(echo "$dept" | cut -d: -f2)
        dept_data="{\"Code\":\"$code\",\"Name\":\"$name\",\"Type\":\"PNVL2\",\"ParentUnitId\":$binh_lu_id}"
        call_api "POST" "/Units" "$dept_data" "Create $name" || true
        sleep 0.3
    done
fi

# 4. CN Phong Th·ªï (CNL2) + 4 Ph√≤ng NVL2
echo "üè¢ Creating CN Phong Th·ªï (CNL2)..." | tee -a $LOG_FILE
phong_tho_data="{\"Code\":\"CNL2_PhongTho\",\"Name\":\"Chi nh√°nh Phong Th·ªï\",\"Type\":\"CNL2\",\"ParentUnitId\":$lai_chau_id}"
phong_tho_response=$(call_api "POST" "/Units" "$phong_tho_data" "Create CN Phong Th·ªï")
phong_tho_id=$(echo "$phong_tho_response" | jq -r '.Id // .id // empty')

if [ -z "$phong_tho_id" ] || [ "$phong_tho_id" = "null" ]; then
    echo "‚ùå Failed to create CN Phong Th·ªï" | tee -a $LOG_FILE
else
    echo "‚úÖ CN Phong Th·ªï created with ID: $phong_tho_id" | tee -a $LOG_FILE
    
    # Create 4 Ph√≤ng NVL2 under CN Phong Th·ªï
    departments_phong_tho=(
        "PNVL2_PhongTho_KinhDoanh:Ph√≤ng Kinh doanh Phong Th·ªï"
        "PNVL2_PhongTho_TinDung:Ph√≤ng T√≠n d·ª•ng Phong Th·ªï"
        "PNVL2_PhongTho_KeToan:Ph√≤ng K·∫ø to√°n Phong Th·ªï"
        "PNVL2_PhongTho_HanhChinh:Ph√≤ng H√†nh ch√≠nh Phong Th·ªï"
    )
    
    for dept in "${departments_phong_tho[@]}"; do
        code=$(echo "$dept" | cut -d: -f1)
        name=$(echo "$dept" | cut -d: -f2)
        dept_data="{\"Code\":\"$code\",\"Name\":\"$name\",\"Type\":\"PNVL2\",\"ParentUnitId\":$phong_tho_id}"
        call_api "POST" "/Units" "$dept_data" "Create $name" || true
        sleep 0.3
    done
fi

# 5-10. Additional 6 CNL2 branches
additional_branches=(
    "CNL2_SinHo:Chi nh√°nh S√¨n H·ªì"
    "CNL2_BumTo:Chi nh√°nh Bum T·ªü" 
    "CNL2_ThanUyen:Chi nh√°nh Than Uy√™n"
    "CNL2_DoanKet:Chi nh√°nh ƒêo√†n K·∫øt"
    "CNL2_TanUyen:Chi nh√°nh T√¢n Uy√™n"
    "CNL2_NamHang:Chi nh√°nh N·∫≠m H√†ng"
)

for branch in "${additional_branches[@]}"; do
    code=$(echo "$branch" | cut -d: -f1)
    name=$(echo "$branch" | cut -d: -f2)
    
    echo "üè¢ Creating $name..." | tee -a $LOG_FILE
    branch_data="{\"Code\":\"$code\",\"Name\":\"$name\",\"Type\":\"CNL2\",\"ParentUnitId\":$lai_chau_id}"
    branch_response=$(call_api "POST" "/Units" "$branch_data" "Create $name")
    branch_id=$(echo "$branch_response" | jq -r '.Id // .id // empty')
    
    if [ -z "$branch_id" ] || [ "$branch_id" = "null" ]; then
        echo "‚ùå Failed to create $name" | tee -a $LOG_FILE
    else
        echo "‚úÖ $name created with ID: $branch_id" | tee -a $LOG_FILE
        
        # Create 2 basic departments for each additional branch
        dept_kinh_doanh_data="{\"Code\":\"PNVL2_${code#CNL2_}_KinhDoanh\",\"Name\":\"Ph√≤ng Kinh doanh ${name#Chi nh√°nh }\",\"Type\":\"PNVL2\",\"ParentUnitId\":$branch_id}"
        dept_hanh_chinh_data="{\"Code\":\"PNVL2_${code#CNL2_}_HanhChinh\",\"Name\":\"Ph√≤ng H√†nh ch√≠nh ${name#Chi nh√°nh }\",\"Type\":\"PNVL2\",\"ParentUnitId\":$branch_id}"
        
        call_api "POST" "/Units" "$dept_kinh_doanh_data" "Create Ph√≤ng Kinh doanh ${name#Chi nh√°nh }" || true
        sleep 0.3
        call_api "POST" "/Units" "$dept_hanh_chinh_data" "Create Ph√≤ng H√†nh ch√≠nh ${name#Chi nh√°nh }" || true
        sleep 0.3
    fi
done

# Step 4: Verification
echo "" | tee -a $LOG_FILE
echo "üîç Step 4: Verifying new organizational structure..." | tee -a $LOG_FILE

new_units_count=$(curl -s "$API_BASE/Units" | jq 'length')
echo "üìä Total units created: $new_units_count" | tee -a $LOG_FILE

# Show tree structure
echo "üå≥ New organizational tree structure:" | tee -a $LOG_FILE
curl -s "$API_BASE/Units" | jq -r '.[] | "\(.Type) - \(.Name) (ID: \(.Id), Parent: \(.ParentUnitId // "None"))"' | sort | tee -a $LOG_FILE

echo "" | tee -a $LOG_FILE
echo "üéâ Organizational units restructuring completed!" | tee -a $LOG_FILE
echo "üìÖ Finished at: $(date)" | tee -a $LOG_FILE
echo "üìù Full log available in: $LOG_FILE" | tee -a $LOG_FILE
