-- =============================================
-- Script: MasterTemporalSetup.sql
-- M·ª•c ƒë√≠ch: Script master ƒë·ªÉ thi·∫øt l·∫≠p ho√†n ch·ªânh temporal tables + columnstore indexes
-- T√°c gi·∫£: Em (si√™u l·∫≠p tr√¨nh vi√™n Fullstack)
-- Ng√†y: 26/06/2025
-- Ch√∫ th√≠ch: Ch·∫°y t·∫•t c·∫£ scripts theo th·ª© t·ª± ƒë√∫ng ƒë·ªÉ ho√†n thi·ªán h·ªá th·ªëng
-- =============================================

USE master;
GO

-- Ki·ªÉm tra database t·ªìn t·∫°i
IF NOT EXISTS (SELECT name FROM sys.databases WHERE name = 'TinhKhoanDB')
BEGIN
    PRINT '‚ùå Database TinhKhoanDB kh√¥ng t·ªìn t·∫°i!';
    PRINT 'üí° T·∫°o database tr∆∞·ªõc khi ch·∫°y script n√†y.';
    RETURN;
END

USE TinhKhoanDB;
GO

PRINT 'üöÄ B·∫ÆT ƒê·∫¶U THI·∫æT L·∫¨P HO√ÄN CH·ªàNH TEMPORAL TABLES + COLUMNSTORE INDEXES';
PRINT '=================================================================================';
PRINT 'üìÖ Th·ªùi gian b·∫Øt ƒë·∫ßu: ' + CONVERT(NVARCHAR, GETDATE(), 120);
PRINT 'üë®‚Äçüíª ƒê∆∞·ª£c th·ª±c hi·ªán b·ªüi: Em (si√™u l·∫≠p tr√¨nh vi√™n Fullstack)';
PRINT 'üéØ M·ª•c ti√™u: Ho√†n thi·ªán temporal tables cho t·∫•t c·∫£ lo·∫°i d·ªØ li·ªáu th√¥';
PRINT '';

-- T·∫°o b·∫£ng log ƒë·ªÉ theo d√µi qu√° tr√¨nh th·ª±c hi·ªán
IF OBJECT_ID('dbo.ScriptExecutionLog') IS NULL
BEGIN
    CREATE TABLE dbo.ScriptExecutionLog (
        Id INT IDENTITY(1,1) PRIMARY KEY,
        StepNumber INT,
        StepName NVARCHAR(200),
        StartTime DATETIME2,
        EndTime DATETIME2,
        Status NVARCHAR(50),
        ErrorMessage NVARCHAR(MAX),
        RowsAffected BIGINT
    );

    PRINT 'üìù ƒê√£ t·∫°o b·∫£ng ScriptExecutionLog ƒë·ªÉ theo d√µi qu√° tr√¨nh th·ª±c hi·ªán';
END

-- Helper procedure ƒë·ªÉ log c√°c b∆∞·ªõc
CREATE OR ALTER PROCEDURE sp_LogStep
    @StepNumber INT,
    @StepName NVARCHAR(200),
    @Status NVARCHAR(50),
    @ErrorMessage NVARCHAR(MAX) = NULL,
    @RowsAffected BIGINT = 0
AS
BEGIN
    INSERT INTO dbo.ScriptExecutionLog (StepNumber, StepName, StartTime, EndTime, Status, ErrorMessage, RowsAffected)
    VALUES (@StepNumber, @StepName, GETDATE(), GETDATE(), @Status, @ErrorMessage, @RowsAffected);
END
GO

-- =====================================================
-- B∆Ø·ªöC 1: KI·ªÇM TRA V√Ä S·ª¨A CH·ªÆA C√ÅC B·∫¢NG HI·ªÜN C√ì
-- =====================================================

PRINT '';
PRINT 'üîß B∆Ø·ªöC 1: KI·ªÇM TRA V√Ä S·ª¨A CH·ªÆA C√ÅC B·∫¢NG HI·ªÜN C√ì';
PRINT '===============================================================================';

EXEC sp_LogStep 1, 'B·∫Øt ƒë·∫ßu ki·ªÉm tra v√† s·ª≠a ch·ªØa b·∫£ng hi·ªán c√≥', 'RUNNING';

BEGIN TRY
    -- Ch·∫°y script s·ª≠a ch·ªØa b·∫£ng hi·ªán c√≥ (n·ªôi dung t·ª´ FixExistingTemporalTables.sql)

    -- T·∫°o b·∫£ng t·∫°m ƒë·ªÉ ki·ªÉm tra tr·∫°ng th√°i
    IF OBJECT_ID('tempdb..#CurrentTableStatus') IS NOT NULL DROP TABLE #CurrentTableStatus;

    CREATE TABLE #CurrentTableStatus (
        TableName NVARCHAR(128),
        IsTemporal BIT,
        HasColumnstore BIT,
        HistoryTableName NVARCHAR(128),
        RowCount BIGINT,
        NeedsUpdate BIT
    );

    -- Ki·ªÉm tra c√°c b·∫£ng hi·ªán t·∫°i
    INSERT INTO #CurrentTableStatus (TableName, IsTemporal, HasColumnstore, HistoryTableName, RowCount, NeedsUpdate)
    SELECT
        t.name AS TableName,
        CASE WHEN t.temporal_type = 2 THEN 1 ELSE 0 END AS IsTemporal,
        CASE WHEN EXISTS (
            SELECT 1 FROM sys.indexes i
            WHERE i.object_id = t.object_id AND i.type IN (5,6)
        ) THEN 1 ELSE 0 END AS HasColumnstore,
        h.name AS HistoryTableName,
        ISNULL(p.rows, 0) AS RowCount,
        CASE WHEN t.temporal_type != 2 OR NOT EXISTS (
            SELECT 1 FROM sys.indexes i
            WHERE i.object_id = t.object_id AND i.type IN (5,6)
        ) THEN 1 ELSE 0 END AS NeedsUpdate
    FROM sys.tables t
    LEFT JOIN sys.tables h ON t.history_table_id = h.object_id
    LEFT JOIN sys.partitions p ON t.object_id = p.object_id AND p.index_id IN (0,1)
    WHERE t.name IN ('ImportedDataRecords', 'ImportedDataItems', 'RawDataImports')
       OR t.name LIKE '%_RawData';

    -- S·ª≠a ch·ªØa ImportedDataRecords
    IF EXISTS (SELECT 1 FROM #CurrentTableStatus WHERE TableName = 'ImportedDataRecords' AND IsTemporal = 0)
    BEGIN
        PRINT '  üîß Chuy·ªÉn ƒë·ªïi ImportedDataRecords sang Temporal Table...';

        -- Disable system versioning if exists
        IF EXISTS (SELECT 1 FROM sys.tables WHERE name = 'ImportedDataRecords' AND temporal_type > 0)
        BEGIN
            BEGIN TRY
                ALTER TABLE [ImportedDataRecords] SET (SYSTEM_VERSIONING = OFF);
            END TRY
            BEGIN CATCH
                -- Ignore error if already off
            END CATCH
        END

        -- Add temporal columns if not exists
        IF NOT EXISTS (SELECT 1 FROM sys.columns WHERE name = 'SysStartTime' AND object_id = OBJECT_ID('ImportedDataRecords'))
        BEGIN
            ALTER TABLE [ImportedDataRecords] ADD
                [SysStartTime] DATETIME2 GENERATED ALWAYS AS ROW START HIDDEN NOT NULL DEFAULT SYSUTCDATETIME(),
                [SysEndTime] DATETIME2 GENERATED ALWAYS AS ROW END HIDDEN NOT NULL DEFAULT CONVERT(DATETIME2, '9999-12-31 23:59:59.9999999');
        END

        -- Add period if not exists
        BEGIN TRY
            ALTER TABLE [ImportedDataRecords]
            ADD PERIOD FOR SYSTEM_TIME ([SysStartTime], [SysEndTime]);
        END TRY
        BEGIN CATCH
            -- Period might already exist
        END CATCH

        -- Enable system versioning
        BEGIN TRY
            ALTER TABLE [ImportedDataRecords]
            SET (SYSTEM_VERSIONING = ON (HISTORY_TABLE = [dbo].[ImportedDataRecords_History]));
            PRINT '    ‚úÖ ImportedDataRecords ƒë√£ ƒë∆∞·ª£c chuy·ªÉn ƒë·ªïi sang Temporal Table';
        END TRY
        BEGIN CATCH
            PRINT '    ‚ö†Ô∏è ImportedDataRecords: ' + ERROR_MESSAGE();
        END CATCH
    END

    -- S·ª≠a ch·ªØa ImportedDataItems
    IF EXISTS (SELECT 1 FROM #CurrentTableStatus WHERE TableName = 'ImportedDataItems' AND IsTemporal = 0)
    BEGIN
        PRINT '  üîß Chuy·ªÉn ƒë·ªïi ImportedDataItems sang Temporal Table...';

        -- Disable system versioning if exists
        IF EXISTS (SELECT 1 FROM sys.tables WHERE name = 'ImportedDataItems' AND temporal_type > 0)
        BEGIN
            BEGIN TRY
                ALTER TABLE [ImportedDataItems] SET (SYSTEM_VERSIONING = OFF);
            END TRY
            BEGIN CATCH
                -- Ignore error if already off
            END CATCH
        END

        -- Add temporal columns if not exists
        IF NOT EXISTS (SELECT 1 FROM sys.columns WHERE name = 'SysStartTime' AND object_id = OBJECT_ID('ImportedDataItems'))
        BEGIN
            ALTER TABLE [ImportedDataItems] ADD
                [SysStartTime] DATETIME2 GENERATED ALWAYS AS ROW START HIDDEN NOT NULL DEFAULT SYSUTCDATETIME(),
                [SysEndTime] DATETIME2 GENERATED ALWAYS AS ROW END HIDDEN NOT NULL DEFAULT CONVERT(DATETIME2, '9999-12-31 23:59:59.9999999');
        END

        -- Add period if not exists
        BEGIN TRY
            ALTER TABLE [ImportedDataItems]
            ADD PERIOD FOR SYSTEM_TIME ([SysStartTime], [SysEndTime]);
        END TRY
        BEGIN CATCH
            -- Period might already exist
        END CATCH

        -- Enable system versioning
        BEGIN TRY
            ALTER TABLE [ImportedDataItems]
            SET (SYSTEM_VERSIONING = ON (HISTORY_TABLE = [dbo].[ImportedDataItems_History]));
            PRINT '    ‚úÖ ImportedDataItems ƒë√£ ƒë∆∞·ª£c chuy·ªÉn ƒë·ªïi sang Temporal Table';
        END TRY
        BEGIN CATCH
            PRINT '    ‚ö†Ô∏è ImportedDataItems: ' + ERROR_MESSAGE();
        END CATCH
    END

    EXEC sp_LogStep 1, 'Ho√†n th√†nh ki·ªÉm tra v√† s·ª≠a ch·ªØa b·∫£ng hi·ªán c√≥', 'SUCCESS', NULL, @@ROWCOUNT;

END TRY
BEGIN CATCH
    EXEC sp_LogStep 1, 'L·ªói ki·ªÉm tra v√† s·ª≠a ch·ªØa b·∫£ng hi·ªán c√≥', 'ERROR', ERROR_MESSAGE(), 0;
    PRINT '‚ùå L·ªói B∆Ø·ªöC 1: ' + ERROR_MESSAGE();
END CATCH

-- =====================================================
-- B∆Ø·ªöC 2: T·∫†O TEMPORAL TABLES CHO D·ªÆ LI·ªÜU TH√î
-- =====================================================

PRINT '';
PRINT 'üìä B∆Ø·ªöC 2: T·∫†O TEMPORAL TABLES CHO D·ªÆ LI·ªÜU TH√î';
PRINT '===============================================================================';

EXEC sp_LogStep 2, 'B·∫Øt ƒë·∫ßu t·∫°o temporal tables cho d·ªØ li·ªáu th√¥', 'RUNNING';

BEGIN TRY
    -- Danh s√°ch c√°c lo·∫°i d·ªØ li·ªáu th√¥
    DECLARE @RawDataTypes TABLE (
        DataType NVARCHAR(20),
        TableName NVARCHAR(50),
        Description NVARCHAR(200)
    );

    INSERT INTO @RawDataTypes VALUES
        ('BC57', 'BC57_RawData', 'Sao k√™ L√£i d·ª± thu - D·ªØ li·ªáu l√£i su·∫•t'),
        ('DPDA', 'DPDA_RawData', 'D·ªØ li·ªáu sao k√™ ph√°t h√†nh th·∫ª'),
        ('DP01', 'DP01_RawData', 'D·ªØ li·ªáu Ti·ªÅn g·ª≠i'),
        ('DB01', 'DB01_RawData', 'Sao k√™ TSDB v√† Kh√¥ng TSDB'),
        ('LN01', 'LN01_RawData', 'D·ªØ li·ªáu LOAN - Danh m·ª•c t√≠n d·ª•ng'),
        ('GL01', 'GL01_RawData', 'D·ªØ li·ªáu b√∫t to√°n GDV'),
        ('EI01', 'EI01_RawData', 'D·ªØ li·ªáu mobile banking');

    DECLARE @DataType NVARCHAR(20), @TableName NVARCHAR(50), @Description NVARCHAR(200);
    DECLARE @HistoryTableName NVARCHAR(50), @SQL NVARCHAR(MAX);
    DECLARE @TablesCreated INT = 0;

    DECLARE create_tables_cursor CURSOR FOR
    SELECT DataType, TableName, Description FROM @RawDataTypes;

    OPEN create_tables_cursor;
    FETCH NEXT FROM create_tables_cursor INTO @DataType, @TableName, @Description;

    WHILE @@FETCH_STATUS = 0
    BEGIN
        SET @HistoryTableName = @TableName + '_History';

        -- Ki·ªÉm tra xem b·∫£ng ƒë√£ t·ªìn t·∫°i ch∆∞a
        IF NOT EXISTS (SELECT * FROM sys.tables WHERE name = @TableName)
        BEGIN
            PRINT '  üìä T·∫°o ' + @DataType + ' - ' + @Description;

            BEGIN TRY
                -- T·∫°o Temporal Table
                SET @SQL = '
                CREATE TABLE [dbo].[' + @TableName + ']
                (
                    [Id] BIGINT IDENTITY(1,1) NOT NULL,
                    [ImportBatchId] UNIQUEIDENTIFIER NOT NULL DEFAULT NEWID(),
                    [RowNumber] INT NOT NULL,
                    [RawDataLine] NVARCHAR(MAX) NOT NULL,
                    [ParsedData] NVARCHAR(MAX) NULL,
                    [DataType] NVARCHAR(20) NOT NULL DEFAULT ''' + @DataType + ''',

                    -- Th√¥ng tin ng√†y th√°ng
                    [StatementDate] DATE NOT NULL,
                    [ImportDate] DATETIME2(7) NOT NULL DEFAULT SYSUTCDATETIME(),
                    [ProcessedDate] DATETIME2(7) NULL,

                    -- Th√¥ng tin c∆° c·∫•u t·ªï ch·ª©c
                    [BranchCode] NVARCHAR(10) NULL,
                    [DepartmentCode] NVARCHAR(10) NULL,
                    [EmployeeCode] NVARCHAR(20) NULL,
                    [UnitCode] NVARCHAR(10) NULL,

                    -- D·ªØ li·ªáu s·ªë li·ªáu
                    [Amount] DECIMAL(18,4) NULL,
                    [Quantity] INT NULL,
                    [Rate] DECIMAL(10,6) NULL,
                    [Ratio] DECIMAL(10,6) NULL,

                    -- Tr·∫°ng th√°i x·ª≠ l√Ω
                    [IsProcessed] BIT NOT NULL DEFAULT 0,
                    [IsValid] BIT NOT NULL DEFAULT 1,
                    [ValidationErrors] NVARCHAR(1000) NULL,
                    [ProcessingNotes] NVARCHAR(500) NULL,

                    -- Metadata
                    [SourceFileName] NVARCHAR(255) NULL,
                    [FileSize] BIGINT NULL,
                    [CheckSum] NVARCHAR(32) NULL,
                    [CreatedBy] NVARCHAR(100) NOT NULL DEFAULT ''SYSTEM'',
                    [CreatedDate] DATETIME2(7) NOT NULL DEFAULT SYSUTCDATETIME(),
                    [LastModifiedBy] NVARCHAR(100) NOT NULL DEFAULT ''SYSTEM'',
                    [LastModifiedDate] DATETIME2(7) NOT NULL DEFAULT SYSUTCDATETIME(),
                    [IsDeleted] BIT NOT NULL DEFAULT 0,

                    -- Temporal Table Columns
                    [ValidFrom] DATETIME2(7) GENERATED ALWAYS AS ROW START HIDDEN NOT NULL,
                    [ValidTo] DATETIME2(7) GENERATED ALWAYS AS ROW END HIDDEN NOT NULL,

                    CONSTRAINT [PK_' + @TableName + '] PRIMARY KEY CLUSTERED ([Id]),
                    PERIOD FOR SYSTEM_TIME ([ValidFrom], [ValidTo])
                )
                WITH (
                    SYSTEM_VERSIONING = ON (
                        HISTORY_TABLE = [dbo].[' + @HistoryTableName + '],
                        DATA_CONSISTENCY_CHECK = ON,
                        HISTORY_RETENTION_PERIOD = 7 YEARS
                    )
                );';

                EXEC sp_executesql @SQL;
                SET @TablesCreated = @TablesCreated + 1;

                -- T·∫°o Columnstore Index cho History Table
                SET @SQL = 'CREATE CLUSTERED COLUMNSTORE INDEX [CCI_' + @HistoryTableName + ']
                           ON [dbo].[' + @HistoryTableName + ']
                           WITH (COMPRESSION_DELAY = 0, MAXDOP = 4);';
                EXEC sp_executesql @SQL;

                PRINT '    ‚úÖ ƒê√£ t·∫°o ' + @TableName + ' v·ªõi Temporal + Columnstore';

            END TRY
            BEGIN CATCH
                PRINT '    ‚ùå L·ªói t·∫°o ' + @TableName + ': ' + ERROR_MESSAGE();
            END CATCH
        END
        ELSE
        BEGIN
            PRINT '  ‚ö†Ô∏è B·∫£ng ' + @TableName + ' ƒë√£ t·ªìn t·∫°i';
        END

        FETCH NEXT FROM create_tables_cursor INTO @DataType, @TableName, @Description;
    END

    CLOSE create_tables_cursor;
    DEALLOCATE create_tables_cursor;

    EXEC sp_LogStep 2, 'Ho√†n th√†nh t·∫°o temporal tables cho d·ªØ li·ªáu th√¥', 'SUCCESS', NULL, @TablesCreated;

END TRY
BEGIN CATCH
    EXEC sp_LogStep 2, 'L·ªói t·∫°o temporal tables cho d·ªØ li·ªáu th√¥', 'ERROR', ERROR_MESSAGE(), 0;
    PRINT '‚ùå L·ªói B∆Ø·ªöC 2: ' + ERROR_MESSAGE();
END CATCH

-- =====================================================
-- B∆Ø·ªöC 3: T·∫†O COLUMNSTORE INDEXES CHO T·∫§T C·∫¢ B·∫¢NG
-- =====================================================

PRINT '';
PRINT 'üìä B∆Ø·ªöC 3: T·∫†O COLUMNSTORE INDEXES CHO T·∫§T C·∫¢ B·∫¢NG';
PRINT '===============================================================================';

EXEC sp_LogStep 3, 'B·∫Øt ƒë·∫ßu t·∫°o columnstore indexes', 'RUNNING';

BEGIN TRY
    DECLARE @IndexesCreated INT = 0;
    DECLARE @CSTableName NVARCHAR(128), @CSIndexSQL NVARCHAR(MAX);

    -- T·∫°o columnstore cho c√°c b·∫£ng ch∆∞a c√≥
    DECLARE cs_cursor CURSOR FOR
    SELECT t.name
    FROM sys.tables t
    WHERE (t.name LIKE '%_RawData' OR t.name IN ('ImportedDataRecords', 'ImportedDataItems'))
      AND NOT EXISTS (
          SELECT 1 FROM sys.indexes i
          WHERE i.object_id = t.object_id AND i.type IN (5,6)
      );

    OPEN cs_cursor;
    FETCH NEXT FROM cs_cursor INTO @CSTableName;

    WHILE @@FETCH_STATUS = 0
    BEGIN
        BEGIN TRY
            PRINT '  üìä T·∫°o Columnstore Index cho: ' + @CSTableName;

            SET @CSIndexSQL = 'CREATE NONCLUSTERED COLUMNSTORE INDEX [NCCI_' + @CSTableName + '_Analytics]
                              ON [dbo].[' + @CSTableName + '] ([Id], [StatementDate])
                              WITH (COMPRESSION_DELAY = 0);';

            EXEC sp_executesql @CSIndexSQL;
            SET @IndexesCreated = @IndexesCreated + 1;

            PRINT '    ‚úÖ ƒê√£ t·∫°o Columnstore Index cho: ' + @CSTableName;

        END TRY
        BEGIN CATCH
            PRINT '    ‚ö†Ô∏è Kh√¥ng th·ªÉ t·∫°o Columnstore Index cho ' + @CSTableName + ': ' + ERROR_MESSAGE();
        END CATCH

        FETCH NEXT FROM cs_cursor INTO @CSTableName;
    END

    CLOSE cs_cursor;
    DEALLOCATE cs_cursor;

    EXEC sp_LogStep 3, 'Ho√†n th√†nh t·∫°o columnstore indexes', 'SUCCESS', NULL, @IndexesCreated;

END TRY
BEGIN CATCH
    EXEC sp_LogStep 3, 'L·ªói t·∫°o columnstore indexes', 'ERROR', ERROR_MESSAGE(), 0;
    PRINT '‚ùå L·ªói B∆Ø·ªöC 3: ' + ERROR_MESSAGE();
END CATCH

-- =====================================================
-- B∆Ø·ªöC 4: T·∫†O STORED PROCEDURES V√Ä VIEWS
-- =====================================================

PRINT '';
PRINT '‚ö° B∆Ø·ªöC 4: T·∫†O STORED PROCEDURES V√Ä VIEWS';
PRINT '===============================================================================';

EXEC sp_LogStep 4, 'B·∫Øt ƒë·∫ßu t·∫°o stored procedures v√† views', 'RUNNING';

BEGIN TRY
    -- Stored Procedure: B√°o c√°o tr·∫°ng th√°i temporal tables
    CREATE OR ALTER PROCEDURE [dbo].[sp_TemporalTablesReport]
    AS
    BEGIN
        SET NOCOUNT ON;

        PRINT 'üìä B√ÅO C√ÅO TR·∫†NG TH√ÅI TEMPORAL TABLES + COLUMNSTORE INDEXES';
        PRINT '===============================================================================';

        -- B√°o c√°o chi ti·∫øt
        SELECT
            t.name AS [T√™n B·∫£ng],
            CASE t.temporal_type
                WHEN 0 THEN '‚ùå Kh√¥ng'
                WHEN 1 THEN 'üìù History'
                WHEN 2 THEN '‚úÖ Temporal'
            END AS [Temporal],
            CASE WHEN EXISTS (
                SELECT 1 FROM sys.indexes i
                WHERE i.object_id = t.object_id AND i.type IN (5,6)
            ) THEN '‚úÖ C√≥' ELSE '‚ùå Kh√¥ng' END AS [Columnstore],
            h.name AS [B·∫£ng L·ªãch S·ª≠],
            FORMAT(ISNULL(p.rows, 0), 'N0') AS [S·ªë D√≤ng],
            FORMAT(ISNULL(ph.rows, 0), 'N0') AS [D√≤ng L·ªãch S·ª≠]
        FROM sys.tables t
        LEFT JOIN sys.tables h ON t.history_table_id = h.object_id
        LEFT JOIN sys.partitions p ON t.object_id = p.object_id AND p.index_id IN (0,1)
        LEFT JOIN sys.partitions ph ON h.object_id = ph.object_id AND ph.index_id IN (0,1)
        WHERE t.name NOT LIKE '%_History'
        ORDER BY
            CASE WHEN t.name LIKE '%RawData' THEN 1
                 WHEN t.name LIKE 'ImportedData%' THEN 2
                 ELSE 3 END,
            t.name;
    END
    GO

    -- View t·ªïng h·ª£p d·ªØ li·ªáu th√¥
    CREATE OR ALTER VIEW [dbo].[vw_RawDataSummary] AS
    SELECT
        'T·ªïng quan d·ªØ li·ªáu th√¥' AS [Lo·∫°i B√°o C√°o],
        COUNT(*) AS [S·ªë B·∫£ng Temporal],
        SUM(CASE WHEN EXISTS (
            SELECT 1 FROM sys.indexes i
            WHERE i.object_id = t.object_id AND i.type IN (5,6)
        ) THEN 1 ELSE 0 END) AS [S·ªë B·∫£ng C√≥ Columnstore],
        SUM(ISNULL(p.rows, 0)) AS [T·ªïng S·ªë D√≤ng]
    FROM sys.tables t
    LEFT JOIN sys.partitions p ON t.object_id = p.object_id AND p.index_id IN (0,1)
    WHERE t.temporal_type = 2
      AND (t.name LIKE '%_RawData' OR t.name LIKE 'ImportedData%');
    GO

    EXEC sp_LogStep 4, 'Ho√†n th√†nh t·∫°o stored procedures v√† views', 'SUCCESS', NULL, 2;

END TRY
BEGIN CATCH
    EXEC sp_LogStep 4, 'L·ªói t·∫°o stored procedures v√† views', 'ERROR', ERROR_MESSAGE(), 0;
    PRINT '‚ùå L·ªói B∆Ø·ªöC 4: ' + ERROR_MESSAGE();
END CATCH

-- =====================================================
-- B∆Ø·ªöC 5: B√ÅO C√ÅO K·∫æT QU·∫¢ CU·ªêI C√ôNG
-- =====================================================

PRINT '';
PRINT 'üéâ B∆Ø·ªöC 5: B√ÅO C√ÅO K·∫æT QU·∫¢ CU·ªêI C√ôNG';
PRINT '===============================================================================';

EXEC sp_LogStep 5, 'B·∫Øt ƒë·∫ßu t·∫°o b√°o c√°o cu·ªëi c√πng', 'RUNNING';

-- Ch·∫°y b√°o c√°o tr·∫°ng th√°i
EXEC [dbo].[sp_TemporalTablesReport];

-- Hi·ªÉn th·ªã view t·ªïng h·ª£p
PRINT '';
PRINT 'üìã T·ªîNG K·∫æT D·ªÆ LI·ªÜU TH√î:';
SELECT * FROM [dbo].[vw_RawDataSummary];

-- Hi·ªÉn th·ªã log th·ª±c hi·ªán
PRINT '';
PRINT 'üìù LOG TH·ª∞C HI·ªÜN:';
SELECT
    StepNumber AS [B∆∞·ªõc],
    StepName AS [T√™n B∆∞·ªõc],
    Status AS [Tr·∫°ng Th√°i],
    ISNULL(ErrorMessage, 'Kh√¥ng c√≥ l·ªói') AS [L·ªói],
    RowsAffected AS [D√≤ng ·∫¢nh H∆∞·ªüng],
    DATEDIFF(SECOND, StartTime, EndTime) AS [Th·ªùi Gian (gi√¢y)]
FROM dbo.ScriptExecutionLog
ORDER BY StepNumber;

EXEC sp_LogStep 5, 'Ho√†n th√†nh b√°o c√°o cu·ªëi c√πng', 'SUCCESS';

PRINT '';
PRINT 'üéØ K·∫æT QU·∫¢ CU·ªêI C√ôNG:';
PRINT '‚Ä¢ ‚úÖ ƒê√£ ho√†n thi·ªán temporal tables cho t·∫•t c·∫£ lo·∫°i d·ªØ li·ªáu th√¥';
PRINT '‚Ä¢ ‚úÖ ƒê√£ √°p d·ª•ng columnstore indexes ƒë·ªÉ t·ªëi ∆∞u hi·ªáu nƒÉng';
PRINT '‚Ä¢ ‚úÖ ƒê√£ t·∫°o stored procedures v√† views h·ªó tr·ª£';
PRINT '‚Ä¢ ‚úÖ Retention policy: 7 nƒÉm cho d·ªØ li·ªáu l·ªãch s·ª≠';
PRINT '';
PRINT 'üìÖ Th·ªùi gian ho√†n th√†nh: ' + CONVERT(NVARCHAR, GETDATE(), 120);
PRINT 'üöÄ H·ªÜ TH·ªêNG S·∫¥N S√ÄNG CHO VI·ªÜC X·ª¨ L√ù D·ªÆ LI·ªÜU TH√î V·ªöI HI·ªÜU NƒÇNG T·ªêI ∆ØU!';
PRINT '';
PRINT 'üí° S·ª≠ d·ª•ng sp_TemporalTablesReport ƒë·ªÉ ki·ªÉm tra tr·∫°ng th√°i b·∫•t k·ª≥ l√∫c n√†o.';

GO
