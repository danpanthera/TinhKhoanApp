-- =====================================================
-- üöÄ SCRIPT CHUY·ªÇN ƒê·ªîI HO√ÄN TO√ÄN SANG TEMPORAL TABLES + COLUMNSTORE INDEXES
-- ƒê∆∞·ª£c thi·∫øt k·∫ø cho SQL Server 2016+ (h·ªó tr·ª£ Docker)
-- T·ªëi ∆∞u h√≥a cho hi·ªáu nƒÉng cao v·ªõi l∆∞·ª£ng d·ªØ li·ªáu l·ªõn
-- =====================================================

USE [TinhKhoanDB]
GO

PRINT 'üöÄ B·∫Øt ƒë·∫ßu chuy·ªÉn ƒë·ªïi sang Temporal Tables + Columnstore Indexes...'

-- =====================================================
-- B∆Ø·ªöC 1: T·∫†O TEMPORAL TABLES CHO D·ªÆ LI·ªÜU TH√î
-- =====================================================

-- Ki·ªÉm tra v√† t·∫°o b·∫£ng RawDataImports v·ªõi Temporal Table
IF NOT EXISTS (SELECT * FROM sys.tables WHERE name = 'RawDataImports')
BEGIN
    PRINT 'üìä T·∫°o b·∫£ng RawDataImports v·ªõi Temporal Table...'
    
    CREATE TABLE [dbo].[RawDataImports]
    (
        [Id] BIGINT IDENTITY(1,1) NOT NULL PRIMARY KEY CLUSTERED,
        [ImportDate] DATETIME2(7) NOT NULL,
        [BranchCode] NVARCHAR(10) NOT NULL,
        [DepartmentCode] NVARCHAR(10) NOT NULL,
        [EmployeeCode] NVARCHAR(20) NOT NULL,
        [KpiCode] NVARCHAR(20) NOT NULL,
        [KpiValue] DECIMAL(18,4) NOT NULL,
        [Unit] NVARCHAR(10) NULL,
        [Target] DECIMAL(18,4) NULL,
        [Achievement] DECIMAL(18,4) NULL,
        [Score] DECIMAL(5,2) NULL,
        [DataType] NVARCHAR(20) NOT NULL,
        [StatementDate] NVARCHAR(20) NOT NULL,
        [FileName] NVARCHAR(255) NULL,
        [SourceSystem] NVARCHAR(50) NULL,
        [ProcessedDate] DATETIME2(7) NULL,
        [IsProcessed] BIT NOT NULL DEFAULT 0,
        [CreatedBy] NVARCHAR(50) NULL,
        [CreatedDate] DATETIME2(7) NOT NULL DEFAULT SYSUTCDATETIME(),
        [ModifiedBy] NVARCHAR(50) NULL,
        [ModifiedDate] DATETIME2(7) NULL,
        
        -- üï∞Ô∏è Temporal Table Columns
        [ValidFrom] DATETIME2(7) GENERATED ALWAYS AS ROW START NOT NULL,
        [ValidTo] DATETIME2(7) GENERATED ALWAYS AS ROW END NOT NULL,
        
        PERIOD FOR SYSTEM_TIME ([ValidFrom], [ValidTo])
    )
    WITH (SYSTEM_VERSIONING = ON (HISTORY_TABLE = [dbo].[RawDataImports_History]));
    
    PRINT '‚úÖ ƒê√£ t·∫°o b·∫£ng RawDataImports v·ªõi Temporal Table'
END
ELSE
BEGIN
    PRINT '‚ö†Ô∏è B·∫£ng RawDataImports ƒë√£ t·ªìn t·∫°i, ki·ªÉm tra Temporal Table...'
    
    -- Ki·ªÉm tra xem b·∫£ng ƒë√£ c√≥ Temporal Table ch∆∞a
    IF NOT EXISTS (
        SELECT * FROM sys.tables t
        INNER JOIN sys.periods p ON t.object_id = p.object_id
        WHERE t.name = 'RawDataImports' AND p.name = 'SYSTEM_TIME'
    )
    BEGIN
        PRINT 'üîÑ Chuy·ªÉn ƒë·ªïi b·∫£ng RawDataImports sang Temporal Table...'
        
        -- Th√™m c·ªôt Temporal n·∫øu ch∆∞a c√≥
        IF NOT EXISTS (SELECT * FROM sys.columns WHERE object_id = OBJECT_ID('RawDataImports') AND name = 'ValidFrom')
        BEGIN
            ALTER TABLE [dbo].[RawDataImports] 
            ADD [ValidFrom] DATETIME2(7) GENERATED ALWAYS AS ROW START NOT NULL 
                CONSTRAINT DF_RawDataImports_ValidFrom DEFAULT SYSUTCDATETIME(),
                [ValidTo] DATETIME2(7) GENERATED ALWAYS AS ROW END NOT NULL 
                CONSTRAINT DF_RawDataImports_ValidTo DEFAULT '9999-12-31 23:59:59.9999999',
                PERIOD FOR SYSTEM_TIME ([ValidFrom], [ValidTo]);
        END
        
        -- B·∫≠t System Versioning
        ALTER TABLE [dbo].[RawDataImports] 
        SET (SYSTEM_VERSIONING = ON (HISTORY_TABLE = [dbo].[RawDataImports_History]));
        
        PRINT '‚úÖ ƒê√£ chuy·ªÉn ƒë·ªïi RawDataImports sang Temporal Table'
    END
    ELSE
    BEGIN
        PRINT '‚úÖ RawDataImports ƒë√£ l√† Temporal Table'
    END
END

-- =====================================================
-- B∆Ø·ªöC 2: T·∫†O COLUMNSTORE INDEXES CHO HI·ªÜU NƒÇNG CAO
-- =====================================================

PRINT 'üèóÔ∏è T·∫°o Columnstore Indexes cho t·ªëi ∆∞u hi·ªáu nƒÉng...'

-- T·∫°o Columnstore Index cho b·∫£ng ch√≠nh
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID('RawDataImports') AND name = 'CCI_RawDataImports')
BEGIN
    CREATE CLUSTERED COLUMNSTORE INDEX [CCI_RawDataImports] 
    ON [dbo].[RawDataImports];
    PRINT '‚úÖ ƒê√£ t·∫°o Clustered Columnstore Index cho RawDataImports'
END

-- T·∫°o Columnstore Index cho b·∫£ng l·ªãch s·ª≠
IF EXISTS (SELECT * FROM sys.tables WHERE name = 'RawDataImports_History')
BEGIN
    IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID('RawDataImports_History') AND name = 'CCI_RawDataImports_History')
    BEGIN
        CREATE CLUSTERED COLUMNSTORE INDEX [CCI_RawDataImports_History] 
        ON [dbo].[RawDataImports_History];
        PRINT '‚úÖ ƒê√£ t·∫°o Clustered Columnstore Index cho RawDataImports_History'
    END
END

-- =====================================================
-- B∆Ø·ªöC 3: T·∫†O TEMPORAL TABLES CHO C√ÅC LO·∫†I D·ªÆ LI·ªÜU KH√ÅC
-- =====================================================

-- Danh s√°ch c√°c lo·∫°i d·ªØ li·ªáu c·∫ßn t·∫°o Temporal Tables
DECLARE @DataTypes TABLE (DataType NVARCHAR(20), Description NVARCHAR(100))
INSERT INTO @DataTypes VALUES 
    ('LN01', 'D·ªØ li·ªáu LOAN - Danh m·ª•c t√≠n d·ª•ng'),
    ('LN02', 'Sao k√™ bi·∫øn ƒë·ªông nh√≥m n·ª£'),
    ('LN03', 'D·ªØ li·ªáu N·ª£ XLRR'),
    ('DP01', 'D·ªØ li·ªáu Ti·ªÅn g·ª≠i'),
    ('EI01', 'D·ªØ li·ªáu mobile banking'),
    ('GL01', 'D·ªØ li·ªáu b√∫t to√°n GDV'),
    ('DPDA', 'D·ªØ li·ªáu sao k√™ ph√°t h√†nh th·∫ª'),
    ('DB01', 'Sao k√™ TSDB v√† Kh√¥ng TSDB'),
    ('KH03', 'Sao k√™ Kh√°ch h√†ng ph√°p nh√¢n'),
    ('BC57', 'Sao k√™ L√£i d·ª± thu'),
    ('RR01', 'Sao k√™ d∆∞ n·ª£ g·ªëc, l√£i XLRR'),
    ('GLCB41', 'B·∫£ng c√¢n ƒë·ªëi')

DECLARE @DataType NVARCHAR(20), @Description NVARCHAR(100), @TableName NVARCHAR(50), @HistoryTableName NVARCHAR(50)
DECLARE @SQL NVARCHAR(MAX)

DECLARE data_cursor CURSOR FOR
SELECT DataType, Description FROM @DataTypes

OPEN data_cursor
FETCH NEXT FROM data_cursor INTO @DataType, @Description

WHILE @@FETCH_STATUS = 0
BEGIN
    SET @TableName = @DataType + '_Data'
    SET @HistoryTableName = @DataType + '_Data_History'
    
    PRINT 'üìä T·∫°o Temporal Table cho ' + @DataType + ' - ' + @Description
    
    IF NOT EXISTS (SELECT * FROM sys.tables WHERE name = @TableName)
    BEGIN
        SET @SQL = '
        CREATE TABLE [dbo].[' + @TableName + ']
        (
            [Id] BIGINT IDENTITY(1,1) NOT NULL PRIMARY KEY,
            [ImportId] BIGINT NOT NULL,
            [RowNumber] INT NOT NULL,
            [RawData] NVARCHAR(MAX) NOT NULL,
            [ParsedData] NVARCHAR(MAX) NULL,
            [DataType] NVARCHAR(20) NOT NULL DEFAULT ''' + @DataType + ''',
            [StatementDate] NVARCHAR(20) NOT NULL,
            [BranchCode] NVARCHAR(10) NULL,
            [DepartmentCode] NVARCHAR(10) NULL,
            [EmployeeCode] NVARCHAR(20) NULL,
            [Amount] DECIMAL(18,4) NULL,
            [Quantity] INT NULL,
            [ProcessedDate] DATETIME2(7) NULL,
            [IsProcessed] BIT NOT NULL DEFAULT 0,
            [ErrorMessage] NVARCHAR(500) NULL,
            [CreatedDate] DATETIME2(7) NOT NULL DEFAULT SYSUTCDATETIME(),
            
            -- üï∞Ô∏è Temporal Table Columns
            [ValidFrom] DATETIME2(7) GENERATED ALWAYS AS ROW START NOT NULL,
            [ValidTo] DATETIME2(7) GENERATED ALWAYS AS ROW END NOT NULL,
            
            PERIOD FOR SYSTEM_TIME ([ValidFrom], [ValidTo])
        )
        WITH (SYSTEM_VERSIONING = ON (HISTORY_TABLE = [dbo].[' + @HistoryTableName + ']));
        '
        
        EXEC sp_executesql @SQL
        PRINT '‚úÖ ƒê√£ t·∫°o Temporal Table: ' + @TableName
        
        -- T·∫°o Columnstore Index
        SET @SQL = 'CREATE CLUSTERED COLUMNSTORE INDEX [CCI_' + @TableName + '] ON [dbo].[' + @TableName + '];'
        EXEC sp_executesql @SQL
        PRINT '‚úÖ ƒê√£ t·∫°o Columnstore Index cho: ' + @TableName
        
        -- T·∫°o Columnstore Index cho History Table
        SET @SQL = 'CREATE CLUSTERED COLUMNSTORE INDEX [CCI_' + @HistoryTableName + '] ON [dbo].[' + @HistoryTableName + '];'
        EXEC sp_executesql @SQL
        PRINT '‚úÖ ƒê√£ t·∫°o Columnstore Index cho: ' + @HistoryTableName
    END
    ELSE
    BEGIN
        PRINT '‚ö†Ô∏è B·∫£ng ' + @TableName + ' ƒë√£ t·ªìn t·∫°i'
    END
    
    FETCH NEXT FROM data_cursor INTO @DataType, @Description
END

CLOSE data_cursor
DEALLOCATE data_cursor

-- =====================================================
-- B∆Ø·ªöC 4: T·∫†O INDEXES B·ªî SUNG CHO HI·ªÜU NƒÇNG
-- =====================================================

PRINT 'üîç T·∫°o c√°c indexes b·ªï sung cho hi·ªáu nƒÉng truy v·∫•n...'

-- Index cho RawDataImports
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID('RawDataImports') AND name = 'IX_RawDataImports_DataType_StatementDate')
BEGIN
    CREATE NONCLUSTERED INDEX [IX_RawDataImports_DataType_StatementDate] 
    ON [dbo].[RawDataImports] ([DataType], [StatementDate])
    INCLUDE ([BranchCode], [DepartmentCode], [EmployeeCode], [KpiValue])
    PRINT '‚úÖ ƒê√£ t·∫°o index IX_RawDataImports_DataType_StatementDate'
END

-- Index cho temporal queries
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID('RawDataImports') AND name = 'IX_RawDataImports_Temporal')
BEGIN
    CREATE NONCLUSTERED INDEX [IX_RawDataImports_Temporal] 
    ON [dbo].[RawDataImports] ([ValidFrom], [ValidTo])
    INCLUDE ([Id], [DataType], [StatementDate])
    PRINT '‚úÖ ƒê√£ t·∫°o index IX_RawDataImports_Temporal'
END

-- =====================================================
-- B∆Ø·ªöC 5: T·∫†O STORED PROCEDURES CHO TEMPORAL OPERATIONS
-- =====================================================

PRINT '‚öôÔ∏è T·∫°o stored procedures cho Temporal operations...'

-- Procedure ƒë·ªÉ l·∫•y d·ªØ li·ªáu t·∫°i th·ªùi ƒëi·ªÉm c·ª• th·ªÉ
IF EXISTS (SELECT * FROM sys.procedures WHERE name = 'sp_GetDataAsOf')
    DROP PROCEDURE [dbo].[sp_GetDataAsOf]
GO

CREATE PROCEDURE [dbo].[sp_GetDataAsOf]
    @DataType NVARCHAR(20),
    @AsOfDate DATETIME2(7),
    @BranchCode NVARCHAR(10) = NULL,
    @StatementDate NVARCHAR(20) = NULL
AS
BEGIN
    SET NOCOUNT ON;
    
    DECLARE @SQL NVARCHAR(MAX)
    
    SET @SQL = '
    SELECT * FROM [dbo].[RawDataImports] 
    FOR SYSTEM_TIME AS OF @AsOfDate
    WHERE DataType = @DataType'
    
    IF @BranchCode IS NOT NULL
        SET @SQL = @SQL + ' AND BranchCode = @BranchCode'
    
    IF @StatementDate IS NOT NULL
        SET @SQL = @SQL + ' AND StatementDate = @StatementDate'
    
    EXEC sp_executesql @SQL, 
        N'@AsOfDate DATETIME2(7), @DataType NVARCHAR(20), @BranchCode NVARCHAR(10), @StatementDate NVARCHAR(20)',
        @AsOfDate, @DataType, @BranchCode, @StatementDate
END
GO

-- Procedure ƒë·ªÉ l·∫•y l·ªãch s·ª≠ thay ƒë·ªïi
IF EXISTS (SELECT * FROM sys.procedures WHERE name = 'sp_GetDataHistory')
    DROP PROCEDURE [dbo].[sp_GetDataHistory]
GO

CREATE PROCEDURE [dbo].[sp_GetDataHistory]
    @RecordId BIGINT,
    @FromDate DATETIME2(7) = NULL,
    @ToDate DATETIME2(7) = NULL
AS
BEGIN
    SET NOCOUNT ON;
    
    IF @FromDate IS NULL SET @FromDate = '1900-01-01'
    IF @ToDate IS NULL SET @ToDate = '9999-12-31'
    
    SELECT 
        *,
        CASE 
            WHEN ValidTo = '9999-12-31 23:59:59.9999999' THEN 'CURRENT'
            ELSE 'HISTORICAL'
        END AS RecordStatus
    FROM [dbo].[RawDataImports] 
    FOR SYSTEM_TIME FROM @FromDate TO @ToDate
    WHERE Id = @RecordId
    ORDER BY ValidFrom DESC
END
GO

-- =====================================================
-- B∆Ø·ªöC 6: T·∫†O VIEWS CHO D·ªÆ LI·ªÜU HI·ªÜN T·∫†I
-- =====================================================

PRINT 'üìä T·∫°o views cho d·ªØ li·ªáu hi·ªán t·∫°i...'

-- View t·ªïng h·ª£p d·ªØ li·ªáu hi·ªán t·∫°i
IF EXISTS (SELECT * FROM sys.views WHERE name = 'vw_CurrentRawData')
    DROP VIEW [dbo].[vw_CurrentRawData]
GO

CREATE VIEW [dbo].[vw_CurrentRawData]
AS
SELECT 
    Id,
    ImportDate,
    BranchCode,
    DepartmentCode,
    EmployeeCode,
    KpiCode,
    KpiValue,
    Unit,
    Target,
    Achievement,
    Score,
    DataType,
    StatementDate,
    FileName,
    SourceSystem,
    ProcessedDate,
    IsProcessed,
    CreatedBy,
    CreatedDate,
    ModifiedBy,
    ModifiedDate,
    ValidFrom,
    ValidTo
FROM [dbo].[RawDataImports]
WHERE ValidTo = '9999-12-31 23:59:59.9999999' -- Ch·ªâ l·∫•y d·ªØ li·ªáu hi·ªán t·∫°i
GO

-- =====================================================
-- B∆Ø·ªöC 7: C·∫§U H√åNH B·∫¢O TR√å TEMPORAL TABLES
-- =====================================================

PRINT 'üîß C·∫•u h√¨nh b·∫£o tr√¨ Temporal Tables...'

-- T·∫°o job ƒë·ªÉ d·ªçn d·∫πp l·ªãch s·ª≠ c≈© (n·∫øu c·∫ßn)
-- Ch·ªâ gi·ªØ l·∫°i l·ªãch s·ª≠ trong 5 nƒÉm
DECLARE @RetentionPeriod NVARCHAR(20) = '5 YEARS'

-- L∆∞u √Ω: Trong m√¥i tr∆∞·ªùng th·ª±c t·∫ø, b·∫°n c√≥ th·ªÉ c·∫•u h√¨nh retention policy
-- ALTER TABLE [dbo].[RawDataImports] SET (SYSTEM_VERSIONING = ON (HISTORY_TABLE = [dbo].[RawDataImports_History], HISTORY_RETENTION_PERIOD = 5 YEARS))

PRINT '‚úÖ Ho√†n th√†nh c·∫•u h√¨nh b·∫£o tr√¨ Temporal Tables'

-- =====================================================
-- B∆Ø·ªöC 8: T·∫†O FUNCTIONS H·ªñ TR·ª¢
-- =====================================================

PRINT 'üõ†Ô∏è T·∫°o functions h·ªó tr·ª£ cho Temporal Tables...'

-- Function l·∫•y s·ªë l∆∞·ª£ng b·∫£n ghi theo th·ªùi gian
IF EXISTS (SELECT * FROM sys.objects WHERE name = 'fn_GetRecordCountAsOf')
    DROP FUNCTION [dbo].[fn_GetRecordCountAsOf]
GO

CREATE FUNCTION [dbo].[fn_GetRecordCountAsOf]
(
    @DataType NVARCHAR(20),
    @AsOfDate DATETIME2(7)
)
RETURNS INT
AS
BEGIN
    DECLARE @Count INT
    
    SELECT @Count = COUNT(*)
    FROM [dbo].[RawDataImports] 
    FOR SYSTEM_TIME AS OF @AsOfDate
    WHERE DataType = @DataType
    
    RETURN ISNULL(@Count, 0)
END
GO

-- =====================================================
-- HO√ÄN TH√ÄNH
-- =====================================================

PRINT 'üéâ HO√ÄN TH√ÄNH CHUY·ªÇN ƒê·ªîI SANG TEMPORAL TABLES + COLUMNSTORE INDEXES!'
PRINT 'üìä H·ªá th·ªëng ƒë√£ ƒë∆∞·ª£c t·ªëi ∆∞u h√≥a cho hi·ªáu nƒÉng cao v·ªõi:'
PRINT '   ‚úÖ Temporal Tables cho tracking l·ªãch s·ª≠ thay ƒë·ªïi'
PRINT '   ‚úÖ Columnstore Indexes cho truy v·∫•n analytical nhanh'
PRINT '   ‚úÖ Stored Procedures v√† Views h·ªó tr·ª£'
PRINT '   ‚úÖ Functions ti·ªán √≠ch'
PRINT ''
PRINT 'üöÄ H·ªá th·ªëng s·∫µn s√†ng x·ª≠ l√Ω h√†ng tri·ªáu b·∫£n ghi v·ªõi hi·ªáu nƒÉng t·ªëi ∆∞u!'

-- Hi·ªÉn th·ªã th·ªëng k√™
SELECT 
    'RawDataImports' as TableName,
    COUNT(*) as CurrentRecords,
    MIN(ValidFrom) as EarliestRecord,
    MAX(ValidFrom) as LatestRecord
FROM [dbo].[RawDataImports]

IF EXISTS (SELECT * FROM sys.tables WHERE name = 'RawDataImports_History')
BEGIN
    SELECT 
        'RawDataImports_History' as TableName,
        COUNT(*) as HistoricalRecords,
        MIN(ValidFrom) as EarliestHistory,
        MAX(ValidTo) as LatestHistory
    FROM [dbo].[RawDataImports_History]
END
