{
    "API Controller": {
        "prefix": "api-controller",
        "body": [
            "using Microsoft.AspNetCore.Mvc;",
            "using Microsoft.AspNetCore.Authorization;",
            "",
            "namespace TinhKhoanApp.Api.Controllers;",
            "",
            "[ApiController]",
            "[Route(\"api/[controller]\")]",
            "[Authorize]",
            "public class ${1:Name}Controller : ControllerBase",
            "{",
            "    private readonly ${2:IService} _${3:service};",
            "",
            "    public ${1:Name}Controller(${2:IService} ${3:service})",
            "    {",
            "        _${3:service} = ${3:service};",
            "    }",
            "",
            "    [HttpGet]",
            "    public async Task<ActionResult<IEnumerable<${4:Model}>>> GetAll()",
            "    {",
            "        var result = await _${3:service}.GetAllAsync();",
            "        return Ok(result);",
            "    }",
            "",
            "    [HttpGet(\"{id}\")]",
            "    public async Task<ActionResult<${4:Model}>> GetById(int id)",
            "    {",
            "        var result = await _${3:service}.GetByIdAsync(id);",
            "        if (result == null)",
            "            return NotFound();",
            "        return Ok(result);",
            "    }",
            "",
            "    [HttpPost]",
            "    public async Task<ActionResult<${4:Model}>> Create(${4:Model} model)",
            "    {",
            "        var result = await _${3:service}.CreateAsync(model);",
            "        return CreatedAtAction(nameof(GetById), new { id = result.Id }, result);",
            "    }",
            "",
            "    [HttpPut(\"{id}\")]",
            "    public async Task<IActionResult> Update(int id, ${4:Model} model)",
            "    {",
            "        if (id != model.Id)",
            "            return BadRequest();",
            "",
            "        await _${3:service}.UpdateAsync(model);",
            "        return NoContent();",
            "    }",
            "",
            "    [HttpDelete(\"{id}\")]",
            "    public async Task<IActionResult> Delete(int id)",
            "    {",
            "        await _${3:service}.DeleteAsync(id);",
            "        return NoContent();",
            "    }",
            "}"
        ],
        "description": "API Controller template"
    },
    "Service Interface": {
        "prefix": "service-interface",
        "body": [
            "namespace TinhKhoanApp.Api.Services;",
            "",
            "public interface I${1:Name}Service",
            "{",
            "    Task<IEnumerable<${2:Model}>> GetAllAsync();",
            "    Task<${2:Model}?> GetByIdAsync(int id);",
            "    Task<${2:Model}> CreateAsync(${2:Model} model);",
            "    Task UpdateAsync(${2:Model} model);",
            "    Task DeleteAsync(int id);",
            "    $3",
            "}"
        ],
        "description": "Service interface template"
    },
    "Service Implementation": {
        "prefix": "service-impl",
        "body": [
            "using TinhKhoanApp.Api.Data;",
            "using TinhKhoanApp.Api.Models;",
            "using Microsoft.EntityFrameworkCore;",
            "",
            "namespace TinhKhoanApp.Api.Services;",
            "",
            "public class ${1:Name}Service : I${1:Name}Service",
            "{",
            "    private readonly ApplicationDbContext _context;",
            "",
            "    public ${1:Name}Service(ApplicationDbContext context)",
            "    {",
            "        _context = context;",
            "    }",
            "",
            "    public async Task<IEnumerable<${2:Model}>> GetAllAsync()",
            "    {",
            "        return await _context.${3:DbSet}.ToListAsync();",
            "    }",
            "",
            "    public async Task<${2:Model}?> GetByIdAsync(int id)",
            "    {",
            "        return await _context.${3:DbSet}.FindAsync(id);",
            "    }",
            "",
            "    public async Task<${2:Model}> CreateAsync(${2:Model} model)",
            "    {",
            "        _context.${3:DbSet}.Add(model);",
            "        await _context.SaveChangesAsync();",
            "        return model;",
            "    }",
            "",
            "    public async Task UpdateAsync(${2:Model} model)",
            "    {",
            "        _context.Entry(model).State = EntityState.Modified;",
            "        await _context.SaveChangesAsync();",
            "    }",
            "",
            "    public async Task DeleteAsync(int id)",
            "    {",
            "        var entity = await _context.${3:DbSet}.FindAsync(id);",
            "        if (entity != null)",
            "        {",
            "            _context.${3:DbSet}.Remove(entity);",
            "            await _context.SaveChangesAsync();",
            "        }",
            "    }",
            "}"
        ],
        "description": "Service implementation template"
    },
    "Entity Model": {
        "prefix": "entity-model",
        "body": [
            "using System.ComponentModel.DataAnnotations;",
            "using System.ComponentModel.DataAnnotations.Schema;",
            "",
            "namespace TinhKhoanApp.Api.Models;",
            "",
            "[Table(\"${1:TableName}\")]",
            "public class ${2:ClassName}",
            "{",
            "    [Key]",
            "    public int Id { get; set; }",
            "",
            "    [Required]",
            "    [StringLength(${3:255})]",
            "    public string ${4:Name} { get; set; } = string.Empty;",
            "",
            "    public DateTime CreatedAt { get; set; } = DateTime.UtcNow;",
            "    public DateTime UpdatedAt { get; set; } = DateTime.UtcNow;",
            "",
            "    $5",
            "}"
        ],
        "description": "Entity model template"
    }
}
