#!/bin/bash

echo "🛠️ REBUILD TABLE STRUCTURES WITH REAL CSV COLUMN NAMES"
echo "======================================================"
echo "$(date '+%Y-%m-%d %H:%M:%S') - Starting table rebuild process"
echo ""

# Backup existing data first
echo "📦 STEP 1: BACKUP EXISTING DATA"
echo "==============================="

backup_table() {
    local table_name=$1
    echo "💾 Backing up $table_name..."

    sqlcmd -S localhost,1433 -U sa -P 'YourStrong@Password123' -C -d KhoanDB -Q "
    -- Backup current data
    SELECT * INTO ${table_name}_BACKUP_$(date +%Y%m%d_%H%M%S) FROM $table_name;
    SELECT 'Backup completed for $table_name' as Status;
    " 2>/dev/null
}

# Backup all current tables
for table in DP01 DPDA EI01 GL01 GL41 LN01 LN03 RR01; do
    backup_table $table
done

echo ""
echo "🔄 STEP 2: DROP AND RECREATE TABLES WITH REAL COLUMN NAMES"
echo "=========================================================="

# Function to create new table structure
create_new_table() {
    local table_name=$1
    local sql_file="/tmp/${table_name}_create.sql"

    echo "🏗️ Creating new structure for $table_name..."

    case $table_name in
        "DP01")
            cat > "$sql_file" << 'EOF'
-- Drop existing table and history
ALTER TABLE DP01 SET (SYSTEM_VERSIONING = OFF);
DROP TABLE IF EXISTS DP01_History;
DROP TABLE IF EXISTS DP01;

-- Create new DP01 with real column names
CREATE TABLE DP01 (
    Id INT IDENTITY(1,1) PRIMARY KEY,
    [MA_CN] NVARCHAR(500),
    [TAI_KHOAN_HACH_TOAN] NVARCHAR(500),
    [MA_KH] NVARCHAR(500),
    [TEN_KH] NVARCHAR(500),
    [DP_TYPE_NAME] NVARCHAR(500),
    [CCY] NVARCHAR(500),
    [CURRENT_BALANCE] NVARCHAR(500),
    [RATE] NVARCHAR(500),
    [SO_TAI_KHOAN] NVARCHAR(500),
    [OPENING_DATE] NVARCHAR(500),
    [MATURITY_DATE] NVARCHAR(500),
    [ADDRESS] NVARCHAR(500),
    [NOTENO] NVARCHAR(500),
    [MONTH_TERM] NVARCHAR(500),
    [TERM_DP_NAME] NVARCHAR(500),
    [TIME_DP_NAME] NVARCHAR(500),
    [MA_PGD] NVARCHAR(500),
    [TEN_PGD] NVARCHAR(500),
    [DP_TYPE_CODE] NVARCHAR(500),
    [RENEW_DATE] NVARCHAR(500),
    [CUST_TYPE] NVARCHAR(500),
    [CUST_TYPE_NAME] NVARCHAR(500),
    [CUST_TYPE_DETAIL] NVARCHAR(500),
    [CUST_DETAIL_NAME] NVARCHAR(500),
    [PREVIOUS_DP_CAP_DATE] NVARCHAR(500),
    [NEXT_DP_CAP_DATE] NVARCHAR(500),
    [ID_NUMBER] NVARCHAR(500),
    [ISSUED_BY] NVARCHAR(500),
    [ISSUE_DATE] NVARCHAR(500),
    [SEX_TYPE] NVARCHAR(500),
    [BIRTH_DATE] NVARCHAR(500),
    [TELEPHONE] NVARCHAR(500),
    [ACRUAL_AMOUNT] NVARCHAR(500),
    [ACRUAL_AMOUNT_END] NVARCHAR(500),
    [ACCOUNT_STATUS] NVARCHAR(500),
    [DRAMT] NVARCHAR(500),
    [CRAMT] NVARCHAR(500),
    [EMPLOYEE_NUMBER] NVARCHAR(500),
    [EMPLOYEE_NAME] NVARCHAR(500),
    [SPECIAL_RATE] NVARCHAR(500),
    [AUTO_RENEWAL] NVARCHAR(500),
    [CLOSE_DATE] NVARCHAR(500),
    [LOCAL_PROVIN_NAME] NVARCHAR(500),
    [LOCAL_DISTRICT_NAME] NVARCHAR(500),
    [LOCAL_WARD_NAME] NVARCHAR(500),
    [TERM_DP_TYPE] NVARCHAR(500),
    [TIME_DP_TYPE] NVARCHAR(500),
    [STATES_CODE] NVARCHAR(500),
    [ZIP_CODE] NVARCHAR(500),
    [COUNTRY_CODE] NVARCHAR(500),
    [TAX_CODE_LOCATION] NVARCHAR(500),
    [MA_CAN_BO_PT] NVARCHAR(500),
    [TEN_CAN_BO_PT] NVARCHAR(500),
    [PHONG_CAN_BO_PT] NVARCHAR(500),
    [NGUOI_NUOC_NGOAI] NVARCHAR(500),
    [QUOC_TICH] NVARCHAR(500),
    [MA_CAN_BO_AGRIBANK] NVARCHAR(500),
    [NGUOI_GIOI_THIEU] NVARCHAR(500),
    [TEN_NGUOI_GIOI_THIEU] NVARCHAR(500),
    [CONTRACT_COUTS_DAY] NVARCHAR(500),
    [SO_KY_AD_LSDB] NVARCHAR(500),
    [UNTBUSCD] NVARCHAR(500),
    [TYGIA] NVARCHAR(500),
    NGAY_DL DATE DEFAULT GETDATE(),
    CREATED_DATE DATETIME2 DEFAULT GETDATE(),
    UPDATED_DATE DATETIME2 DEFAULT GETDATE(),
    FILE_NAME NVARCHAR(255),
    ValidFrom DATETIME2 GENERATED ALWAYS AS ROW START,
    ValidTo DATETIME2 GENERATED ALWAYS AS ROW END,
    PERIOD FOR SYSTEM_TIME (ValidFrom, ValidTo)
) WITH (SYSTEM_VERSIONING = ON (HISTORY_TABLE = dbo.DP01_History));

-- Create Columnstore Index
CREATE NONCLUSTERED COLUMNSTORE INDEX IX_DP01_Columnstore
ON DP01 ([NGAY_DL], [CREATED_DATE]);
EOF
            ;;
        "DPDA")
            cat > "$sql_file" << 'EOF'
-- Drop existing table and history
ALTER TABLE DPDA SET (SYSTEM_VERSIONING = OFF);
DROP TABLE IF EXISTS DPDA_History;
DROP TABLE IF EXISTS DPDA;

-- Create new DPDA with real column names
CREATE TABLE DPDA (
    Id INT IDENTITY(1,1) PRIMARY KEY,
    [MA_CHI_NHANH] NVARCHAR(500),
    [MA_KHACH_HANG] NVARCHAR(500),
    [TEN_KHACH_HANG] NVARCHAR(500),
    [SO_TAI_KHOAN] NVARCHAR(500),
    [LOAI_THE] NVARCHAR(500),
    [SO_THE] NVARCHAR(500),
    [NGAY_NOP_DON] NVARCHAR(500),
    [NGAY_PHAT_HANH] NVARCHAR(500),
    [USER_PHAT_HANH] NVARCHAR(500),
    [TRANG_THAI] NVARCHAR(500),
    [PHAN_LOAI] NVARCHAR(500),
    [GIAO_THE] NVARCHAR(500),
    [LOAI_PHAT_HANH] NVARCHAR(500),
    NGAY_DL DATE DEFAULT GETDATE(),
    CREATED_DATE DATETIME2 DEFAULT GETDATE(),
    UPDATED_DATE DATETIME2 DEFAULT GETDATE(),
    FILE_NAME NVARCHAR(255),
    ValidFrom DATETIME2 GENERATED ALWAYS AS ROW START,
    ValidTo DATETIME2 GENERATED ALWAYS AS ROW END,
    PERIOD FOR SYSTEM_TIME (ValidFrom, ValidTo)
) WITH (SYSTEM_VERSIONING = ON (HISTORY_TABLE = dbo.DPDA_History));

-- Create Columnstore Index
CREATE NONCLUSTERED COLUMNSTORE INDEX IX_DPDA_Columnstore
ON DPDA ([NGAY_DL], [CREATED_DATE]);
EOF
            ;;
        "EI01")
            cat > "$sql_file" << 'EOF'
-- Drop existing table and history
ALTER TABLE EI01 SET (SYSTEM_VERSIONING = OFF);
DROP TABLE IF EXISTS EI01_History;
DROP TABLE IF EXISTS EI01;

-- Create new EI01 with real column names
CREATE TABLE EI01 (
    Id INT IDENTITY(1,1) PRIMARY KEY,
    [MA_CN] NVARCHAR(500),
    [MA_KH] NVARCHAR(500),
    [TEN_KH] NVARCHAR(500),
    [LOAI_KH] NVARCHAR(500),
    [SDT_EMB] NVARCHAR(500),
    [TRANG_THAI_EMB] NVARCHAR(500),
    [NGAY_DK_EMB] NVARCHAR(500),
    [SDT_OTT] NVARCHAR(500),
    [TRANG_THAI_OTT] NVARCHAR(500),
    [NGAY_DK_OTT] NVARCHAR(500),
    [SDT_SMS] NVARCHAR(500),
    [TRANG_THAI_SMS] NVARCHAR(500),
    [NGAY_DK_SMS] NVARCHAR(500),
    [SDT_SAV] NVARCHAR(500),
    [TRANG_THAI_SAV] NVARCHAR(500),
    [NGAY_DK_SAV] NVARCHAR(500),
    [SDT_LN] NVARCHAR(500),
    [TRANG_THAI_LN] NVARCHAR(500),
    [NGAY_DK_LN] NVARCHAR(500),
    [USER_EMB] NVARCHAR(500),
    [USER_OTT] NVARCHAR(500),
    [USER_SMS] NVARCHAR(500),
    [USER_SAV] NVARCHAR(500),
    [USER_LN] NVARCHAR(500),
    NGAY_DL DATE DEFAULT GETDATE(),
    CREATED_DATE DATETIME2 DEFAULT GETDATE(),
    UPDATED_DATE DATETIME2 DEFAULT GETDATE(),
    FILE_NAME NVARCHAR(255),
    ValidFrom DATETIME2 GENERATED ALWAYS AS ROW START,
    ValidTo DATETIME2 GENERATED ALWAYS AS ROW END,
    PERIOD FOR SYSTEM_TIME (ValidFrom, ValidTo)
) WITH (SYSTEM_VERSIONING = ON (HISTORY_TABLE = dbo.EI01_History));

-- Create Columnstore Index
CREATE NONCLUSTERED COLUMNSTORE INDEX IX_EI01_Columnstore
ON EI01 ([NGAY_DL], [CREATED_DATE]);
EOF
            ;;
        "GL01")
            cat > "$sql_file" << 'EOF'
-- Drop existing table and history
ALTER TABLE GL01 SET (SYSTEM_VERSIONING = OFF);
DROP TABLE IF EXISTS GL01_History;
DROP TABLE IF EXISTS GL01;

-- Create new GL01 with real column names
CREATE TABLE GL01 (
    Id INT IDENTITY(1,1) PRIMARY KEY,
    [STS] NVARCHAR(500),
    [NGAY_GD] NVARCHAR(500),
    [NGUOI_TAO] NVARCHAR(500),
    [DYSEQ] NVARCHAR(500),
    [TR_TYPE] NVARCHAR(500),
    [DT_SEQ] NVARCHAR(500),
    [TAI_KHOAN] NVARCHAR(500),
    [TEN_TK] NVARCHAR(500),
    [SO_TIEN_GD] NVARCHAR(500),
    [POST_BR] NVARCHAR(500),
    [LOAI_TIEN] NVARCHAR(500),
    [DR_CR] NVARCHAR(500),
    [MA_KH] NVARCHAR(500),
    [TEN_KH] NVARCHAR(500),
    [CCA_USRID] NVARCHAR(500),
    [TR_EX_RT] NVARCHAR(500),
    [REMARK] NVARCHAR(500),
    [BUS_CODE] NVARCHAR(500),
    [UNIT_BUS_CODE] NVARCHAR(500),
    [TR_CODE] NVARCHAR(500),
    [TR_NAME] NVARCHAR(500),
    [REFERENCE] NVARCHAR(500),
    [VALUE_DATE] NVARCHAR(500),
    [DEPT_CODE] NVARCHAR(500),
    [TR_TIME] NVARCHAR(500),
    [COMFIRM] NVARCHAR(500),
    [TRDT_TIME] NVARCHAR(500),
    NGAY_DL DATE DEFAULT GETDATE(),
    CREATED_DATE DATETIME2 DEFAULT GETDATE(),
    UPDATED_DATE DATETIME2 DEFAULT GETDATE(),
    FILE_NAME NVARCHAR(255),
    ValidFrom DATETIME2 GENERATED ALWAYS AS ROW START,
    ValidTo DATETIME2 GENERATED ALWAYS AS ROW END,
    PERIOD FOR SYSTEM_TIME (ValidFrom, ValidTo)
) WITH (SYSTEM_VERSIONING = ON (HISTORY_TABLE = dbo.GL01_History));

-- Create Columnstore Index
CREATE NONCLUSTERED COLUMNSTORE INDEX IX_GL01_Columnstore
ON GL01 ([NGAY_DL], [CREATED_DATE]);
EOF
            ;;
        "GL41")
            cat > "$sql_file" << 'EOF'
-- Drop existing table and history
ALTER TABLE GL41 SET (SYSTEM_VERSIONING = OFF);
DROP TABLE IF EXISTS GL41_History;
DROP TABLE IF EXISTS GL41;

-- Create new GL41 with real column names
CREATE TABLE GL41 (
    Id INT IDENTITY(1,1) PRIMARY KEY,
    [MA_CN] NVARCHAR(500),
    [LOAI_TIEN] NVARCHAR(500),
    [MA_TK] NVARCHAR(500),
    [TEN_TK] NVARCHAR(500),
    [LOAI_BT] NVARCHAR(500),
    [DN_DAUKY] NVARCHAR(500),
    [DC_DAUKY] NVARCHAR(500),
    [SBT_NO] NVARCHAR(500),
    [ST_GHINO] NVARCHAR(500),
    [SBT_CO] NVARCHAR(500),
    [ST_GHICO] NVARCHAR(500),
    [DN_CUOIKY] NVARCHAR(500),
    [DC_CUOIKY] NVARCHAR(500),
    NGAY_DL DATE DEFAULT GETDATE(),
    CREATED_DATE DATETIME2 DEFAULT GETDATE(),
    UPDATED_DATE DATETIME2 DEFAULT GETDATE(),
    FILE_NAME NVARCHAR(255),
    ValidFrom DATETIME2 GENERATED ALWAYS AS ROW START,
    ValidTo DATETIME2 GENERATED ALWAYS AS ROW END,
    PERIOD FOR SYSTEM_TIME (ValidFrom, ValidTo)
) WITH (SYSTEM_VERSIONING = ON (HISTORY_TABLE = dbo.GL41_History));

-- Create Columnstore Index
CREATE NONCLUSTERED COLUMNSTORE INDEX IX_GL41_Columnstore
ON GL41 ([NGAY_DL], [CREATED_DATE]);
EOF
            ;;
        "LN01")
            cat > "$sql_file" << 'EOF'
-- Drop existing table and history
ALTER TABLE LN01 SET (SYSTEM_VERSIONING = OFF);
DROP TABLE IF EXISTS LN01_History;
DROP TABLE IF EXISTS LN01;

-- Create new LN01 with real column names (79 business columns)
CREATE TABLE LN01 (
    Id INT IDENTITY(1,1) PRIMARY KEY,
    [BRCD] NVARCHAR(500),
    [CUSTSEQ] NVARCHAR(500),
    [CUSTNM] NVARCHAR(500),
    [TAI_KHOAN] NVARCHAR(500),
    [CCY] NVARCHAR(500),
    [DU_NO] NVARCHAR(500),
    [DSBSSEQ] NVARCHAR(500),
    [TRANSACTION_DATE] NVARCHAR(500),
    [DSBSDT] NVARCHAR(500),
    [DISBUR_CCY] NVARCHAR(500),
    [DISBURSEMENT_AMOUNT] NVARCHAR(500),
    [DSBSMATDT] NVARCHAR(500),
    [BSRTCD] NVARCHAR(500),
    [INTEREST_RATE] NVARCHAR(500),
    [APPRSEQ] NVARCHAR(500),
    [APPRDT] NVARCHAR(500),
    [APPR_CCY] NVARCHAR(500),
    [APPRAMT] NVARCHAR(500),
    [APPRMATDT] NVARCHAR(500),
    [LOAN_TYPE] NVARCHAR(500),
    [FUND_RESOURCE_CODE] NVARCHAR(500),
    [FUND_PURPOSE_CODE] NVARCHAR(500),
    [REPAYMENT_AMOUNT] NVARCHAR(500),
    [NEXT_REPAY_DATE] NVARCHAR(500),
    [NEXT_REPAY_AMOUNT] NVARCHAR(500),
    [NEXT_INT_REPAY_DATE] NVARCHAR(500),
    [OFFICER_ID] NVARCHAR(500),
    [OFFICER_NAME] NVARCHAR(500),
    [INTEREST_AMOUNT] NVARCHAR(500),
    [PASTDUE_INTEREST_AMOUNT] NVARCHAR(500),
    [TOTAL_INTEREST_REPAY_AMOUNT] NVARCHAR(500),
    [CUSTOMER_TYPE_CODE] NVARCHAR(500),
    [CUSTOMER_TYPE_CODE_DETAIL] NVARCHAR(500),
    [TRCTCD] NVARCHAR(500),
    [TRCTNM] NVARCHAR(500),
    [ADDR1] NVARCHAR(500),
    [PROVINCE] NVARCHAR(500),
    [LCLPROVINNM] NVARCHAR(500),
    [DISTRICT] NVARCHAR(500),
    [LCLDISTNM] NVARCHAR(500),
    [COMMCD] NVARCHAR(500),
    [LCLWARDNM] NVARCHAR(500),
    [LAST_REPAY_DATE] NVARCHAR(500),
    [SECURED_PERCENT] NVARCHAR(500),
    [NHOM_NO] NVARCHAR(500),
    [LAST_INT_CHARGE_DATE] NVARCHAR(500),
    [EXEMPTINT] NVARCHAR(500),
    [EXEMPTINTTYPE] NVARCHAR(500),
    [EXEMPTINTAMT] NVARCHAR(500),
    [GRPNO] NVARCHAR(500),
    [BUSCD] NVARCHAR(500),
    [BSNSSCLTPCD] NVARCHAR(500),
    [USRIDOP] NVARCHAR(500),
    [ACCRUAL_AMOUNT] NVARCHAR(500),
    [ACCRUAL_AMOUNT_END_OF_MONTH] NVARCHAR(500),
    [INTCMTH] NVARCHAR(500),
    [INTRPYMTH] NVARCHAR(500),
    [INTTRMMTH] NVARCHAR(500),
    [YRDAYS] NVARCHAR(500),
    [REMARK] NVARCHAR(500),
    [CHITIEU] NVARCHAR(500),
    [CTCV] NVARCHAR(500),
    [CREDIT_LINE_YPE] NVARCHAR(500),
    [INT_LUMPSUM_PARTIAL_TYPE] NVARCHAR(500),
    [INT_PARTIAL_PAYMENT_TYPE] NVARCHAR(500),
    [INT_PAYMENT_INTERVAL] NVARCHAR(500),
    [AN_HAN_LAI] NVARCHAR(500),
    [PHUONG_THUC_GIAI_NGAN_1] NVARCHAR(500),
    [TAI_KHOAN_GIAI_NGAN_1] NVARCHAR(500),
    [SO_TIEN_GIAI_NGAN_1] NVARCHAR(500),
    [PHUONG_THUC_GIAI_NGAN_2] NVARCHAR(500),
    [TAI_KHOAN_GIAI_NGAN_2] NVARCHAR(500),
    [SO_TIEN_GIAI_NGAN_2] NVARCHAR(500),
    [CMT_HC] NVARCHAR(500),
    [NGAY_SINH] NVARCHAR(500),
    [MA_CB_AGRI] NVARCHAR(500),
    [MA_NGANH_KT] NVARCHAR(500),
    [TY_GIA] NVARCHAR(500),
    [OFFICER_IPCAS] NVARCHAR(500),
    NGAY_DL DATE DEFAULT GETDATE(),
    CREATED_DATE DATETIME2 DEFAULT GETDATE(),
    UPDATED_DATE DATETIME2 DEFAULT GETDATE(),
    FILE_NAME NVARCHAR(255),
    ValidFrom DATETIME2 GENERATED ALWAYS AS ROW START,
    ValidTo DATETIME2 GENERATED ALWAYS AS ROW END,
    PERIOD FOR SYSTEM_TIME (ValidFrom, ValidTo)
) WITH (SYSTEM_VERSIONING = ON (HISTORY_TABLE = dbo.LN01_History));

-- Create Columnstore Index
CREATE NONCLUSTERED COLUMNSTORE INDEX IX_LN01_Columnstore
ON LN01 ([NGAY_DL], [CREATED_DATE]);
EOF
            ;;
        "LN03")
            cat > "$sql_file" << 'EOF'
-- Drop existing table and history
ALTER TABLE LN03 SET (SYSTEM_VERSIONING = OFF);
DROP TABLE IF EXISTS LN03_History;
DROP TABLE IF EXISTS LN03;

-- Create new LN03 with real column names (17 business columns - ignore empty trailing columns)
CREATE TABLE LN03 (
    Id INT IDENTITY(1,1) PRIMARY KEY,
    [MACHINHANH] NVARCHAR(500),
    [TENCHINHANH] NVARCHAR(500),
    [MAKH] NVARCHAR(500),
    [TENKH] NVARCHAR(500),
    [SOHOPDONG] NVARCHAR(500),
    [SOTIENXLRR] NVARCHAR(500),
    [NGAYPHATSINHXL] NVARCHAR(500),
    [THUNOSAUXL] NVARCHAR(500),
    [CONLAINGOAIBANG] NVARCHAR(500),
    [DUNONOIBANG] NVARCHAR(500),
    [NHOMNO] NVARCHAR(500),
    [MACBTD] NVARCHAR(500),
    [TENCBTD] NVARCHAR(500),
    [MAPGD] NVARCHAR(500),
    [TAIKHOANHACHTOAN] NVARCHAR(500),
    [REFNO] NVARCHAR(500),
    [LOAINGUONVON] NVARCHAR(500),
    NGAY_DL DATE DEFAULT GETDATE(),
    CREATED_DATE DATETIME2 DEFAULT GETDATE(),
    UPDATED_DATE DATETIME2 DEFAULT GETDATE(),
    FILE_NAME NVARCHAR(255),
    ValidFrom DATETIME2 GENERATED ALWAYS AS ROW START,
    ValidTo DATETIME2 GENERATED ALWAYS AS ROW END,
    PERIOD FOR SYSTEM_TIME (ValidFrom, ValidTo)
) WITH (SYSTEM_VERSIONING = ON (HISTORY_TABLE = dbo.LN03_History));

-- Create Columnstore Index
CREATE NONCLUSTERED COLUMNSTORE INDEX IX_LN03_Columnstore
ON LN03 ([NGAY_DL], [CREATED_DATE]);
EOF
            ;;
        "RR01")
            cat > "$sql_file" << 'EOF'
-- Drop existing table and history
ALTER TABLE RR01 SET (SYSTEM_VERSIONING = OFF);
DROP TABLE IF EXISTS RR01_History;
DROP TABLE IF EXISTS RR01;

-- Create new RR01 with real column names
CREATE TABLE RR01 (
    Id INT IDENTITY(1,1) PRIMARY KEY,
    [CN_LOAI_I] NVARCHAR(500),
    [BRCD] NVARCHAR(500),
    [MA_KH] NVARCHAR(500),
    [TEN_KH] NVARCHAR(500),
    [SO_LDS] NVARCHAR(500),
    [CCY] NVARCHAR(500),
    [SO_LAV] NVARCHAR(500),
    [LOAI_KH] NVARCHAR(500),
    [NGAY_GIAI_NGAN] NVARCHAR(500),
    [NGAY_DEN_HAN] NVARCHAR(500),
    [VAMC_FLG] NVARCHAR(500),
    [NGAY_XLRR] NVARCHAR(500),
    [DUNO_GOC_BAN_DAU] NVARCHAR(500),
    [DUNO_LAI_TICHLUY_BD] NVARCHAR(500),
    [DOC_DAUKY_DA_THU_HT] NVARCHAR(500),
    [DUNO_GOC_HIENTAI] NVARCHAR(500),
    [DUNO_LAI_HIENTAI] NVARCHAR(500),
    [DUNO_NGAN_HAN] NVARCHAR(500),
    [DUNO_TRUNG_HAN] NVARCHAR(500),
    [DUNO_DAI_HAN] NVARCHAR(500),
    [THU_GOC] NVARCHAR(500),
    [THU_LAI] NVARCHAR(500),
    [BDS] NVARCHAR(500),
    [DS] NVARCHAR(500),
    [TSK] NVARCHAR(500),
    NGAY_DL DATE DEFAULT GETDATE(),
    CREATED_DATE DATETIME2 DEFAULT GETDATE(),
    UPDATED_DATE DATETIME2 DEFAULT GETDATE(),
    FILE_NAME NVARCHAR(255),
    ValidFrom DATETIME2 GENERATED ALWAYS AS ROW START,
    ValidTo DATETIME2 GENERATED ALWAYS AS ROW END,
    PERIOD FOR SYSTEM_TIME (ValidFrom, ValidTo)
) WITH (SYSTEM_VERSIONING = ON (HISTORY_TABLE = dbo.RR01_History));

-- Create Columnstore Index
CREATE NONCLUSTERED COLUMNSTORE INDEX IX_RR01_Columnstore
ON RR01 ([NGAY_DL], [CREATED_DATE]);
EOF
            ;;
    esac

    # Execute the SQL file
    sqlcmd -S localhost,1433 -U sa -P 'YourStrong@Password123' -C -d KhoanDB -i "$sql_file"

    if [ $? -eq 0 ]; then
        echo "✅ Successfully created $table_name with real column names"
    else
        echo "❌ Failed to create $table_name"
    fi

    # Cleanup temp file
    rm -f "$sql_file"
}

# Recreate all tables
for table in DP01 DPDA EI01 GL01 GL41 LN01 LN03 RR01; do
    create_new_table $table
    echo ""
done

echo ""
echo "✅ TABLE REBUILD COMPLETED $(date '+%H:%M:%S')"
echo ""
echo "🔍 STEP 3: VERIFY NEW STRUCTURE"
echo "==============================="

# Verify the new structures
sqlcmd -S localhost,1433 -U sa -P 'YourStrong@Password123' -C -d KhoanDB -Q "
SELECT
    t.TABLE_NAME,
    COUNT(*) as TotalColumns,
    COUNT(CASE WHEN c.COLUMN_NAME NOT IN ('Id', 'NGAY_DL', 'CREATED_DATE', 'UPDATED_DATE', 'FILE_NAME', 'ValidFrom', 'ValidTo') THEN 1 END) as BusinessColumns,
    COUNT(CASE WHEN c.COLUMN_NAME LIKE 'Col%' THEN 1 END) as GenericColumns
FROM INFORMATION_SCHEMA.TABLES t
JOIN INFORMATION_SCHEMA.COLUMNS c ON t.TABLE_NAME = c.TABLE_NAME
WHERE t.TABLE_NAME IN ('DP01', 'DPDA', 'EI01', 'GL01', 'GL41', 'LN01', 'LN03', 'RR01')
AND t.TABLE_TYPE = 'BASE TABLE'
GROUP BY t.TABLE_NAME
ORDER BY t.TABLE_NAME;

-- Check temporal and columnstore status
SELECT
    t.name AS TableName,
    t.temporal_type_desc AS TemporalType,
    CASE WHEN EXISTS (
        SELECT 1 FROM sys.indexes i
        WHERE i.object_id = t.object_id
        AND i.type = 5
    ) THEN 'YES' ELSE 'NO' END AS HasColumnstore
FROM sys.tables t
WHERE t.name IN ('DP01', 'DPDA', 'EI01', 'GL01', 'GL41', 'LN01', 'LN03', 'RR01')
ORDER BY t.name;
"

echo ""
echo "🎉 REBUILD PROCESS COMPLETED!"
echo "============================="
echo "Next steps:"
echo "1. ✅ All tables now have REAL column names from CSV files"
echo "2. ✅ Temporal Tables and Columnstore indexes enabled"
echo "3. 🔄 Ready for CSV import with proper column mapping"
echo "4. 📊 Validate data import functionality"
