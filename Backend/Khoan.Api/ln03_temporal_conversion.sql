-- ========================================
-- üï∞Ô∏è LN03 TEMPORAL TABLE CONVERSION SCRIPT
-- ========================================
-- Chuy·ªÉn ƒë·ªïi LN03 t·ª´ b·∫£ng th∆∞·ªùng th√†nh Temporal Table v·ªõi l·ªãch s·ª≠ t·ª± ƒë·ªông

USE TinhKhoanDB;
GO

PRINT 'üï∞Ô∏è B·∫ÆT ƒê·∫¶U CHUY·ªÇN ƒê·ªîI LN03 TH√ÄNH TEMPORAL TABLE...';

-- ========================================
-- 1. KI·ªÇM TRA TR·∫†NG TH√ÅI HI·ªÜN T·∫†I
-- ========================================
PRINT 'üîç ƒêang ki·ªÉm tra tr·∫°ng th√°i hi·ªán t·∫°i c·ªßa b·∫£ng LN03...';

SELECT 
    name,
    temporal_type_desc,
    CASE WHEN temporal_type = 0 THEN '‚ùå NON-TEMPORAL' 
         ELSE '‚úÖ TEMPORAL' END as Status
FROM sys.tables 
WHERE name = 'LN03';

-- ========================================
-- 2. TH√äM C√ÅC C·ªòT TEMPORAL (n·∫øu ch∆∞a c√≥)
-- ========================================
PRINT 'üìÖ ƒêang th√™m c√°c c·ªôt temporal...';

-- Ki·ªÉm tra v√† th√™m SysStartTime
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS 
               WHERE TABLE_NAME = 'LN03' AND COLUMN_NAME = 'SysStartTime')
BEGIN
    ALTER TABLE LN03 
    ADD SysStartTime datetime2 GENERATED ALWAYS AS ROW START HIDDEN
        CONSTRAINT DF_LN03_SysStartTime DEFAULT SYSUTCDATETIME();
    PRINT '‚úÖ ƒê√£ th√™m c·ªôt SysStartTime';
END
ELSE
    PRINT '‚ö†Ô∏è C·ªôt SysStartTime ƒë√£ t·ªìn t·∫°i';

-- Ki·ªÉm tra v√† th√™m SysEndTime  
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS 
               WHERE TABLE_NAME = 'LN03' AND COLUMN_NAME = 'SysEndTime')
BEGIN
    ALTER TABLE LN03 
    ADD SysEndTime datetime2 GENERATED ALWAYS AS ROW END HIDDEN
        CONSTRAINT DF_LN03_SysEndTime DEFAULT CONVERT(datetime2, '9999-12-31 23:59:59.9999999');
    PRINT '‚úÖ ƒê√£ th√™m c·ªôt SysEndTime';
END
ELSE
    PRINT '‚ö†Ô∏è C·ªôt SysEndTime ƒë√£ t·ªìn t·∫°i';

-- ========================================
-- 3. T·∫†O PERIOD DEFINITION
-- ========================================
PRINT '‚è∞ ƒêang t·∫°o Period definition...';

-- Th√™m Period cho System Versioning
IF NOT EXISTS (SELECT * FROM sys.periods WHERE object_id = OBJECT_ID('LN03'))
BEGIN
    ALTER TABLE LN03 
    ADD PERIOD FOR SYSTEM_TIME (SysStartTime, SysEndTime);
    PRINT '‚úÖ ƒê√£ th√™m Period definition';
END
ELSE
    PRINT '‚ö†Ô∏è Period definition ƒë√£ t·ªìn t·∫°i';

-- ========================================
-- 4. T·∫†O HISTORY TABLE
-- ========================================
PRINT 'üìö ƒêang t·∫°o History table...';

-- T·∫°o b·∫£ng l·ªãch s·ª≠ n·∫øu ch∆∞a c√≥
IF NOT EXISTS (SELECT * FROM sys.tables WHERE name = 'LN03_History')
BEGIN
    -- T·∫°o b·∫£ng history v·ªõi c√πng structure
    SELECT TOP 0 *
    INTO LN03_History
    FROM LN03;
    
    -- Th√™m clustered index cho history table
    CREATE CLUSTERED INDEX CIX_LN03_History 
    ON LN03_History (SysEndTime, SysStartTime) 
    WITH (DATA_COMPRESSION = PAGE);
    
    PRINT '‚úÖ ƒê√£ t·∫°o b·∫£ng LN03_History';
END
ELSE
    PRINT '‚ö†Ô∏è B·∫£ng LN03_History ƒë√£ t·ªìn t·∫°i';

-- ========================================
-- 5. ENABLE SYSTEM VERSIONING
-- ========================================
PRINT 'üîÑ ƒêang b·∫≠t System Versioning...';

BEGIN TRY
    ALTER TABLE LN03 
    SET (SYSTEM_VERSIONING = ON (HISTORY_TABLE = dbo.LN03_History));
    
    PRINT '‚úÖ System Versioning ƒë√£ ƒë∆∞·ª£c b·∫≠t th√†nh c√¥ng!';
END TRY
BEGIN CATCH
    PRINT '‚ö†Ô∏è L·ªói khi b·∫≠t System Versioning: ' + ERROR_MESSAGE();
    
    -- N·∫øu c√≥ l·ªói, c√≥ th·ªÉ do constraints, th·ª≠ cleanup
    IF ERROR_NUMBER() = 13591 -- Foreign key constraint error
    BEGIN
        PRINT 'üîß ƒêang th·ª≠ cleanup v√† retry...';
        -- C√≥ th·ªÉ c·∫ßn x·ª≠ l√Ω constraints ·ªü ƒë√¢y
    END
END CATCH

-- ========================================
-- 6. KI·ªÇM TRA K·∫æT QU·∫¢
-- ========================================
PRINT 'üîç ƒêang ki·ªÉm tra k·∫øt qu·∫£ conversion...';

-- Ki·ªÉm tra tr·∫°ng th√°i temporal
SELECT 
    t.name AS TableName,
    t.temporal_type_desc AS TemporalType,
    h.name AS HistoryTableName,
    CASE 
        WHEN t.temporal_type = 2 THEN '‚úÖ SYSTEM-VERSIONED TEMPORAL TABLE'
        WHEN t.temporal_type = 1 THEN '‚ö†Ô∏è HISTORY TABLE' 
        ELSE '‚ùå NON-TEMPORAL TABLE'
    END AS Status
FROM sys.tables t
LEFT JOIN sys.tables h ON t.history_table_id = h.object_id  
WHERE t.name IN ('LN03', 'LN03_History')
ORDER BY t.temporal_type DESC;

-- Hi·ªÉn th·ªã c·∫•u tr√∫c temporal columns
PRINT '';
PRINT 'üìÖ TEMPORAL COLUMNS:';
SELECT 
    COLUMN_NAME,
    DATA_TYPE,
    generated_always_type_desc,
    is_hidden
FROM sys.columns c
JOIN sys.tables t ON c.object_id = t.object_id
WHERE t.name = 'LN03' 
  AND COLUMN_NAME IN ('SysStartTime', 'SysEndTime')
ORDER BY column_id;

-- Test insert ƒë·ªÉ xem temporal ho·∫°t ƒë·ªông
PRINT '';
PRINT 'üß™ Test temporal functionality...';

DECLARE @TestId INT;
INSERT INTO LN03 (NGAY_DL, MACHINHANH, MAKH, TENKH, IS_DELETED, CREATED_DATE, UPDATED_DATE)
VALUES ('2024-12-31', '7800', 'TEST001', 'Test Customer', 0, GETDATE(), GETDATE());

SET @TestId = SCOPE_IDENTITY();

-- C·∫≠p nh·∫≠t ƒë·ªÉ t·∫°o l·ªãch s·ª≠
WAITFOR DELAY '00:00:01'; -- ƒê·ª£i 1 gi√¢y ƒë·ªÉ c√≥ th·ªùi gian kh√°c bi·ªát
UPDATE LN03 SET TENKH = 'Test Customer Updated' WHERE Id = @TestId;

-- Ki·ªÉm tra l·ªãch s·ª≠
SELECT COUNT(*) as HistoryRecords 
FROM LN03_History 
WHERE Id = @TestId;

-- Cleanup test record
DELETE FROM LN03 WHERE Id = @TestId;

-- ========================================
-- 7. TEMPORAL TABLE CONVERSION COMPLETE
-- ========================================
PRINT '';
PRINT 'üéâ TEMPORAL TABLE CONVERSION HO√ÄN TH√ÄNH!';
PRINT '';
PRINT 'üìä K·∫æT QU·∫¢:';
PRINT '   ‚úÖ Temporal Columns: SysStartTime, SysEndTime';
PRINT '   ‚úÖ History Table: LN03_History';
PRINT '   ‚úÖ System Versioning: ENABLED';
PRINT '   ‚úÖ Automatic History: ACTIVE';
PRINT '';
PRINT 'üï∞Ô∏è LN03 B·∫¢N TEMPORAL TABLE S·∫¥N S√ÄNG!';

GO
