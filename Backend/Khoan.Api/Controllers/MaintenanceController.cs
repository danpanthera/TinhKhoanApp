using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Khoan.Api.Data;

namespace Khoan.Api.Controllers
{
    /// <summary>
    /// Maintenance controller for fixing data issues
    /// </summary>
    [ApiController]
    [Route("api/[controller]")]
    public class MaintenanceController : ControllerBase
    {
        private readonly ApplicationDbContext _context;
        private readonly ILogger<MaintenanceController> _logger;

        public MaintenanceController(ApplicationDbContext context, ILogger<MaintenanceController> logger)
        {
            _context = context;
            _logger = logger;
        }

        /// <summary>
        /// Fix Vietnamese encoding in KPI indicator names
        /// </summary>
        [HttpPost("fix-vietnamese-encoding")]
        public async Task<IActionResult> FixVietnameseEncoding()
        {
            try
            {
                _logger.LogInformation("üîß Starting Vietnamese encoding fix for KPI Indicators...");

                var indicators = await _context.KpiIndicators.ToListAsync();
                int fixedCount = 0;

                // Dictionary to fix common corrupted Vietnamese characters
                var encodingFixes = new Dictionary<string, string>
                {
                    // Existing fixes
                    { "T?ng ngu?n v?n cu?i k?", "T·ªïng ngu·ªìn v·ªën cu·ªëi k·ª≥" },
                    { "T?ng ngu?n v?n huy d?ng BQ trong k?", "T·ªïng ngu·ªìn v·ªën huy ƒë·ªông BQ trong k·ª≥" },
                    { "T?ng du n? cu?i k?", "T·ªïng d∆∞ n·ª£ cu·ªëi k·ª≥" },
                    { "T?ng du n? BQ trong k?", "T·ªïng d∆∞ n·ª£ BQ trong k·ª≥" },
                    { "T?ng du n? HSX&CN", "T·ªïng d∆∞ n·ª£ HSX&CN" },
                    { "T? l? n? x?u n?i b?ng", "T·ª∑ l·ªá n·ª£ x·∫•u n·ªôi b·∫£ng" },
                    { "Thu n? d√£ XLRR", "Thu n·ª£ ƒë√£ XLRR" },
                    { "Ph√°t tri?n Kh√°ch h√†ng", "Ph√°t tri·ªÉn Kh√°ch h√†ng" },
                    { "L?i nhu?n kho√°n t√†i ch√≠nh", "L·ª£i nhu·∫≠n kho√°n t√†i ch√≠nh" },
                    { "T?ng ngu?n v?n huy d?ng BQ", "T·ªïng ngu·ªìn v·ªën huy ƒë·ªông BQ" },
                    { "T?ng ngu?n v?n BQ", "T·ªïng ngu·ªìn v·ªën BQ" },
                    { "T?ng ngu?n v?n", "T·ªïng ngu·ªìn v·ªën" },
                    { "T?ng du n?", "T·ªïng d∆∞ n·ª£" },
                    { "L?i nhu?n", "L·ª£i nhu·∫≠n" },
                    { "Thu n?", "Thu n·ª£" },
                    { "N? x?u", "N·ª£ x·∫•u" },
                    { "Ph√°t tri?n", "Ph√°t tri·ªÉn" },

                    // Additional comprehensive fixes for more patterns
                    { "T?ng Du n?", "T·ªïng D∆∞ n·ª£" },
                    { "T? l?", "T·ª∑ l·ªá" },
                    { "n? x?u", "n·ª£ x·∫•u" },
                    { "d√£ XLRR", "ƒë√£ XLRR" },
                    { "Doanh nghi?p", "Doanh nghi·ªáp" },
                    { "nghi?p", "nghi·ªáp" },
                    { "√êi?u h√†nh", "ƒêi·ªÅu h√†nh" },
                    { "i?u", "i·ªÅu" },
                    { "Ch?p h√†nh", "Ch·∫•p h√†nh" },
                    { "?p h√†nh", "·∫•p h√†nh" },
                    { "quy ch?", "quy ch·∫ø" },
                    { "nghi?p v?", "nghi·ªáp v·ª•" },
                    { "k?t qu?", "k·∫øt qu·∫£" },
                    { "th?c hi?n", "th·ª±c hi·ªán" },
                    { "ph? tr√°ch", "ph·ª• tr√°ch" },

                    // Additional fixes for newly found corrupted characters
                    { "Thu d?ch v?", "Thu d·ªãch v·ª•" },
                    { "d?ch v?", "d·ªãch v·ª•" },
                    { "K?t qu?", "K·∫øt qu·∫£" },
                    { "c?a", "c·ªßa" },
                    { "nu?c", "n∆∞·ªõc" },
                    { "Th?c hi?n", "Th·ª±c hi·ªán" },
                    { "ch?c nang", "ch·ª©c nƒÉng" },
                    { "nhi?m v?", "nhi·ªám v·ª•" },
                    { "du?c", "ƒë∆∞·ª£c" },
                    { "thu?c", "thu·ªôc" },
                    { "CB", "CB" }, // This one is already correct (C√°n B·ªô abbreviation)
                    { "BQ", "BQ" }  // This one is already correct (B√¨nh Qu√¢n abbreviation)
                };

                var fixedIndicators = new List<object>();

                foreach (var indicator in indicators)
                {
                    var originalName = indicator.IndicatorName;
                    var fixedName = originalName;

                    // Apply encoding fixes
                    foreach (var fix in encodingFixes)
                    {
                        if (fixedName.Contains(fix.Key))
                        {
                            fixedName = fixedName.Replace(fix.Key, fix.Value);
                        }
                    }

                    if (fixedName != originalName)
                    {
                        _logger.LogInformation($"  üî§ Fixing: '{originalName}' ‚Üí '{fixedName}'");
                        indicator.IndicatorName = fixedName;
                        fixedCount++;

                        fixedIndicators.Add(new
                        {
                            Id = indicator.Id,
                            TableId = indicator.TableId,
                            OriginalName = originalName,
                            FixedName = fixedName
                        });
                    }
                }

                if (fixedCount > 0)
                {
                    await _context.SaveChangesAsync();
                    _logger.LogInformation($"‚úÖ Fixed {fixedCount} indicator names with Vietnamese encoding issues");

                    return Ok(new
                    {
                        success = true,
                        message = $"Fixed {fixedCount} indicator names with Vietnamese encoding issues",
                        fixedCount = fixedCount,
                        fixedIndicators = fixedIndicators
                    });
                }
                else
                {
                    _logger.LogInformation("‚ÑπÔ∏è No encoding issues found in indicator names");
                    return Ok(new
                    {
                        success = true,
                        message = "No encoding issues found in indicator names",
                        fixedCount = 0,
                        fixedIndicators = new object[0]
                    });
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "‚ùå Error fixing Vietnamese encoding");
                return StatusCode(500, new
                {
                    success = false,
                    message = "Error fixing Vietnamese encoding",
                    error = ex.Message
                });
            }
        }
    }
}
